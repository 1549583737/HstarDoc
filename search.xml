<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[VsCode简易配置手册]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/VsCode%E7%AE%80%E6%98%93%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/</url>
      <content type="html"><![CDATA[<h2 id="0、什么是VsCode（Visual-Studio-Code-vsc）"><a href="#0、什么是VsCode（Visual-Studio-Code-vsc）" class="headerlink" title="0、什么是VsCode（Visual Studio Code - vsc）"></a>0、什么是VsCode（Visual Studio Code - vsc）</h2><p>VsCode是MS基于Atom Shell开发的新一代 <strong><em>跨平台</em></strong> 编辑器。vsc将简洁和”编码-编辑-调试”循环的流水线特点结合在代码编辑器中。</p>
<p>截止该文创建时，最新版本是0.10.11。官网地址： <a href="https://code.visualstudio.com" target="_blank" rel="external">https://code.visualstudio.com</a></p>
<h2 id="1、VsCode的优势"><a href="#1、VsCode的优势" class="headerlink" title="1、VsCode的优势"></a>1、VsCode的优势</h2><p>对比业界各类强大的编辑器，VsCode有哪些优势呢？</p>
<ol>
<li>跨平台 - VsCode兼容Windows,Linux,OSX三大平台</li>
<li>高性能 - VsCode对比Atom，有更高的性能，更快的大文件加载速度</li>
<li>集成Git - Git作为最流行的版本控制工具，VsCode默认集成</li>
<li>代码调试 - 强大的调试工具</li>
<li>智能提示（代码不全） - 强大的代码不全，语义理解</li>
<li>插件机制 - 可以很方便的扩展需要的功能</li>
</ol>
<h2 id="2、配置编辑器"><a href="#2、配置编辑器" class="headerlink" title="2、配置编辑器"></a>2、配置编辑器</h2><h3 id="2-1、用户设置"><a href="#2-1、用户设置" class="headerlink" title="2.1、用户设置"></a>2.1、用户设置</h3><p>通过选择菜单栏上的Files &gt; Preferences &gt; User Settings，或者是按F1，然后输入user，进行user settings.json的配置。</p>
<p>在配置时，默认是分栏的界面，左侧是标准的系统配置项，右侧是用户自定义配置项。配置右边的项就可以参考左边的标准配置。</p>
<p>由于默认配置已经非常实用了，所以需要我们自定义配置的项并不多：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "editor.tabSize": 2, //tab键所占用的字符数</div><div class="line">    "files.exclude": &#123; //需要排除的文件（夹），不在EXPLORER面板中显示</div><div class="line">      ".idea/": false,</div><div class="line">      ".vscode/": false,</div><div class="line">      "typings/": false</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2、工作空间配置"><a href="#2-2、工作空间配置" class="headerlink" title="2.2、工作空间配置"></a>2.2、工作空间配置</h3><p>与用户设置一样，我们可以针对工作空间进行配置，此处的配置文件，保存在目录下vscode/settings.json中。</p>
<h3 id="2-3-常用快捷键说明"><a href="#2-3-常用快捷键说明" class="headerlink" title="2.3 常用快捷键说明"></a>2.3 常用快捷键说明</h3><ol>
<li>Ctrl+Shift+\  在块标记之间跳转</li>
<li>Ctrl+Down or Ctrl+Up  上下移动一行</li>
<li>Ctrl+Alt+Down or Ctrl+Alt+Up  上下纵向选择</li>
<li>Alt+Click  添加辅助光标，然后就可以多个光标编辑了</li>
<li>Ctrl+D 当有选中字符时，跳转到下一个该字符处</li>
<li>Ctrl+F2 or Ctrl+Shift+L  选中所有出现的选中字符</li>
<li>Ctrl+T 搜索语法</li>
<li>F1打开输入框，删除&gt;,输入?,可以看到相关命令</li>
</ol>
<p>更多快捷键，请参考：<a href="https://code.visualstudio.com/docs/customization/keybindings" target="_blank" rel="external">https://code.visualstudio.com/docs/customization/keybindings</a></p>
<h2 id="3、Debugging相关配置"><a href="#3、Debugging相关配置" class="headerlink" title="3、Debugging相关配置"></a>3、Debugging相关配置</h2><p>当前支持的Debugging语言有node，Chrome，Go，大概配置如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "version": "0.2.0",</div><div class="line">    "configurations": [</div><div class="line">        &#123;</div><div class="line">            "name": "Launch", //名称</div><div class="line">            "type": "node",  //类型</div><div class="line">            "request": "launch",</div><div class="line">            "program": "app.js", //要启动的程序</div><div class="line">            "stopOnEntry": false,</div><div class="line">            "args": [], //启动参数</div><div class="line">            "cwd": ".", //从那个相对路径启动</div><div class="line">            "runtimeExecutable": null,</div><div class="line">            "runtimeArgs": [</div><div class="line">                "--nolazy"</div><div class="line">            ],</div><div class="line">            "env": &#123;</div><div class="line">                "NODE_ENV": "development" //环境变量</div><div class="line">            &#125;,</div><div class="line">            "externalConsole": false,</div><div class="line">            "preLaunchTask": "",</div><div class="line">            "sourceMaps": false,</div><div class="line">            "outDir": null</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            "name": "Attach",</div><div class="line">            "type": "node",</div><div class="line">            "request": "attach",</div><div class="line">            "port": 5858</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4、Tasks相关配置"><a href="#4、Tasks相关配置" class="headerlink" title="4、Tasks相关配置"></a>4、Tasks相关配置</h2><p>在VsCode中，我们还可以自定义task。首先在.vscode目录下创建tasks.json，进行task的配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	"version": "0.1.0",</div><div class="line">	"command": "gulp",</div><div class="line">	"isShellCommand": true,</div><div class="line">	"tasks": [</div><div class="line">		&#123;</div><div class="line">			"taskName": "less", //配置任务名称</div><div class="line">			// Make this the default build command.</div><div class="line">			"isBuildCommand": true,</div><div class="line">			// Show the output window only if unrecognized errors occur.</div><div class="line">			"showOutput": "silent",</div><div class="line">			// Use the standard less compilation problem matcher.</div><div class="line">			"problemMatcher": "$lessCompile"</div><div class="line">		&#125;</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5、语言环境相关配置"><a href="#5、语言环境相关配置" class="headerlink" title="5、语言环境相关配置"></a>5、语言环境相关配置</h2><p>在使用VsCode的过程中，非常吸引人的一个特性就是智能提示。在0.10.8和之前的版本，node代码是直接可以通过typings来智能提示的。但是在0.10.10版本之后，就需要通过配置文件来启用功能了。</p>
<h3 id="5-1-JavaScript"><a href="#5-1-JavaScript" class="headerlink" title="5.1 JavaScript"></a>5.1 JavaScript</h3><p>在使用JavaScript的时候，配置文件是jsconfig.json(tsconfig.json的子集)，如果目录中存放该问题，表示该目录是项目的根路径。jsconfig配置文件本身列出属于该项目以及编译器的选项。大致内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "compilerOptions": &#123;</div><div class="line">    "target": "ES6", //可选es3,es5,es6,es2015</div><div class="line">    "module": "commonjs" //可选amd,umd,commonjs,system</div><div class="line">  &#125;,</div><div class="line">  "files": [ </div><div class="line">    "app.js",</div><div class="line">    "model.js"</div><div class="line">  ],</div><div class="line">  "exclude": [ //排除的目录，不在搜索</div><div class="line">    "node_modules"</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Tips: 如果应用程序有的代码在app/ or src/下，那么jsconfig应该在这些目录下创建</strong></p>
<p><strong>Tips: 如果你的工作空间中，包含多个不同的应用程序（比如client和server），那么请在每个文件夹下增加独立的jsconfig.json文件</strong></p>
<p><strong>Tips： 如果没有jsconfig.json，默认是排除node_modules目录</strong></p>
<h3 id="5-2、Dockerfile"><a href="#5-2、Dockerfile" class="headerlink" title="5.2、Dockerfile"></a>5.2、Dockerfile</h3><p>Dockerfile编写支持，极大的丰富了VsCode的多样性。要支持Dockerfile，需要通过ext install 来安装Dockerfile and Docker Compose File Support扩展。</p>
<p>创建好一个Dockerfile文件后，使用空格就可以使用智能提示了。</p>
<h3 id="5-3、关于智能提示所需要的typing文件"><a href="#5-3、关于智能提示所需要的typing文件" class="headerlink" title="5.3、关于智能提示所需要的typing文件"></a>5.3、关于智能提示所需要的typing文件</h3><p>要安装typing文件，那么首先需要我们全局安装<code>npm install typings -g</code>，typings相关地址<a href="https://github.com/typings/typings" target="_blank" rel="external">https://github.com/typings/typings</a></p>
<p>通过<code>typings search --name &lt;name&gt;</code> 可以全名匹配搜索插件</p>
<p>通过<code>typings search &lt;name&gt;</code> 可以模糊搜索插件</p>
<p>通过<code>typings install &lt;name&gt; --ambient --save</code> 可以安装type definition</p>
<p>如何要js文件能够智能提示呢？</p>
<p><strong>方式一：</strong>可以在js文件中首行使用引用注释的方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// &lt;reference path="typings/main.d.ts" /&gt;</span></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">fs.access...</div></pre></td></tr></table></figure>
<p><strong>方式二：</strong><br>把typings文件加入到jsconfig.json中的files项下，不要忘记Reload JavaScript Project</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "compilerOptions": &#123;</div><div class="line">    "target": "ES6", //可选es3,es5,es6,es2015</div><div class="line">    "module": "commonjs", //可选amd,umd,commonjs,system</div><div class="line">    "moduleResolution": "node"</div><div class="line">  &#125;,</div><div class="line">  "files": [</div><div class="line">    "typings/main.d.ts"</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>另，附上DefinitelyTyped仓库地址：<a href="https://github.com/DefinitelyTyped/DefinitelyTyped" target="_blank" rel="external">https://github.com/DefinitelyTyped/DefinitelyTyped</a></strong></p>
<h2 id="6、MORE"><a href="#6、MORE" class="headerlink" title="6、MORE"></a>6、MORE</h2><p>更多内容，请查阅：<a href="https://code.visualstudio.com/docs/" target="_blank" rel="external">https://code.visualstudio.com/docs/</a></p>
<p>补充说明，2016-3-18 16:08:01更新</p>
<p>如果在VsCode中开启了EsLint，而又使用了import等语法，请使用如下.eslintrc</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "parserOptions": &#123;</div><div class="line">        "ecmaVersion": 6,</div><div class="line">        "sourceType": "module", //支持import</div><div class="line">        "ecmaFeatures": &#123;</div><div class="line">            "globalReturn": true,</div><div class="line">            "impliedStrict": true,</div><div class="line">            "jsx": true,</div><div class="line">            "experimentalObjectRestSpread": true,</div><div class="line">            "modules": true</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    "rules": &#123;</div><div class="line">        "semi": 2</div><div class="line">    &#125;,</div><div class="line">    "env": &#123;</div><div class="line">      "browser": false,</div><div class="line">      "node": true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[认识AMD、CMD、UMD、CommonJS]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E8%AE%A4%E8%AF%86AMD%E3%80%81CMD%E3%80%81UMD%E3%80%81CommonJS/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>JavaScript的生态系统一直在稳步增长，当各种组件混合使用时，就可能会发现不是所有的组件都能“和平共处”，为了解决这些问题，各种模块规范就出来了。</p>
<h2 id="1、AMD（Asynchromous-Module-Definition-异步模块定义）"><a href="#1、AMD（Asynchromous-Module-Definition-异步模块定义）" class="headerlink" title="1、AMD（Asynchromous Module Definition - 异步模块定义）"></a>1、AMD（Asynchromous Module Definition - 异步模块定义）</h2><p>AMD是RequireJS在推广过程中对模块定义的规范化产出，AMD是异步加载模块，推崇依赖前置。</p>
<pre><code>define(&apos;module1&apos;, [&apos;jquery&apos;], ($) =&gt; {
  //do something...
});
</code></pre><p>代码中依赖被前置，当定义模块（module1）时，就会加载依赖（jquery）</p>
<h2 id="2、CMD（Common-Module-Definition-公共模块定义）"><a href="#2、CMD（Common-Module-Definition-公共模块定义）" class="headerlink" title="2、CMD（Common Module Definition - 公共模块定义）"></a>2、CMD（Common Module Definition - 公共模块定义）</h2><p>CMD是SeaJS在推广过程中对模块定义的规范化产出，对于模块的依赖，CMD是延迟执行，推崇依赖就近。</p>
<pre><code>define((require, exports, module) =&gt; {
  module.exports = {
    fun1: () =&gt; {
       var $ = require(&apos;jquery&apos;);
       return $(&apos;#test&apos;);
    } 
  };
});
</code></pre><p>如上代码，只有当真正执行到fun1方法时，才回去执行jquery。</p>
<p>同时CMD也是延自CommonJS Modules/2.0规范</p>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>提到CMD，就不得不提起CommonJS，CommonJS是服务端模块的规范，由于Node.js被广泛认知。</p>
<p>根据CommonJS规范，一个单独的文件就是一个模块。加载模块使用require方法，该方法读取一个文件并执行，最后返回文件内部的module.exports对象。</p>
<pre><code>//file1.js
moudle.exports = {
  a: 1
};

//file2.js
var f1 = require(&apos;./file1&apos;);
var v = f1.a + 2;
module.exports ={
  v: v
};
</code></pre><p>CommonJS 加载模块是同步的，所以只有加载完成才能执行后面的操作。像Node.js主要用于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，不用考虑异步加载的方式，所以CommonJS规范比较适用。但如果是浏览器环境，要从服务器加载模块，这是就必须采用异步模式。所以就有了 AMD  CMD 解决方案。</p>
<h2 id="UMD（Universal-Module-Definition-通用模块定义）"><a href="#UMD（Universal-Module-Definition-通用模块定义）" class="headerlink" title="UMD（Universal Module Definition - 通用模块定义）"></a>UMD（Universal Module Definition - 通用模块定义）</h2><p>UMD又是个什么玩意呢？UMD是AMD和CommonJS的一个糅合。AMD是浏览器优先，异步加载；CommonJS是服务器优先，同步加载。</p>
<p>既然要通用，怎么办呢？那就先判断是否支持node.js的模块，存在就使用node.js；再判断是否支持AMD（define是否存在），存在则使用AMD的方式加载。这就是所谓的UMD。</p>
<pre><code>((root, factory) =&gt; {
  if (typeof define === &apos;function&apos; &amp;&amp; define.amd) {
    //AMD
    define([&apos;jquery&apos;], factory);
  } else if (typeof exports === &apos;object&apos;) {
    //CommonJS
    var $ = requie(&apos;jquery&apos;);
    module.exports = factory($);
  } else {
    //都不是，浏览器全局定义
    root.testModule = factory(root.jQuery);
  }
})(this, ($) =&gt; {
  //do something...  这里是真正的函数体
});
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[那些容易出错的Dom操作]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E9%82%A3%E4%BA%9B%E5%AE%B9%E6%98%93%E5%87%BA%E9%94%99%E7%9A%84Dom%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>在用惯了 <code>jQuery</code> 这种利器之后，回到原生JS的Dom操作，一时间反而感觉有点陌生。</p>
<p>最近在做的项目中，为了尽可能少的引用三方库，所有DOM操作都是用的原生JS来实现的。在这里也分享下在DOM操作中，容易混淆的一些知识点。</p>
<p>原生JS可能会有兼容性问题，以下方法如非特别说明，均在 <code>Chrome latest(53), Firefox latest(47), Edge25, IE11</code> 中测试通过</p>
<h2 id="1、获取视口高度"><a href="#1、获取视口高度" class="headerlink" title="1、获取视口高度"></a>1、获取视口高度</h2><p>所谓视口高度，就是在浏览器中，我们可见区域的高度，它不会随着内容的变化而变化，只会跟着浏览器本身的大小变化而变化（工具栏高度也会影响浏览区域的大小）。</p>
<p>先来一段完整的测试代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'window.innerWidth:'</span>, <span class="built_in">window</span>.innerWidth, <span class="string">', window.innerHeight:'</span>, <span class="built_in">window</span>.innerHeight);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'document.documentElement.clientWidth:'</span>, <span class="built_in">document</span>.documentElement.clientWidth, <span class="string">', document.documentElement.clientHeight:'</span>, <span class="built_in">document</span>.documentElement.clientHeight);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'document.body.clientWidth:'</span>, <span class="built_in">document</span>.body.clientWidth, <span class="string">', document.body.clientHeight:'</span>, <span class="built_in">document</span>.body.clientHeight);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>打开不同的页面（是否有滚动条，页面内容大于视口高度），分析得知：</p>
<p><code>window.innerWidth</code> 和 <code>window.innerHeight</code> 是获取浏览器视口的宽高，包含滚动条。</p>
<p><code>document.documentElement.clientWidth</code> 和 <code>document.documentElement.clientHeight</code> 是获取浏览器视口的宽高，但不包含滚动条。</p>
<p><code>document.body.clientWidth</code> 和 <code>document.body.clientHeight</code> 是获取页面的宽高，不包含滚动条</p>
<p><strong>通过也根据结果得出：IE、FF、Chrome的滚动条宽度/高度为 <code>17px</code>， Edge25中滚动条宽度/高度为 <code>12px</code>。</strong></p>
<p>除此之外，还可以通过 <code>window.outerWidth</code> 和 <code>window.outerHeight</code> 获取浏览器的宽高，包含工具栏，标题栏等的宽高。</p>
<p><strong>结论：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> viewHeight = <span class="built_in">window</span>.innerHeight || <span class="built_in">document</span>.documentElement.clientHeight;</div><div class="line"><span class="keyword">let</span> viewWidth = <span class="built_in">window</span>.innerWidth || <span class="built_in">document</span>.documentElement.clientWidth;</div></pre></td></tr></table></figure>
<h2 id="2、获取iframe内容高度"><a href="#2、获取iframe内容高度" class="headerlink" title="2、获取iframe内容高度"></a>2、获取iframe内容高度</h2><p><code>iframe</code> 本身等价于一个独立的窗口, 所以要获取iframe内容的高度和获取页面内容高度一致。</p>
<p>在获取视口宽度时，我们知道，通过 <code>document.body.clientHeight</code> 可以获取 <code>body</code> 的高度，那么还有其他的方式可以获取么？</p>
<p>还是先上一个测试代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timerId;</div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.clearTimeout(timerId);</div><div class="line">  timerId = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'document.documentElement.clientHeight:'</span>, <span class="built_in">document</span>.documentElement.clientHeight);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'document.documentElement.offsetHeight:'</span>, <span class="built_in">document</span>.documentElement.offsetHeight);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'document.documentElement.scrollHeight:'</span>, <span class="built_in">document</span>.documentElement.scrollHeight);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'document.body.clientHeight:'</span>, <span class="built_in">document</span>.body.clientHeight);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'document.body.offsetHeight:'</span>, <span class="built_in">document</span>.body.offsetHeight);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'document.body.scrollHeight:'</span>, <span class="built_in">document</span>.body.scrollHeight);</div><div class="line">  &#125;, <span class="number">200</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这个测试的结果如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Chrome</span></div><div class="line">documentElement.offsetHeight = documentElement.scrollHeight = body.scrollHeight</div><div class="line">body.offsetHeight = body.clientHeight</div><div class="line">documentElement.offsetHeight &gt; body.offsetHeight (大<span class="number">24</span>px)</div><div class="line"></div><div class="line"><span class="comment">// Firefox</span></div><div class="line">documentElement.offsetHeight = documentElement.scrollHeight</div><div class="line">body.scrollHeight = body.offsetHeight = body.clientHeight</div><div class="line">documentElement.offsetHeight &gt; body.offsetHeight (大<span class="number">24</span>px)</div><div class="line"></div><div class="line"><span class="comment">// Edge25</span></div><div class="line">documentElement.offsetHeight = body.scrollHeight &gt; documentElement.scrollHeight (大<span class="number">1</span>px)</div><div class="line">body.clientHeight = body.offsetHeight</div><div class="line">documentElement.offsetHeight &gt; body.clientHeight (大<span class="number">24</span>px)</div><div class="line"></div><div class="line"><span class="comment">// IE11</span></div><div class="line">documentElement.offsetHeight = documentElement.scrollHeight</div><div class="line">body.scrollHeight = body.offsetHeight = body.clientHeight</div><div class="line">documentElement.offsetHeight &gt; body.offsetHeight (大<span class="number">24</span>px)</div></pre></td></tr></table></figure>
<p>根据以上结果，暂时还无法得出结论，所以我们接着测试：</p>
<p><strong>测试一：设置body的margin:0</strong></p>
<p>以上四个都有大24px，先来分析下这个是怎么来的。</p>
<p>初步分析是由于 <code>body</code> 默认的 <code>margin: 8px</code> 导致的，当设置body的 <code>margin: 0</code> 之后，这个差距变成了 <code>16px</code>。</p>
<p><strong>Edge25比较特殊，相关数据变成了：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">documentElement.offsetHeight = documentElement.scrollHeight &lt; body.scrollHeight （小<span class="number">1</span>px）</div><div class="line">body.clientHeight = body.offsetHeight</div><div class="line">documentElement.offsetHeight &gt; body.clientHeight (大<span class="number">16</span>px)</div></pre></td></tr></table></figure>
<p><strong>测试二：给body设置固定高度</strong></p>
<p>此时，我们给body设定一个固定高度，得出以下结果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">documentElement.offsetHeight = body.clientHeight = body.offsetHeight = 我们设定的高度</div></pre></td></tr></table></figure>
<p><strong>测试三：增加超高的 absolute 元素</strong></p>
<p>当absolute元素高度不超过整个页面高度时，无影响。</p>
<p>当absolute元素高度超过整个页面高度时，结果如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Chrome</span></div><div class="line">body.scrollHeight = 设定的absolute元素高度</div><div class="line"></div><div class="line"><span class="comment">// Firefox, IE11</span></div><div class="line">documentElement.scrollHeight = 设定的absolute元素高度</div><div class="line"></div><div class="line"><span class="comment">// Edge25</span></div><div class="line">documentElement.scrollHeight = body.scrollHeight = 设定的absolute元素高度</div></pre></td></tr></table></figure>
<p>综合以上测试，在这里得出一个获取页面高度的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> pageHeight = <span class="built_in">Math</span>.max(documentElement.scrollHeight, body.scrollHeight);</div></pre></td></tr></table></figure>
<p><strong>注意，以上方案并不具有通用性，还需根据自己的场景来灵活选择。</strong></p>
<h2 id="3、URL编码"><a href="#3、URL编码" class="headerlink" title="3、URL编码"></a>3、URL编码</h2><p>我们在浏览器中进行URL编码一般有两个方法，<code>encodeURI</code> 和 <code>encodeURIComponent</code>，那它们之间有啥区别呢？</p>
<p>不多说，先来段代码就知道了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> str = <span class="string">'_- key fda'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURI</span>(str)); <span class="comment">//_-%20key%20fda</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURIComponent</span>(str)); <span class="comment">//_-%20key%20fda</span></div><div class="line"></div><div class="line">str = <span class="string">'https://www.google.com/search?q=Path+must+be+a+string.+Received+null&amp;oq=Path'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURI</span>(str)); <span class="comment">//https://www.google.com/search?q=Path+must+be+a+string.+Received+null&amp;oq=Path</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURIComponent</span>(str)); <span class="comment">//https%3A%2F%2Fwww.google.com%2Fsearch%3Fq%3DPath%2Bmust%2Bbe%2Ba%2Bstring.%2BReceived%2Bnull%26oq%3DPath</span></div></pre></td></tr></table></figure>
<p>由此可以看出，当str是简单的非url字符串时，两者并没有差异。但当我们要对一个完整的URL进行编码的时候，就需要使用 <code>encodeURIComponent</code> 。</p>
<h2 id="4、新Tab打开链接实现"><a href="#4、新Tab打开链接实现" class="headerlink" title="4、新Tab打开链接实现"></a>4、新Tab打开链接实现</h2><p>一般做法是模拟一个 <code>a</code> 标签，然后打开，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line">a.setAttribute(<span class="string">'href'</span>, url);</div><div class="line">a.setAttribute(<span class="string">'target'</span>, <span class="string">'_blank'</span>);</div><div class="line"><span class="comment">// 以下两行为兼容IE9而实现，IE9要求必须在body中的a才可以跳转</span></div><div class="line">a.style.display = <span class="string">'none'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(a);</div><div class="line"></div><div class="line">a.click();</div><div class="line"><span class="built_in">document</span>.body.removeChild(a);</div></pre></td></tr></table></figure>
<h2 id="5、设置iframe内容"><a href="#5、设置iframe内容" class="headerlink" title="5、设置iframe内容"></a>5、设置iframe内容</h2><p>如果设置局部内容，直接获取 <code>contentDocument</code> 就可以做到，那如果要填充一个完整的HTML文档，该如何做呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 找到document</span></div><div class="line"><span class="keyword">let</span> fd = <span class="built_in">document</span>.getElementById(<span class="string">'previewFrame'</span>).contentDocument;</div><div class="line">fd.open(); <span class="comment">// 打开输入流</span></div><div class="line">fd.write(<span class="string">''</span>);</div><div class="line">fd.write(fullHtml); <span class="comment">// 写入完整的HTML内容</span></div><div class="line">fd.close(); <span class="comment">// 关闭输入流</span></div></pre></td></tr></table></figure>
<h2 id="6、获取滚动高度"><a href="#6、获取滚动高度" class="headerlink" title="6、获取滚动高度"></a>6、获取滚动高度</h2><p>老规矩，先来段测试代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timerId;</div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">window</span>.clearTimeout(timerId);</div><div class="line">  timerId = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'document.documentElement.scrollTop:'</span>, <span class="built_in">document</span>.documentElement.scrollTop);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'document.body.scrollTop:'</span>, <span class="built_in">document</span>.body.scrollTop);</div><div class="line">  &#125;, <span class="number">200</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>通过在浏览器中测试，得到以下结果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Chrome and Edge</span></div><div class="line">documentElement.scrollTop 始终等于 <span class="number">0</span></div><div class="line"><span class="built_in">document</span>.body.scrollTop 是真实的滚动高度</div><div class="line"></div><div class="line"><span class="comment">// Firefox and IE11</span></div><div class="line">documentElement.scrollTop 是真实的滚动高度</div><div class="line"><span class="built_in">document</span>.body.scrollTop 始终为<span class="number">0</span></div></pre></td></tr></table></figure>
<p>因此当我们要计算滚动高度的时候，可以采用如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</div></pre></td></tr></table></figure>
<h2 id="7、获取屏幕大小"><a href="#7、获取屏幕大小" class="headerlink" title="7、获取屏幕大小"></a>7、获取屏幕大小</h2><p>这个就比较简单了，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 屏幕宽度</span></div><div class="line">screen.width</div><div class="line"></div><div class="line"><span class="comment">// 屏幕高度 </span></div><div class="line">screen.height</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[利用Karma、Mocha搭建测试环境]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3/%E5%88%A9%E7%94%A8Karma%E3%80%81Mocha%E6%90%AD%E5%BB%BA%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[使用chai-http实现API测试]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3/%E4%BD%BF%E7%94%A8chai-http%E5%AE%9E%E7%8E%B0API%E6%B5%8B%E8%AF%95/</url>
      <content type="html"><![CDATA[<h1 id="0x1、导言"><a href="#0x1、导言" class="headerlink" title="0x1、导言"></a>0x1、导言</h1><p>一个前后端分离的完整的项目中，一般少不了 <code>API TEST</code>，那我们如何来做API相关的测试呢？</p>
<p>我们可以使用客户端工具（如PostMan），来进行模拟请求，还可以写一个小程序来请求待测试的API。</p>
<p>既然也算是测试，为什么我们不直接和一般的 <code>unit test</code> 使用同样的工具呢？</p>
<p>在我们使用 <code>mocha</code> 测试工具函数的同时，我们也可以结合 <code>chai-http</code> 来实现API的测试。</p>
<h1 id="0x2、关于-chai-http"><a href="#0x2、关于-chai-http" class="headerlink" title="0x2、关于 chai-http"></a>0x2、关于 <code>chai-http</code></h1><p><code>chai-http</code> 官方定义是：一个HTTP响应的断言库，是 <code>Chai</code> 断言库的一个补充。（原文：HTTP Response assertions for the Chai Assertion Library. ）</p>
<p>使用它，我们可以模拟发起HTTP请求，然后使用断言语法来判断响应是否满足需求。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">chai.request(<span class="string">'rootpath'</span>)</div><div class="line">  .put(<span class="string">'/user/me'</span>)</div><div class="line">  .send(&#123; <span class="attr">password</span>: <span class="string">'123'</span>, <span class="attr">confirmPassword</span>: <span class="string">'123'</span> &#125;)</div><div class="line">  .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</div><div class="line">     expect(err).to.be.null;</div><div class="line">     expect(res).to.have.status(<span class="number">200</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h1 id="0x3、API测试演示"><a href="#0x3、API测试演示" class="headerlink" title="0x3、API测试演示"></a>0x3、API测试演示</h1>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[利用Nightwatch.js实现e2e测试]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3/%E5%88%A9%E7%94%A8Nightwatch.js%E5%AE%9E%E7%8E%B0e2e%E6%B5%8B%E8%AF%95/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[MOCHA测试代码汇总]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3/MOCHA%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<h1 id="0x0、导言"><a href="#0x0、导言" class="headerlink" title="0x0、导言"></a>0x0、导言</h1><p>Mocha是应用最广泛的JS测试框架，但是现在，它的维护者公开说，Mocha快死了，<a href="https://twitter.com/b0neskull/status/820848476393091072" target="_blank" rel="external">原文Twitter地址</a>。</p>
<p>死不死的理我们太远，我们先来回味一波。。。</p>
<h1 id="0x1、关于单元测试"><a href="#0x1、关于单元测试" class="headerlink" title="0x1、关于单元测试"></a>0x1、关于单元测试</h1><p><em>什么是单元测试？</em></p>
<p><strong>维基百科：</strong> 单元测试（英语：Unit Testing）又称为模块测试, 是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作</p>
<p><strong>个人理解：</strong> 编写测试代码/脚本，通过执行测试代码来保证某一功能（一般是方法）的结果可预期。</p>
<p><em>如何做单元测试？</em></p>
<p>抛开 <code>mocha</code>, 我们应该怎么做单元测试呢？</p>
<p>我们会考虑书写一段代码或者脚本，来调用我们写好的方法，通过 <code>Console</code> 输出来查看最终结果。</p>
<p>使用单元测试，能够有效的保证代码的正确性，并且有利于我们之后的大胆重构。必须有用例保证，就不怕改出大量新bug。</p>
<p>当然，这仅仅是最原始的测试方式，一般情况下，我们会选择使用单元测试工具。</p>
<h1 id="0x2、Mocha"><a href="#0x2、Mocha" class="headerlink" title="0x2、Mocha"></a>0x2、Mocha</h1><p><code>Mocha(摩卡)</code> 是一个多功能的，支持浏览器和 Node 的 JavaScript 测试工具。仅仅是测试工具，当然还不能满足我们的需要，我们一般还会结合一些插件来进行使用，如下：</p>
<ol>
<li>chai BDD/TDD风格的断言库</li>
<li>chai-http Http请求包</li>
</ol>
<p><em>如何用 <code>Mocha</code> 来做单元测试呢？</em></p>
<p>首先是引入断言库，然后定义测试块，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</div><div class="line"></div><div class="line">describe(<span class="string">'Test object exist'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'first test'</span>, () =&gt; &#123;</div><div class="line">    assert.equal(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'实际值和期望值不一致'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><em>多种风格断言演示</em></p>
<p>测试本身比较容易理解，就我来说，我比较容易忘记断言库的写法，接下来就以 <code>chai</code> 为例，体验下几种方式的断言代码：</p>
<p>第一步，我们要先引入断言库，允许多种风格的断言：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</div><div class="line"><span class="keyword">const</span> assert = chai.assert; <span class="comment">// TDD</span></div><div class="line"><span class="keyword">const</span> expect = chai.expect; <span class="comment">// BDD</span></div><div class="line">chai.should(); <span class="comment">// BDD</span></div></pre></td></tr></table></figure>
<p>接着，我们来一一演示断言的使用：</p>
<ol>
<li>判断类型</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</div><div class="line"><span class="keyword">const</span> assert = chai.assert; <span class="comment">// TDD</span></div><div class="line"><span class="keyword">const</span> expect = chai.expect; <span class="comment">// BDD</span></div><div class="line">chai.should(); <span class="comment">// BDD</span></div><div class="line"></div><div class="line">describe(<span class="string">'Test object exist'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'object is exist'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="string">'abc'</span>;</div><div class="line">    <span class="keyword">let</span> b = <span class="number">1</span>;</div><div class="line">    <span class="keyword">let</span> c = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">let</span> d = <span class="regexp">/xxx/</span>;</div><div class="line">    <span class="keyword">let</span> e = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    <span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</div><div class="line">    <span class="keyword">let</span> g = &#123;&#125;;</div><div class="line">    <span class="keyword">let</span> h = [];</div><div class="line">    assert.isString(a); <span class="comment">// a必须是字符串</span></div><div class="line">    assert.isNotString(f); <span class="comment">// f必须不是字符串</span></div><div class="line">    expect(b).to.be.a(<span class="string">'number'</span>); <span class="comment">// b必须是一个数字</span></div><div class="line">    expect(c).to.be.a(<span class="string">'boolean'</span>); <span class="comment">// c必须是boolean</span></div><div class="line">    d.should.be.a(<span class="string">'RegExp'</span>); <span class="comment">// d必须是正则</span></div><div class="line">    e.should.be.a(<span class="string">'date'</span>); <span class="comment">// e必须是Date</span></div><div class="line">    assert.isArray(h); <span class="comment">// h必须是Array</span></div><div class="line">    assert.isObject(g); <span class="comment">// g必须是对象</span></div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>判断属性存在与否/属性值是否满足预期</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</div><div class="line"><span class="keyword">const</span> assert = chai.assert; <span class="comment">// TDD</span></div><div class="line"><span class="keyword">const</span> expect = chai.expect; <span class="comment">// BDD</span></div><div class="line">chai.should(); <span class="comment">// BDD</span></div><div class="line"></div><div class="line">describe(<span class="string">'Test Property'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'property and value'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> a = &#123;</div><div class="line">      <span class="attr">b</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">c</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">deep</span>: &#123;</div><div class="line">        <span class="attr">test</span>: <span class="string">'1'</span></div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 对象a必须包含属性b</span></div><div class="line">    assert.property(a, <span class="string">'b'</span>);</div><div class="line">    expect(a).has.property(<span class="string">'b'</span>);</div><div class="line">    a.should.has.property(<span class="string">'b'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 对象a不能包含属性d</span></div><div class="line">    assert.notProperty(a, <span class="string">'d'</span>);</div><div class="line">    expect(a).not.has.property(<span class="string">'d'</span>);</div><div class="line">    a.should.not.has.property(<span class="string">'d'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 对象必须有嵌套属性deep.test</span></div><div class="line">    assert.deepProperty(a, <span class="string">'deep.test'</span>);</div><div class="line">    expect(a).has.deep.property(<span class="string">'deep.test'</span>);</div><div class="line">    expect(a).has.property(<span class="string">'deep'</span>).has.property(<span class="string">'test'</span>);</div><div class="line">    a.should.has.deep.property(<span class="string">'deep.test'</span>);</div><div class="line">    a.should.has.property(<span class="string">'deep'</span>).has.property(<span class="string">'test'</span>); </div><div class="line"></div><div class="line">    <span class="comment">// 对象必须不包含嵌套属性deep.test2</span></div><div class="line">    assert.notDeepProperty(a, <span class="string">'deep.test2'</span>);</div><div class="line">    expect(a).not.has.deep.property(<span class="string">'deep.test2'</span>);</div><div class="line">    a.should.not.has.deep.property(<span class="string">'deep.test2'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 对象属性值必须等于指定值，注意，是===判断</span></div><div class="line">    assert.propertyVal(a, <span class="string">'b'</span>, <span class="number">1</span>);</div><div class="line">    expect(a).has.property(<span class="string">'b'</span>, <span class="number">1</span>);</div><div class="line">    a.should.has.property(<span class="string">'b'</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 对象属性值必须不等于指定值</span></div><div class="line">    assert.propertyNotVal(a, <span class="string">'c'</span>, <span class="literal">true</span>);</div><div class="line">    expect(a).not.has.property(<span class="string">'c'</span>, <span class="number">0</span>);</div><div class="line">    a.should.not.has.property(<span class="string">'c'</span>, <span class="literal">undefined</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 对象必须包含多个指定的属性</span></div><div class="line">    assert.property(a, <span class="string">'b'</span>).property(<span class="string">'c'</span>).property(<span class="string">'deep.test2'</span>)</div><div class="line">    expect(a).has.property(<span class="string">'a'</span>).has.property(<span class="string">'c'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>比较目标值与期望值</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</div><div class="line"><span class="keyword">const</span> assert = chai.assert; <span class="comment">// TDD</span></div><div class="line"><span class="keyword">const</span> expect = chai.expect; <span class="comment">// BDD</span></div><div class="line">chai.should(); <span class="comment">// BDD</span></div><div class="line"></div><div class="line">describe(<span class="string">'Test Value'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'value equal or not equal'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="string">'abc'</span>;</div><div class="line">    <span class="keyword">let</span> b = [<span class="number">1</span>, <span class="string">'2'</span>, <span class="literal">false</span>];</div><div class="line">    <span class="keyword">let</span> c = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 直接比较</span></div><div class="line">    assert.equal(<span class="string">'abc'</span>, a);</div><div class="line">    expect(a).eql(<span class="string">'abc'</span>);</div><div class="line">    a.should.eq(<span class="string">'abc'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">let</span> cCopy = <span class="built_in">Object</span>.assign(&#123;&#125;, c);</div><div class="line"></div><div class="line">    assert.deepEqual(cCopy, c);</div><div class="line">    expect(cCopy).deep.equal(c);</div><div class="line">    cCopy.should.be.deep.equal(c);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'test multi equal function'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> c = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">'str'</span> &#125; &#125;;</div><div class="line">    <span class="keyword">let</span> cCopy = <span class="built_in">Object</span>.assign(&#123;&#125;, c);</div><div class="line"></div><div class="line">    cCopy.should.be.eql(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">'str'</span> &#125; &#125;); <span class="comment">// 内容相等即可，不判断引用（别名：eqls, deep.equal, deep.eq, deep.equals）</span></div><div class="line">    cCopy.should.be.equal(a = cCopy); <span class="comment">// 严格完全相等， === 判断（别名：eq, equals）</span></div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>目标是否存在</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</div><div class="line"><span class="keyword">const</span> assert = chai.assert; <span class="comment">// TDD</span></div><div class="line"><span class="keyword">const</span> expect = chai.expect; <span class="comment">// BDD</span></div><div class="line"><span class="keyword">const</span> should = chai.should(); <span class="comment">// BDD</span></div><div class="line"></div><div class="line">describe(<span class="string">'Test Value'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'value exist'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="string">'hi'</span>;</div><div class="line">    <span class="keyword">let</span> b = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">let</span> c;</div><div class="line"></div><div class="line">    <span class="comment">// 对象存在</span></div><div class="line">    assert.isOk(a);</div><div class="line">    expect(a).to.be.exist;</div><div class="line">    a.should.to.be.exist;</div><div class="line"></div><div class="line">    <span class="comment">// 对象不存在</span></div><div class="line">    assert.isNotOk(b);</div><div class="line">    assert.isNotOk(c);</div><div class="line">    expect(b).to.be.not.exist;</div><div class="line">    expect(c).to.be.not.exist;</div><div class="line">    should.not.exist(b);</div><div class="line">    should.not.exist(c);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>判断数组长度</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</div><div class="line"><span class="keyword">const</span> assert = chai.assert; <span class="comment">// TDD</span></div><div class="line"><span class="keyword">const</span> expect = chai.expect; <span class="comment">// BDD</span></div><div class="line"><span class="keyword">const</span> should = chai.should(); <span class="comment">// BDD</span></div><div class="line"></div><div class="line">describe(<span class="string">'Test Length'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'array length'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line">    <span class="comment">// 判断数组长度</span></div><div class="line">    assert.lengthOf(arr, <span class="number">3</span>);</div><div class="line">    expect(arr).length(<span class="number">3</span>);</div><div class="line">    arr.should.length(<span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 小于4</span></div><div class="line">    expect(arr).length.below(<span class="number">4</span>);</div><div class="line">    expect(arr).length.lessThan(<span class="number">4</span>);</div><div class="line">    arr.should.length.below(<span class="number">4</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 大于2</span></div><div class="line">    expect(arr).length.above(<span class="number">2</span>);</div><div class="line">    arr.should.length.above(<span class="number">2</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>空判断</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> chai = <span class="built_in">require</span>(<span class="string">'chai'</span>);</div><div class="line"><span class="keyword">const</span> assert = chai.assert; <span class="comment">// TDD</span></div><div class="line"><span class="keyword">const</span> expect = chai.expect; <span class="comment">// BDD</span></div><div class="line"><span class="keyword">const</span> should = chai.should(); <span class="comment">// BDD</span></div><div class="line"></div><div class="line">describe(<span class="string">'Test Empty'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'array|string|object empty'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> arr = [];</div><div class="line">    <span class="keyword">let</span> a = <span class="string">''</span>;</div><div class="line">    <span class="keyword">let</span> b = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 判断数组为空</span></div><div class="line">    assert.isTrue(arr.length === <span class="number">0</span>); <span class="comment">// assert没有直接空判断，需要转换一下思路</span></div><div class="line">    expect(arr).empty;</div><div class="line">    arr.should.empty;</div><div class="line">    <span class="comment">// 其他类型判断（注意：null和undefined不能用此方式判断）</span></div><div class="line">    expect(a).empty;</div><div class="line">    b.should.be.empty;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>注意：还有其他较多的用法，如果理解了上面的这几种，按照同样的思路，结合api就基本能使用其他的模式了。一般情况下，以上的几种断言也足够我们使用了。</strong></p>
<p><strong>注意2：更多断言，请参考： <a href="http://chaijs.com/api/" target="_blank" rel="external">chai断言API</a></strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始H5（二）：HTML5新技术点]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BH5/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BH5%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AHTML5%E6%96%B0%E6%8A%80%E6%9C%AF%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>现在，将我们的页面升级到HTML5了。为什么要这样去做呢？通过简单的升级我们没看到任何大的变化。</p>
<p>答案即将揭晓，<strong>升级到HTML5之后，我们可以使用如下技术：</strong></p>
<h3 id="1、不再需要插件，就有对音频-视频的内置支持，可以充分利用"><a href="#1、不再需要插件，就有对音频-视频的内置支持，可以充分利用" class="headerlink" title="1、不再需要插件，就有对音频\视频的内置支持，可以充分利用"></a>1、不再需要插件，就有对音频\视频的内置支持，可以充分利用</h3><p>HTML5新增了&lt;audio&gt;和&lt;video&gt;标签，可以让我们操作音视频。</p>
<h3 id="2、更有描述性的标记"><a href="#2、更有描述性的标记" class="headerlink" title="2、更有描述性的标记"></a>2、更有描述性的标记</h3><p>针对Web语义化，HTML5新增了许多带有特定语义的标签，如header、footer、section、article、dialog、summary等等。</p>
<h3 id="3、富客户端支持，可以使用画布、转换和JavaScript创建炫酷的界面和动画"><a href="#3、富客户端支持，可以使用画布、转换和JavaScript创建炫酷的界面和动画" class="headerlink" title="3、富客户端支持，可以使用画布、转换和JavaScript创建炫酷的界面和动画"></a>3、富客户端支持，可以使用画布、转换和JavaScript创建炫酷的界面和动画</h3><p>使用画布（canvas）和JavaScript，我们可以直接在Web页面上画图像、线条等，同时对开发Web游戏也是更加友好的。</p>
<h3 id="4、新增客户端存储和缓存功能"><a href="#4、新增客户端存储和缓存功能" class="headerlink" title="4、新增客户端存储和缓存功能"></a>4、新增客户端存储和缓存功能</h3><p>使用Application-Cache，我们可以让我们的网页离线浏览，同时可以采用localStorage和sessionStorage来存储数据。</p>
<h3 id="5、新增Web工作线程，让JavaScript更高效"><a href="#5、新增Web工作线程，让JavaScript更高效" class="headerlink" title="5、新增Web工作线程，让JavaScript更高效"></a>5、新增Web工作线程，让JavaScript更高效</h3><p>可以让耗时的JS，在后台工作，让UI的响应更快，提高用户体验。</p>
<h3 id="6、可以结合CSS3的新内容，如高级选择器、动画、阴影"><a href="#6、可以结合CSS3的新内容，如高级选择器、动画、阴影" class="headerlink" title="6、可以结合CSS3的新内容，如高级选择器、动画、阴影"></a>6、可以结合CSS3的新内容，如高级选择器、动画、阴影</h3><p>可以让元素运行动画，也可以让元素具有圆角边框，甚至阴影。也能通过简单的代码快速选择对象。</p>
<h3 id="7、新增位置API（移动设备）"><a href="#7、新增位置API（移动设备）" class="headerlink" title="7、新增位置API（移动设备）"></a>7、新增位置API（移动设备）</h3><p>通过该API，页面能够知道访问者的地理位置，这在移动设备访问中，尤其重要。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[从零开始H5（一）：升级你的HTML到HTML5]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BH5/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BH5%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%8D%87%E7%BA%A7%E4%BD%A0%E7%9A%84HTML%E5%88%B0HTML5/</url>
      <content type="html"><![CDATA[<h2 id="现有的网页大部分还是基于HTML4开发的，那么如何简单的升级到HTML5呢？"><a href="#现有的网页大部分还是基于HTML4开发的，那么如何简单的升级到HTML5呢？" class="headerlink" title="现有的网页大部分还是基于HTML4开发的，那么如何简单的升级到HTML5呢？"></a>现有的网页大部分还是基于HTML4开发的，那么如何简单的升级到HTML5呢？</h2><h3 id="1、从doctype定义开始"><a href="#1、从doctype定义开始" class="headerlink" title="1、从doctype定义开始"></a>1、从doctype定义开始</h3><p>HTML4：</p>
<pre><code>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; 
&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
</code></pre><p>HTML5：</p>
<pre><code>&lt;!doctype html&gt;
</code></pre><p><strong>注意：这不仅仅是HTML5的doctype，这也是HTML将来所有版本的doctype。不仅如此，它甚至在老版本的浏览器中也能正常工作。</strong></p>
<h3 id="2、简化meta"><a href="#2、简化meta" class="headerlink" title="2、简化meta"></a>2、简化meta</h3><p>HTML4：</p>
<pre><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
</code></pre><p>HTML5：</p>
<pre><code>&lt;meta charset=&quot;utf-8&quot; /&gt;
</code></pre><h3 id="3、简化link标记"><a href="#3、简化link标记" class="headerlink" title="3、简化link标记"></a>3、简化link标记</h3><p>HTML4：</p>
<pre><code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;index.css&quot; /&gt;
</code></pre><p>HTML5：</p>
<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot; /&gt;
</code></pre><p><strong>注意：升级到HTML5后，使用link不在需要指定type了，因为已经宣布CSS作为HTML5的标准样式，这也是HTML5的默认样式。</strong></p>
<h3 id="4、简化script标记"><a href="#4、简化script标记" class="headerlink" title="4、简化script标记"></a>4、简化script标记</h3><p>HTML4：</p>
<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;index.js&quot;&gt;&lt;/script&gt;
</code></pre><p>HTML5：</p>
<pre><code>&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    console.log(&apos;html5&apos;);
&lt;/sscript&gt;
</code></pre><p><strong>注意：对于HTML5，JavaScript已经成为标准，所以不在需要指定type了，同时，对于script标签，结尾标记不能简写。</strong></p>
<h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q/A"></a>Q/A</h2><h3 id="1、为什么做了这些改变，在老式浏览器上也能用？"><a href="#1、为什么做了这些改变，在老式浏览器上也能用？" class="headerlink" title="1、为什么做了这些改变，在老式浏览器上也能用？"></a>1、为什么做了这些改变，在老式浏览器上也能用？</h3><p>拿link和script来说，浏览器早已假定默认使用CSS和JavaScript，所以和标准一致。包括doctype和meta也是一样。</p>
<h3 id="2、doctype以后也不会在变了，合适吗？"><a href="#2、doctype以后也不会在变了，合适吗？" class="headerlink" title="2、doctype以后也不会在变了，合适吗？"></a>2、doctype以后也不会在变了，合适吗？</h3><p>doctype的使用主要在于告诉浏览器采用它们的”标准模式”表现内容，所以不管以后HTML6或者其他，&lt;!doctype html&gt;已经足够表达意思了。</p>
<h3 id="3、XHTML怎么了？很多年前听说它是未来的发展方向？"><a href="#3、XHTML怎么了？很多年前听说它是未来的发展方向？" class="headerlink" title="3、XHTML怎么了？很多年前听说它是未来的发展方向？"></a>3、XHTML怎么了？很多年前听说它是未来的发展方向？</h3><p>它夭折了。因为灵活性超过了严格语法。当然，如果你喜欢XML，那么还可以用严格模式编写HTML5。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JSONP详解]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/JSONP%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="0、关于JSONP"><a href="#0、关于JSONP" class="headerlink" title="0、关于JSONP"></a>0、关于JSONP</h2><h3 id="什么的JSONP"><a href="#什么的JSONP" class="headerlink" title="什么的JSONP"></a>什么的JSONP</h3><p>JSONP（JSON with Padding）是资料格式 JSON 的一种“使用模式”，可以让网页从别的网域要资料。另一个解决这个问题的新方法是跨来源资源共享。（参考：<a href="https://zh.wikipedia.org/wiki/JSONP" target="_blank" rel="external">https://zh.wikipedia.org/wiki/JSONP</a>）</p>
<h3 id="JSONP的起源"><a href="#JSONP的起源" class="headerlink" title="JSONP的起源"></a>JSONP的起源</h3><ol>
<li>曾经的Ajax不能跨域请求（现在的也不能，不过有cors）</li>
<li>Web上使用script调用js文件不存在跨域问题（实际上，只要拥有src属性的标签都允许跨域，比如script,img,iframe）</li>
<li>那个时候，想要通过web端跨域访问数据，只可以在服务器端设法把数据装进js，然后客户端调用</li>
<li>刚好这个时候JSON大行其道</li>
<li>所以，解决方案就出来，web端像调用脚本一样来跨域请求服务器上动态生成的js文件</li>
<li>为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP。</li>
</ol>
<h3 id="JSONP用来做什么"><a href="#JSONP用来做什么" class="headerlink" title="JSONP用来做什么"></a>JSONP用来做什么</h3><p>通过JSONP的起源，我们大概也知道了JSONP就是为了跨域资源访问的。</p>
<h2 id="1、JSONP实现原理"><a href="#1、JSONP实现原理" class="headerlink" title="1、JSONP实现原理"></a>1、JSONP实现原理</h2><p>我们知道，在script标签中请求的js代码，到客户端之后，是能被自动执行的。</p>
<p>我们先构造一个后端（采用node实现）：</p>
<pre><code>var http = require(&apos;http&apos;);

var server = http.createServer((req, res) =&gt; {
  var sendObj = {
    url: req.url,
    name: &apos;test&apos;
  };
  res.write(`callback(${JSON.stringify(sendObj)})`);
  res.end();
});

server.listen(9999, () =&gt; {
  console.log(&apos;started.&apos;)
});
</code></pre><p>我们要使用这个这个数据呢？可以用Ajax，可能会产生跨域问题</p>
<p>另外，可以用如下写法：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;JSONP TEST&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;script&gt;
  function callback(obj){
    console.log(obj);
  }
  &lt;/script&gt;
  &lt;script src=&quot;http://localhost:9999/abc&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>打开这个页面后，我们会看到控制台会输出一个对象<code>Object {url: &quot;/abc&quot;, name: &quot;test&quot;}</code>,<br>也就是后端返回的对象。</p>
<p><strong>当使用script请求地址时，会将返回的字符串，默认当成js解析。由于后端返回是的callback(xxx),所以会调用本地的callback函数。</strong></p>
<p><strong>从原理上来看，要使用JSONP，必须要后端返回相应的数据，这个就是JSONP的模式了，允许客户端传递一个callback函数，后端将数据包裹在callback函数中返回。</strong></p>
<p><strong>从原理也能看出，JSONP并不要求必须传递JSON格式的数据，只要是JS函数能够认可的数据都是可以传递的</strong></p>
<h2 id="2、封装JSONP调用JSONP"><a href="#2、封装JSONP调用JSONP" class="headerlink" title="2、封装JSONP调用JSONP"></a>2、封装JSONP调用JSONP</h2><p>知道了原理，我们很容易能够实现一个jsonp的函数调用，代码如下：</p>
<pre><code>window.JSONP = function(url, callback){
  callback = callback || &apos;callback&apos;;
  var result;
  return new Promise((resolve, reject) =&gt; {
    var overwritten;
    var scriptEl = document.createElement(&apos;script&apos;);
    scriptEl.src = url + &apos;?callback=&apos; + callback;
    //加载完成后，删除callback
    scriptEl.onload = function(){
      if(overwritten === undefined){
        delete window[callback];  
      }else{
        window[callback] = overwritten;
      }
      resolve(result);
    }
    //挂载一个callback到window上
    overwritten = window[callback]; //先保存一个，用完之后再还原
    window[callback] = function(data){
      result = data
    }
    document.head.appendChild(scriptEl);
  });
};
</code></pre><p>如何用？</p>
<pre><code>window.JSONP(&apos;http://localhost:9999/abc&apos;).then((data) =&gt; {
  console.log(data);
});
</code></pre><h2 id="3、扩展"><a href="#3、扩展" class="headerlink" title="3、扩展"></a>3、扩展</h2><p>在jQuery中，我们使用jsonp感觉就和使用ajax没有区别，但实际上它们的底层实现实现是完全不一样的，毕竟原理都不同。</p>
<p>虽然很多库和框架都把jsonp封装到了ajax中，但是一定要记得jsonp不是ajax的一个特例。</p>
<p>当前，除了用jsonp跨域之外，还可以采用服务端代理（通过不跨域的后端程序，发送webClient去请求数据，然后转发），CORS（API服务器允许跨域的一种设置）。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CORS详解]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/CORS%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="0、关于CORS"><a href="#0、关于CORS" class="headerlink" title="0、关于CORS"></a>0、关于CORS</h2><p>说到CORS，就不得不先了解跨站HTTP请求（Cross-site HTTP request）。</p>
<p>跨域HTTP请求是指发起请求的资源所在域不同于该请求所指向资源所在的域的HTTP请求。</p>
<p>正如大家所知，出于安全考虑，浏览器会限制脚本中发起的跨站请求。使用XMLHttpRequest发起HTTP请求必须遵守同源策略。 具体而言，Web 应用程序能且只能使用 XMLHttpRequest 对象向其加载的源域名发起 HTTP 请求，而不能向任何其它域名发起请求。</p>
<p>由于Web应用技术越来越丰富，我们非常渴望在不丢失安全的前提下，能够实现跨站请求。特别是现在的Web程序结构，一般是HTML+REST API。在之前的实现中，我们一般采用jsonp来发起跨站请求，这其实是利用了html标签的特点。</p>
<p>W3C的Web应用工作组推荐了一种新的机制，即跨域资源共享（Cross-Origin Resource Sharing），也就是当前我们提到的CORS。 </p>
<p>CORS的核心，就是让服务器来确定是否允许跨域访问。</p>
<h2 id="1、典型场景"><a href="#1、典型场景" class="headerlink" title="1、典型场景"></a>1、典型场景</h2><h3 id="1-1、简单请求"><a href="#1-1、简单请求" class="headerlink" title="1.1、简单请求"></a>1.1、简单请求</h3><p>什么是简单请求？全部满足以下条件的请求可以称之为简单请求：</p>
<ol>
<li>只使用GET、HEAD或者POST请求方法。如果是POST，则数据类型（Content-Type）只能是<code>application/x-www-form-urlencodeed</code>、<code>multipart/form-data</code>、<code>text/plain</code>中的一种。</li>
<li>没有使用自定义的请求头（如x-token）</li>
</ol>
<p>按照这个规则，那我们的能实现跨域请求的情况如下：</p>
<p>Server代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">//之后设置了Access-Control-Allow-Origin，才会允许跨域</span></div><div class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</div><div class="line">  res.write(<span class="string">'abc'</span>);</div><div class="line">  res.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">10000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'started.'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Client代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(xhr.readyState === XMLHttpRequest.DONE)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Result：'</span>, xhr.responseText);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//场景一：GET请求，不需要Header，允许跨域</span></div><div class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:10000/'</span>, <span class="literal">true</span>);</div><div class="line">xhr.send();</div><div class="line"></div><div class="line"><span class="comment">//场景二： POST请求，需要设置为指定Header（不设置content-type也可），允许跨域</span></div><div class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'http://localhost:10000/'</span>, <span class="literal">true</span>);</div><div class="line"><span class="comment">//此处value必须是text/plain或者application/x-www-form-urlencoded或者multipart/form-data。</span></div><div class="line"><span class="comment">//此处也可以不设置</span></div><div class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</div><div class="line">xhr.send();</div><div class="line"></div><div class="line"><span class="comment">//场景三：DELETE请求（不允许跨域）</span></div><div class="line">xhr.open(<span class="string">'DELETE'</span>, <span class="string">'http://localhost:10000/'</span>, <span class="literal">true</span>);</div><div class="line">xhr.send();</div><div class="line"></div><div class="line"><span class="comment">//场景四：POST请求，有自定义Header（不允许跨域）</span></div><div class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'http://localhost:10000/'</span>, <span class="literal">true</span>);</div><div class="line">xhr.setRequestHeader(<span class="string">'x-token'</span>, <span class="string">'a'</span>);</div><div class="line">xhr.send();</div></pre></td></tr></table></figure>
<h3 id="1-2、预请求"><a href="#1-2、预请求" class="headerlink" title="1.2、预请求"></a>1.2、预请求</h3><p>不同于简单请求，预请求要求必须先发送一个OPTIONS请求给站点，来查明该站点是否允许跨域请求，这样做的原因是为了避免跨站请求可能对目的站点的数据造成的损坏。</p>
<p>如果请求满足以下任一条件，则会产生预请求：</p>
<ol>
<li>请求以GET、HEAD、POST之外的方法发起。或者，使用POST，但数据类型为<code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code> 或者 <code>text/plain</code> 以外的数据类型。（注：之前的版本只有text/plain可以不用发起预请求）。</li>
<li>使用了自定义请求头。</li>
</ol>
<p>按照如上规则，我们来列举几个应用场景：</p>
<p>Server端代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">//之后设置了Access-Control-Allow-Origin，才会允许跨域</span></div><div class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</div><div class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'POST, DELETE, GET'</span>);</div><div class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'x-token'</span>);</div><div class="line">  <span class="comment">//设置预请求缓存1天，1天内再次请求，可以跳过预请求</span></div><div class="line">  <span class="comment">//此功能需要客户端缓存支持，如果客户端禁用缓存，那么每次都会预请求</span></div><div class="line">  res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>); </div><div class="line">  res.write(<span class="string">'abc'</span>);</div><div class="line">  res.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">10000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'started.'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Client端代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(xhr.readyState === XMLHttpRequest.DONE)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Result：'</span>, xhr.responseText);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//场景一：DELETE请求，发送OPTIONS，匹配，允许跨域</span></div><div class="line">xhr.open(<span class="string">'DELETE'</span>, <span class="string">'http://localhost:10000/'</span>, <span class="literal">true</span>);</div><div class="line">xhr.send();</div><div class="line"></div><div class="line"><span class="comment">//场景二：PUT请求，发送OPTIONS，不匹配，不允许跨域</span></div><div class="line">xhr.open(<span class="string">'PUT'</span>, <span class="string">'http://localhost:10000/'</span>, <span class="literal">true</span>);</div><div class="line">xhr.send();</div><div class="line"></div><div class="line"><span class="comment">//场景三：DELETE请求匹配，使用自定义Header不匹配，不允许跨域</span></div><div class="line">xhr.open(<span class="string">'DELETE'</span>, <span class="string">'http://localhost:10000/'</span>, <span class="literal">true</span>);</div><div class="line">xhr.setRequestHeader(<span class="string">'x-token1'</span>, <span class="string">'aa'</span>);</div><div class="line">xhr.send();</div><div class="line"></div><div class="line"><span class="comment">//场景四：POST请求，匹配的自定义Header，允许跨域</span></div><div class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'http://localhost:10000/'</span>, <span class="literal">true</span>);</div><div class="line">xhr.setRequestHeader(<span class="string">'x-token'</span>, <span class="string">'a'</span>);</div><div class="line">xhr.send();</div></pre></td></tr></table></figure>
<h3 id="1-3、带凭证的请求"><a href="#1-3、带凭证的请求" class="headerlink" title="1.3、带凭证的请求"></a>1.3、带凭证的请求</h3><p>一般来说，对于跨站请求，浏览器是不会发送凭证（HTTP Cookies和验证信息）的。如果要发送带凭证的信息，只需要给XMLHttpRequest设置一个特殊的属性<code>withCredentials = true</code>，通过这种方式，浏览器就允许发送凭证信息。</p>
<p>带凭证的请求可能是简单请求，也可以是会有预请求。是否允许跨域，会先判断简单请求和预请求的规则，然后还会带上带凭证的请求自己的规则。</p>
<p>在带凭证的请求中，后端的响应必须包含Header<code>Access-Control-Allow-Credentials=true</code>，同时Header <code>Access-Control-Allow-Origin</code>，不能再使用*号这种匹配符。</p>
<p>具体示例如下：</p>
<p>服务端代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">//要处理带凭证的请求，此Header不能使用*。</span></div><div class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://10.16.85.170:8000'</span>);</div><div class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'POST, DELETE, GET'</span>);</div><div class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'x-token'</span>);</div><div class="line">  res.setHeader(<span class="string">'Access-Control-Max-Age'</span>, <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>); </div><div class="line">  <span class="comment">//只有设置了该Header，才允许带凭证的请求。</span></div><div class="line">  res.setHeader(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="literal">true</span>);</div><div class="line">  res.write(<span class="string">'abc'</span>);</div><div class="line">  res.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">10000</span>, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'started.'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>客户端代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(xhr.readyState === XMLHttpRequest.DONE)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Result：'</span>, xhr.responseText);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//优先满足预请求，然后满足凭证请求，允许跨域。</span></div><div class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'http://localhost:10000/'</span>, <span class="literal">true</span>);</div><div class="line">xhr.withCredentials = <span class="literal">true</span>;</div><div class="line">xhr.setRequestHeader(<span class="string">'x-token'</span>, <span class="string">'a'</span>);</div><div class="line">xhr.send();</div></pre></td></tr></table></figure>
<h2 id="2、HTTP响应头"><a href="#2、HTTP响应头" class="headerlink" title="2、HTTP响应头"></a>2、HTTP响应头</h2><h3 id="2-1、-后端HTTP响应头"><a href="#2-1、-后端HTTP响应头" class="headerlink" title="2.1、 后端HTTP响应头"></a>2.1、 后端HTTP响应头</h3><p>此处列举后端有关CORS的响应头：</p>
<ol>
<li>Access-Control-Allow-Origin： <origin> | *  允许的域名</origin></li>
<li>Access-Control-Expose-Headers: <headers> 允许的白名单Header，多个用逗号隔开</headers></li>
<li>Access-Control-Max-Age: <delta-seconds>  预请求缓存时间，单位秒</delta-seconds></li>
<li>Access-Control-Allow-Credentials: true | false  是否允许带凭证的请求</li>
<li>Access-Control-Allow-Methods: <methods> 允许的请求类型，多个用逗号隔开</methods></li>
<li>Access-Control-Allow-Headers: <headers> 在实际请求中，允许的自定义header，多个用逗号隔开</headers></li>
</ol>
<h3 id="2-2、-浏览器发出跨域请求的响应头"><a href="#2-2、-浏览器发出跨域请求的响应头" class="headerlink" title="2.2、 浏览器发出跨域请求的响应头"></a>2.2、 浏览器发出跨域请求的响应头</h3><p>此处列举出浏览器在发送跨域请求时，会带上的响应头：</p>
<ol>
<li>Origin: <origin> 告诉服务器，请求来自哪里，仅仅是服务器名，不包含路径。</origin></li>
<li>Access-Control-Request-Method: <method> 预请求时，告诉服务器实际的请求方式</method></li>
<li>Access-Control-Request-Headers: <headers> 预请求时，告诉服务器，实际请求所携带的自定义Header</headers></li>
</ol>
<h2 id="3、参考资料"><a href="#3、参考资料" class="headerlink" title="3、参考资料"></a>3、参考资料</h2><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests" target="_blank" rel="external">MDN HTTP access control (CORS)</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">MDN HTTP访问控制(CORS)</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS布局（上）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/CSS%E5%B8%83%E5%B1%80%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="1、CSS布局之display"><a href="#1、CSS布局之display" class="headerlink" title="1、CSS布局之display"></a>1、CSS布局之display</h2><h3 id="1-1、dispaly"><a href="#1-1、dispaly" class="headerlink" title="1.1、dispaly"></a>1.1、dispaly</h3><p>dispaly是CSS中最重要的用于控制布局的属性，每个元素都有一个默认的display，大多数元素的默认值通常是block（块级元素）或inline（行内元素）。</p>
<p>另一个常用的display是none。一些特殊元素的默认值就是它，如script、link等。</p>
<h3 id="1-2-display-none-与-visibility-hidden"><a href="#1-2-display-none-与-visibility-hidden" class="headerlink" title="1.2 display:none 与 visibility:hidden"></a>1.2 display:none 与 visibility:hidden</h3><p>display设置为none，是不会保存元素本该显示的空间，但是visibility:hidden会保留。</p>
<pre><code>&lt;div style=&quot;width: 100px; height: 100px; border: 1px solid red;float:left;&quot;&gt;
  &lt;span style=&quot;display:none;&quot;&gt;ABCD&lt;/span&gt;EFG
&lt;/div&gt;
&lt;div style=&quot;width: 100px; height: 100px; border: 1px solid red;float:left;&quot;&gt;
  &lt;span style=&quot;visibility:hidden;&quot;&gt;ABCD&lt;/span&gt;EFG
&lt;/div&gt;
</code></pre><div style="width: 100px; height: 100px; border: 1px solid red;float:left;"><br>  <span style="display:none;">ABCD</span>EFG<br></div><br><div style="width: 100px; height: 100px; border: 1px solid red;float:left"><br>  <span style="visibility:hidden;">ABCD</span>EFG<br></div><br><div style="clear:both;"><br><br>### 1.3、更多的display值<br><br>比较常用的有list-item,inline-block,table,table-cell,flex等。<br><br>全部列表如下：<br><br>    none inline block contents list-item inline-block inline-table<br><br>    table table-cell table-column table-column-group table-footer-group table-header-group table-row table-row-group<br><br>    flex inline-flex grid inline-grid<br><br>    ruby ruby-base ruby-text ruby-base-container ruby-text-container<br><br>    run-in<br><br>    /<em> Global values </em>/<br>    display: inherit;<br>    display: initial;<br>    display: unset;<br><br>### 1.4 可改写的display属性<br><br>虽然每个元素都有默认的display，但是我们可以随时随地的重写它，比如将li元素修改为inline-block，制作水平菜单。<br><br>## 2、元素居中<br><br>### 2.1、水平居中<br><br>通过设置margin为auto可以实现水平居中，前提是元素必须得有宽度<br><br>    <div style="width:400px;margin:0 auto;height:10px;border:1px solid red;"></div>

<div style="width:400px;margin:0 auto;height:10px;border:1px solid red;"></div>

<h3 id="2-2、垂直居中"><a href="#2-2、垂直居中" class="headerlink" title="2.2、垂直居中"></a>2.2、垂直居中</h3><p>因为table的cell可以设置垂直居中，所以玩么可以模拟这样的效果</p>
<pre><code>&lt;div style=&quot;width: 400px;height: 200px;border: 1px solid red;display: table-cell; vertical-align: middle;&quot;&gt;
    &lt;div style=&quot;width:100px; height:100px;background: blue;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><div style="width: 200px;height: 200px;border: 1px solid red;display: table-cell; vertical-align: middle;"><br>    <div style="width:100px; height:100px;background: blue;"></div><br></div>

<h3 id="2-3、绝对居中"><a href="#2-3、绝对居中" class="headerlink" title="2.3、绝对居中"></a>2.3、绝对居中</h3><p>知道水平居中和垂直居中，那么绝对居中就比较容易实现了。组合一下：</p>
<pre><code>&lt;div style=&quot;width: 200px;height: 200px;border: 1px solid red;display: table-cell; vertical-align: middle;&quot;&gt;
  &lt;div style=&quot;width:100px; height:100px;background: blue;margin:0 auto;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><div style="width: 200px;height: 200px;border: 1px solid red;display: table-cell; vertical-align: middle;"><br>  <div style="width:100px; height:100px;background: blue;margin:0 auto;"></div><br></div>

<p>还有没有更好的方式呢？如下：</p>
<p>通过设置position:absolute,然后top、bottom、left、right值为0，margin:auto;实现绝对居中。<br>如果要相对容器居中，设置容器的position为relative。</p>
<pre><code>&lt;div style=&quot;width: 200px;height: 200px;border: 1px solid red; position:relative;&quot;&gt;
  &lt;div style=&quot;width:100px; height:100px;background: blue;margin:auto;position:absolute;top:0;left:0;bottom:0; right: 0;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><div style="width: 200px;height: 200px;border: 1px solid red; position:relative;"><br>  <div style="width:100px; height:100px;background: blue;margin:auto;position:absolute;top:0;left:0;bottom:0; right: 0;"></div><br></div>


<h2 id="3、盒子模型"><a href="#3、盒子模型" class="headerlink" title="3、盒子模型"></a>3、盒子模型</h2><p>盒子模型(box-sizing)有两种典型值，分别为content-box,border-box。</p>
<h3 id="3-1、content-box"><a href="#3-1、content-box" class="headerlink" title="3.1、content-box"></a>3.1、content-box</h3><p>此时，设置在元素上的宽度为内容宽度，那么元素所占用的宽度为：width + border * 2 + padding * 2 + margin * 2。宽度同理</p>
<h3 id="3-2、border-box"><a href="#3-2、border-box" class="headerlink" title="3.2、border-box"></a>3.2、border-box</h3><p>此时，设置在元素上的宽度为包含border的宽度，那么占用总宽度为width + margin * 2。内容宽度为width - padding * 2 - border * 2。</p>
<h3 id="3-3-示例"><a href="#3-3-示例" class="headerlink" title="3.3 示例"></a>3.3 示例</h3><pre><code>&lt;div style=&quot;width:100px; margin: 10px; padding: 15px; border: 5px solid blue; box-sizing:content-box&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;width:100px; margin: 10px; padding: 15px; border: 5px solid blue; box-sizing:border-box&quot;&gt;&lt;/div&gt;
</code></pre><div style="width:100px; margin: 10px; padding: 15px; border: 5px solid blue; box-sizing:content-box"></div><br><div style="width:100px; margin: 10px; padding: 15px; border: 5px solid blue; box-sizing:border-box"></div>

<h3 id="3-4、浏览器兼容性"><a href="#3-4、浏览器兼容性" class="headerlink" title="3.4、浏览器兼容性"></a>3.4、浏览器兼容性</h3><p>为了保证浏览器兼容性，需要加上特定浏览器前缀。</p>
<h2 id="4、元素定位"><a href="#4、元素定位" class="headerlink" title="4、元素定位"></a>4、元素定位</h2><p>如果要实现更多复杂的布局，那么就需要了解下position了。</p>
<h3 id="4-1、position-static"><a href="#4-1、position-static" class="headerlink" title="4.1、position:static"></a>4.1、position:static</h3><p>static是position属性的默认值，position:static的元素不会被特殊定位。</p>
<h3 id="4-2、position-relative"><a href="#4-2、position-relative" class="headerlink" title="4.2、position:relative"></a>4.2、position:relative</h3><p>在相对定位(relative)的元素上设置top、right、bottom、left会使其偏离正常位置，其他元素不会调整位置来弥补它偏离后剩下的空隙。</p>
<pre><code>&lt;div style=&quot;border:1px solid red; width: 400px; height: 200px;&quot;&gt;
  &lt;div style=&quot;background: blue; width:100px; height: 100px;&quot;&gt;&lt;/div&gt;
  ABCDE
&lt;/div&gt;
&lt;div style=&quot;border:1px solid red; width: 400px; height: 200px;&quot;&gt;
  &lt;div style=&quot;background: blue; width:100px; height: 100px;position:relative; left: 100px;top:50px;&quot;&gt;&lt;/div&gt;
  ABCDE
&lt;/div&gt;
</code></pre><div style="border:1px solid red; width: 400px; height: 200px;"><br>  <div style="background: blue; width:100px; height: 100px;"></div><br>  ABCDE<br></div><br><div style="border:1px solid red; width: 400px; height: 200px;"><br>  <div style="background: blue; width:100px; height: 100px;position:relative; left: 100px;top:50px;"></div><br>  ABCDE<br></div>

<h3 id="4-3、position-fixed"><a href="#4-3、position-fixed" class="headerlink" title="4.3、position:fixed"></a>4.3、position:fixed</h3><p>固定定位（fixed）元素会相对于视窗来定位，所以就算页面滚动，它还是会留在相同位置。示例请看左下角。</p>
<pre><code>&lt;div style=&quot;width: 100px;height:100px; position:fixed; bottom: 0; right: 0;
border: 1px solid red;&quot;&gt;固定定位&lt;/div&gt;
</code></pre><div style="width: 100px;height:100px; position:fixed; bottom: 0; right: 0;
border: 1px solid red;">固定定位</div>

<h3 id="4-4、position-absolute"><a href="#4-4、position-absolute" class="headerlink" title="4.4、position:absolute"></a>4.4、position:absolute</h3><p>绝对定位元素（absolute）与fixed类似，但是它不是相对视窗，而是相对最近的positioned（position值不是static的元素都是positioned元素）祖先元素，如果没有这样的祖先元素，那么它相对于文档的body元素，并且会随着页面滚动而滚动。</p>
<pre><code>&lt;div style=&quot;border:1px solid red; width: 400px; height: 200px;position:relative;&quot;&gt;
    &lt;div style=&quot;background: blue; width:100px; height: 100px;position:absolute;top: 25px;right:25px;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><div style="border:1px solid red; width: 400px; height: 200px;position:relative;"><br>    <div style="background: blue; width:100px; height: 100px;position:absolute;top: 25px;right:25px;"></div><br></div>
</div>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Iframe跨域通信的几种方式]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/Iframe%E8%B7%A8%E5%9F%9F%E9%80%9A%E4%BF%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>虽然iframe已经越来越不流行了，但是在某些特定的场景下，使用它可以大大减小我们的工作量。</p>
<p>当在页面内使用iframe，甚至是嵌套iframe的时候，它们之间少不了要通信。如果是同域的情况，那我们可以直接进行通信。</p>
<p>然而，很多场景下，往往是跨域通信，那这个时候我们可以用怎样的方式来跨域通信呢？</p>
<p>请看此文分解。</p>
<h2 id="1、重现跨域"><a href="#1、重现跨域" class="headerlink" title="1、重现跨域"></a>1、重现跨域</h2><p>我们新建两个 <code>index.html</code>，分别部署两个不同的端口上。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// localhost:8001/index.html</div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://localhost:8003"</span> <span class="attr">frameborder</span>=<span class="string">"5"</span> </span></div><div class="line">  <span class="attr">style</span>=<span class="string">"width: 100%;height: 300px"</span>&gt;<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.getPage1Title = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'abc'</span>;</div><div class="line">    &#125;;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// localhost:8003/index.html</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"fun1();"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> parentTitle = <span class="built_in">window</span>.parent.getPage1Title();</div><div class="line">      alert(parentTitle);</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>从浏览器打开 <code>http://localhost:8001</code>，然后点击iframe中的按钮，会出现一个如下提示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(index):15 Uncaught SecurityError: Blocked a frame with origin &quot;http://localhost:8003&quot; from accessing a frame with origin &quot;http://10.16.85.170:8001&quot;. Protocols, domains, and ports must match.</div></pre></td></tr></table></figure>
<p>简而言之，就是不允许跨域访问。</p>
<h2 id="2、方式1-通过修改domain来实现跨域访问"><a href="#2、方式1-通过修改domain来实现跨域访问" class="headerlink" title="2、方式1 - 通过修改domain来实现跨域访问"></a>2、方式1 - 通过修改domain来实现跨域访问</h2><p>该方式适合主域相同，而子域不同的场景。此时可以在多个iframe中，通过修改document.domain = ‘主域’ 的方式来实现跨域。</p>
<p><strong>特定场合适用，不推荐</strong></p>
<h2 id="3、方式2-通过-window-name-跨域访问"><a href="#3、方式2-通过-window-name-跨域访问" class="headerlink" title="3、方式2 - 通过 window.name 跨域访问"></a>3、方式2 - 通过 <code>window.name</code> 跨域访问</h2><p>该方式原理是通过先请求其他的域的页面，把要传输的值赋值给 <code>window.name</code> 属性，然后把该iframe的src地址，修改为不跨域的一个页面。此时，由于是同一个iframe，所以name还是之前的数据，通过这样的方式变相的来获取其他域的数据。</p>
<p>示例如下：</p>
<p>在子页面中，仅仅需要把数据赋值给 <code>window.name</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// localhost:8003/index.html</div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.name = <span class="string">'我是page2的数据'</span>;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>父页面中，需要修改iframe为不跨域，然后获取数据</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// localhost:8001/index.html</div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"f1"</span> <span class="attr">frameborder</span>=<span class="string">"5"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 300px"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'f1'</span>);</div><div class="line">    <span class="keyword">var</span> isCrossFrameUrl = <span class="literal">true</span>;</div><div class="line">    iframe.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(isCrossFrameUrl)&#123;</div><div class="line">        iframe.src = <span class="string">'about:block;'</span>;</div><div class="line">        isCrossFrameUrl = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">console</span>.log(iframe.contentWindow.name);</div><div class="line">    &#125;;   </div><div class="line">    iframe.src = <span class="string">'http://localhost:8003'</span>;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>这种方式实现起来，比较别扭，另外只能获取单次数据，并不友好，<strong>不推荐使用</strong>。</p>
<h2 id="4、方式3-通过-navigator-对象来跨域-已过期，不能使用了"><a href="#4、方式3-通过-navigator-对象来跨域-已过期，不能使用了" class="headerlink" title="4、方式3 - 通过 navigator 对象来跨域(已过期，不能使用了)"></a>4、方式3 - 通过 <code>navigator</code> 对象来跨域(已过期，不能使用了)</h2><p>该方式利用多个iframe窗口，访问的 <code>navigator</code> 对象都是同一个，而且并没有跨域问题这个原理；通过在该对象上注册和发送事件的方式来跨域访问。</p>
<h2 id="5、通过-window-postMessage-传递消息"><a href="#5、通过-window-postMessage-传递消息" class="headerlink" title="5、通过 window.postMessage 传递消息"></a>5、通过 <code>window.postMessage</code> 传递消息</h2><p>这是IE8+之后正统的iframe跨域解决方案，全称“跨文档消息”，是一个HTML5的新特性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">otherWindow.postMessage(message, targetOrigin, [transfer]);</div></pre></td></tr></table></figure>
<p>其中第一个参数是消息对象，允许JS数据类型，第二个是要发送到的域，可以设置为 <code>*</code> 表示不限制。</p>
<p>使用如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// localhost:8001/index.html</div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"f1"</span> <span class="attr">src</span>=<span class="string">"http://localhost:8003/"</span> <span class="attr">frameborder</span>=<span class="string">"5"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height: 300px"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(evt);</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// localhost:8003/index.html</div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    parent.postMessage(<span class="string">'test'</span>, <span class="string">'*'</span>);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>打开 <code>http://localhost:8001</code> 就可以看到父页面已经收到子页面发过来的消息了。</p>
<p>evt对象有几个重要的属性需要我们去了解一下：</p>
<ol>
<li>data // 具体发送的数据</li>
<li>origin // 发送者origin（<a href="http://localhost:8003）" target="_blank" rel="external">http://localhost:8003）</a></li>
<li>source // 发送者（window对象）</li>
</ol>
<p><strong>该方式是当前最合适的跨文档通信方式，如果没有兼容IE6、7的需求，建议全部使用该方式。</strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS布局（下）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/CSS%E5%B8%83%E5%B1%80%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="1、CSS布局之浮动"><a href="#1、CSS布局之浮动" class="headerlink" title="1、CSS布局之浮动"></a>1、CSS布局之浮动</h2><h3 id="1-1、float之图文混排"><a href="#1-1、float之图文混排" class="headerlink" title="1.1、float之图文混排"></a>1.1、float之图文混排</h3><p>float的意思就是元素漂浮在上层。</p>
<p>可以直接通过设置float属性实现图文混排，代码如下：</p>
<pre><code>&lt;div style=&quot;width:200px;height:200px;border: 1px solid gray;&quot;&gt;
  &lt;img src=&quot;&quot; alt=&quot;&quot; style=&quot;width:100px;height:100px;float:right;&quot;&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor.
&lt;/div&gt;
</code></pre><div style="width:200px;height:200px;border: 1px solid gray;"><br>  <img src="" alt="" style="width:100px;height:100px;float:right;"> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet, nulla et dictum interdum, nisi lorem egestas odio, vitae scelerisque enim ligula venenatis dolor.<br></div>

<h3 id="1-2、float的副作用"><a href="#1-2、float的副作用" class="headerlink" title="1.2、float的副作用"></a>1.2、float的副作用</h3><p>当为元素设置float只有，它将会漂浮起来。那么它之后的元素就会忽略它，而进行定位。所以会导致元素重叠：</p>
<pre><code>&lt;div style=&quot;width:50px;height:50px;border:1px solid red;float:left&quot;&gt;
  我是悬浮元素
&lt;/div&gt;
&lt;div style=&quot;width:100px;height:100px;border:1px solid blue;&quot;&gt;
  我是标准div元素内容
&lt;/div&gt;
</code></pre><div style="width:50px;height:50px;border:1px solid red;float:left"><br>  我是悬浮元素<br></div><br><div style="width:100px;height:100px;border:1px solid blue;"><br>  我是标准div元素内容<br></div>

<p>这个时候，就需要清除浮动(clear:both)，另外，还可以通过clear:left|right来分别清除左右浮动：</p>
<pre><code>&lt;div style=&quot;width:50px;height:50px;border:1px solid red;float:left&quot;&gt;
  我是悬浮元素
&lt;/div&gt;
&lt;div style=&quot;width:100px;height:100px;border:1px solid blue;clear:both;&quot;&gt;
  我是标准div元素内容
&lt;/div&gt;
</code></pre><div style="width:50px;height:50px;border:1px solid red;float:left"><br>  我是悬浮元素<br></div><br><div style="width:100px;height:100px;border:1px solid blue;clear:both;"><br>  我是标准div元素内容<br></div>

<h3 id="1-3、奇怪的浮动效果"><a href="#1-3、奇怪的浮动效果" class="headerlink" title="1.3、奇怪的浮动效果"></a>1.3、奇怪的浮动效果</h3><p>在内容的浮动元素高度大于外部容器时，效果如下：</p>
<pre><code>&lt;div style=&quot;width:100px;border:1px solid blue;&quot;&gt;
  &lt;div style=&quot;width:50px;height:150px;border:1px solid red;float:right&quot;&gt;
    我是悬浮元素
  &lt;/div&gt;
  我是标准div元素内容
&lt;/div&gt;
</code></pre><div style="width:100px;border:1px solid blue;"><br>  <div style="width:50px;height:150px;border:1px solid red;float:right"><br>    我是悬浮元素<br>  </div><br>  我是标准div元素内容<br></div>

<div style="clear:both;"></div><br>    <strong>如何修复？</strong><br><br>可以通过clearfix样式来修复：<br><br>    <style><br>      .clearfix {<br>        overflow: auto;<br>        zoom: 1;/<em>针对IE需要额外关照</em>/<br>      }<br>    </style><br>    <div class="clearfix" style="width:100px;border:1px solid blue;"><br>      <div style="width:50px;height:150px;border:1px solid red;float:right"><br>        我是悬浮元素<br>      </div><br>      我是标准div元素内容<br>    </div>

<p><style><br>  .clearfix {<br>    overflow: auto;<br>    zoom: 1;/<em>针对IE需要额外关照</em>/<br>  }<br></style></p>
<div class="clearfix" style="width:100px;border:1px solid blue;"><br>  <div style="width:50px;height:150px;border:1px solid red;float:right"><br>    我是悬浮元素<br>  </div><br>  我是标准div元素内容<br></div>

<h2 id="2、CSS布局之百分比宽度"><a href="#2、CSS布局之百分比宽度" class="headerlink" title="2、CSS布局之百分比宽度"></a>2、CSS布局之百分比宽度</h2><p>百分比宽度可以非常容易的实现动态布局，但是当窗口变得很窄的时候，元素的展示可能会错乱。所以需要选择最合适的布局方式。</p>
<p>另外，不能使用min-width来修复这个问题，因为如果是左右结构，对左边的元素设定min-width，右边的元素是不会遵守的，可能会引起重叠。</p>
<h2 id="3、CSS布局之媒体查询（Media-Query）"><a href="#3、CSS布局之媒体查询（Media-Query）" class="headerlink" title="3、CSS布局之媒体查询（Media Query）"></a>3、CSS布局之媒体查询（Media Query）</h2><p>“响应式设计（Responsive Design）”是一种让网站针对不同的浏览器和设备“响应”不同显示效果的策略，这样可以让网站在任何情况下显示的很棒！</p>
<p>如果要兼容移动端，请加上如下类似meta</p>
<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, maximum-scale=2, minimum-scale=0.5, user-scalable=no&quot;&gt;
</code></pre><p>因为众所周知，手机端的屏幕分辨率相当多，所以可以强制指定屏幕的width是等于设备宽度的，忽略分辨率。<br>maximum-scale 是指最大缩放比例。</p>
<h2 id="4、CSS布局之column"><a href="#4、CSS布局之column" class="headerlink" title="4、CSS布局之column"></a>4、CSS布局之column</h2><p>CSS columns是较新的标准，不支持IE9及以下和Opera Mini，所以需要使用浏览器前缀。Column可以很轻松的实现文字的多列布局，示例如下：</p>
<pre><code>&lt;div style=&quot;width:150px;-webkit-column-count:3;-webkit-column-gap: 1em;&quot;&gt;
  CSS布局CSS布局CSS布局CSS布局CSS布局CSS布局CSS布局CSS布局CSS布局CSS布局
&lt;/div&gt;
</code></pre><div style="width:150px;-webkit-column-count:3;-webkit-column-gap: 1em;"><br>  CSS布局CSS布局CSS布局CSS布局CSS布局CSS布局CSS布局CSS布局CSS布局CSS布局<br></div>

<h2 id="5、CSS布局之flexbox"><a href="#5、CSS布局之flexbox" class="headerlink" title="5、CSS布局之flexbox"></a>5、CSS布局之flexbox</h2><p>flexbox布局模式被用来重新定义CSS中的布局方式。</p>
<pre><code>&lt;style&gt;
  .container{
    width: 80%;
    border: 1px solid red;
    height:50px;
    display: flex;
  }
&lt;/style&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div style=&quot;width:100px;&quot;&gt;&lt;/div&gt;
  &lt;div style=&quot;flex:3;background:lightgray;&quot;&gt;1&lt;/div&gt;
  &lt;div style=&quot;flex:5;background:lightyellow;&quot;&gt;2&lt;/div&gt;
&lt;/div&gt;
</code></pre><p><style><br>  .container{<br>    width: 80%;<br>    border: 1px solid red;<br>    height:50px;<br>    display: flex;<br>  }<br></style></p>
<div class="container"><br>  <div style="width:100px;"></div><br>  <div style="flex:3;background:lightgray;">1</div><br>  <div style="flex:5;background:lightyellow;">2</div><br></div>

<p>分析一下以上代码，只需要在容器上设置display:flex，那么内部元素的如果设置了flex样式，那么就会按照flex进行计算，然后实现flex布局。</p>
<p>flex布局，还能实现简单的垂直居中布局。</p>
<pre><code>&lt;div class=&quot;container&quot; style=&quot;align-items: center; justify-content: center;&quot;&gt;
  我是垂直居中的元素
&lt;/div&gt;
</code></pre><div class="container" style="align-items: center; justify-content: center;"><br>  我是垂直居中的元素<br></div>

<p>其中，align-items设置水平居中，justify-content设置了垂直居中。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx常规用法解析]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/Nginx%E5%B8%B8%E8%A7%84%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="0、Nginx简介"><a href="#0、Nginx简介" class="headerlink" title="0、Nginx简介"></a>0、Nginx简介</h2><p><code>Nginx</code> 是时下最流行的静态Web服务器之一，使用它能快速的托管一个web站点。</p>
<p>当然，它的功能并不仅限于此，负载均衡，反向代理，它都非常拿手。</p>
<p>然而，要使用它，就不得不提到它的配置文件。本文就大致来了解下 <code>Nginx</code> 常规配置。</p>
<p><strong>注意：由于环境因素，该文所有测试均在Win10上使用 <code>nginx-1.11.5</code> 测试通过。</strong></p>
<h2 id="1、如何开始？"><a href="#1、如何开始？" class="headerlink" title="1、如何开始？"></a>1、如何开始？</h2><h3 id="1-1、安装"><a href="#1-1、安装" class="headerlink" title="1.1、安装"></a>1.1、安装</h3><p><strong>注意：该安装是指在Windows上安装 </strong></p>
<p>首先，我们进入 <code>Nginx</code> 的下载地址：<a href="https://nginx.org/en/download.html" target="_blank" rel="external">https://nginx.org/en/download.html</a>（书写该文时，<code>nginx</code> 最新版本是 <code>1.11.5</code>）。</p>
<p>然后，找到nginx的Windows压缩包并下载，然后解压到指定目录即可。</p>
<p><strong>提示：Linux下安装也是同样的思路，下载压缩包，解压缩。</strong></p>
<h3 id="1-2、启动"><a href="#1-2、启动" class="headerlink" title="1.2、启动"></a>1.2、启动</h3><p>解压好之后，进入解压目录，我们会看到一个 <code>nginx.exe</code>，它就是 <code>nginx</code> 的启动文件。</p>
<p>进入该目录的cmd环境，执行 <code>nginx</code> 即可启动 <code>nginx</code>，此时我们打开的是一个阻塞的控制台。当我们关闭控制台之后，<code>nginx</code> 服务也相应的关闭了。</p>
<p>大部分时候，我们需要它能在后台执行，此时我们可以使用 <code>start nginx</code> 来启动一个后台运行的 <code>nginx</code> 实例。</p>
<p>如果是线上环境，可能还要求它能够开机启动，此时我们可以采用把 <code>nginx</code> 作为Windows服务的方式来实现开机启动，具体做法请参考： <a href="http://www.spkevin.com/?p=946" target="_blank" rel="external">http://www.spkevin.com/?p=946</a>。</p>
<h3 id="1-3、重新载入配置"><a href="#1-3、重新载入配置" class="headerlink" title="1.3、重新载入配置"></a>1.3、重新载入配置</h3><p>当我们后台启动 <code>nginx</code> 之后，如果修改了配置文件，想重新载入配置怎么办呢？当然，我们可以停止，然后再启动。实际上，还有更简单的方法，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 重新载入配置文件</span></div><div class="line">$ nginx <span class="_">-s</span> reload</div><div class="line"></div><div class="line"><span class="comment"># 重新打开日志文件</span></div><div class="line">$ nginx <span class="_">-s</span> reopen</div></pre></td></tr></table></figure>
<h3 id="1-4、停止服务"><a href="#1-4、停止服务" class="headerlink" title="1.4、停止服务"></a>1.4、停止服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 停止（快速停止，不保存相关信息，快）</span></div><div class="line">$ nginx <span class="_">-s</span> stop</div><div class="line"></div><div class="line"><span class="comment"># 退出（完整有序的停止，保存相关信息，慢）</span></div><div class="line">$ nginx <span class="_">-s</span> quit</div></pre></td></tr></table></figure>
<h2 id="2、托管静态目录"><a href="#2、托管静态目录" class="headerlink" title="2、托管静态目录"></a>2、托管静态目录</h2><p>托管静态目录是 <code>Nginx</code> 最常用的功能之一，该功能是将一个目录部署为一个静态的Web站点。</p>
<p>先使用 <code>start nginx</code> 启动 <code>nginx</code>（默认绑定的是80端口，可能会有冲突，需要修改下端口绑定）。</p>
<p><strong>修改端口绑定：在 <code>nginx/conf</code> 的目录下，打开 <code>nginx.conf</code> 配置文件，找到80，修改为另外一个端口号即可。</strong></p>
<p>启动之后，我们直接输入 <code>http://localhost:&lt;port&gt;</code> 即可查看到Nginx的欢迎页面。</p>
<p>先来分析下它的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">  ...</div><div class="line">  server &#123;</div><div class="line">    listen 7777;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">      root html;  <span class="comment"># 从html相对目录查找内容</span></div><div class="line">      index index.html index.htm; <span class="comment"># 默认首页查找顺序</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>什么意思呢？我们主要需要关注 <code>server/location</code> 节点，其中 <code>root属性</code> 表示去哪个目录查找文件，<code>index属性</code> 表示默认首页查找顺序。</p>
<h3 id="2-1、托管多个站点"><a href="#2-1、托管多个站点" class="headerlink" title="2.1、托管多个站点"></a>2.1、托管多个站点</h3><p>当我们要托管多个站点的时候，我们可以以同样的方式，创建多个 <code>server</code> 节点，这样就能监听不同的端口，也能托管不同的目录。</p>
<h3 id="2-2、有条件查找（复杂实例）"><a href="#2-2、有条件查找（复杂实例）" class="headerlink" title="2.2、有条件查找（复杂实例）"></a>2.2、有条件查找（复杂实例）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  listen 8101; <span class="comment"># 监听8101端口</span></div><div class="line">  server_name newegg-central-2.0; <span class="comment"># 设置server_name，类似iis的主机头 </span></div><div class="line">  root /dist;</div><div class="line">  index index.html; </div><div class="line"></div><div class="line">  location ~* \.(eot|ttf|woff|woff2)$ &#123; <span class="comment"># 针对字体请求做特殊处理</span></div><div class="line">    add_header x-nc2-server <span class="variable">$server_addr</span>;</div><div class="line">    add_header Access-Control-Allow-Origin <span class="string">'*'</span>; <span class="comment"># 允许字体跨域</span></div><div class="line">  &#125; </div><div class="line"></div><div class="line">  location ~* \.[a-zA-Z0-9]+$ &#123; <span class="comment"># 针对有后缀名的请求特殊处理，直接返回</span></div><div class="line">    add_header x-nc2-server <span class="variable">$server_addr</span>; </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  location / &#123; <span class="comment"># 针对不满足上述条件的请求做处理</span></div><div class="line">    add_header x-nc2-server <span class="variable">$server_addr</span>;</div><div class="line">    access_log off;</div><div class="line">    error_page 404 = /index.html;  <span class="comment"># 如果遇到了404，则返回首页（为浏览器history api做的特殊处理，客户端路由）</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、反向代理"><a href="#3、反向代理" class="headerlink" title="3、反向代理"></a>3、反向代理</h2><p>反向代理是根据客户端的请求，从后端的服务器上获取资源，然后再将这些资源返回给客户端。所以我们需要一个后端，此处随便找一个站点来测试，如 “www.newegg.com”，让如何实现我们访问 localhost:7778，就能返回 <code>newegg</code>的数据呢？</p>
<p>配置如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  listen 7778; <span class="comment"># 监听7778端口</span></div><div class="line">  location / &#123;</div><div class="line">    proxy_pass http://www.newegg.com; <span class="comment">#根据客户端请求返回newegg的数据</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-1、利用反向代理，处理跨域"><a href="#3-1、利用反向代理，处理跨域" class="headerlink" title="3.1、利用反向代理，处理跨域"></a>3.1、利用反向代理，处理跨域</h3><p>跨域是前后端分离项目中，比较容易遇到的一个问题，在这里演示下，如何利用Nginx来避免跨域问题。</p>
<p>该方法的原理是，将API通过反向代理，让它看起来和站点是在同一个域，避免发起跨域请求。</p>
<p>先在7777端口托管的index.html中添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  xhr.open(<span class="string">'GET'</span>, <span class="string">'http://localhost:7779'</span>, <span class="literal">true</span>);</div><div class="line">  xhr.send();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>访问 <code>http://localhost:7777</code>，可以明显的看到有跨域请求，接下来，我们来解决该问题，</p>
<p>首先，修改请求域名为： <code>http://localhost:7777/api</code> 这样就变成了同域，然后配置 <code>nginx</code>，把 <code>/api</code>的请求转发到真实的后端api上。</p>
<p>配置如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">  root html;</div><div class="line">  index index.html index.htm;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /api &#123; <span class="comment"># 把所有已/api 开头的请求，转发到7779端口</span></div><div class="line">  proxy_pass http://localhost:7779;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4、负载均衡"><a href="#4、负载均衡" class="headerlink" title="4、负载均衡"></a>4、负载均衡</h2><p>负载均衡是将应用部署到多个地方，然后用统一入口访问，解决单点故障问题。</p>
<p>先用 <code>Node</code> 创建两个 <code>Web server</code>，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Server 1</span></div><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">  res.write(<span class="string">'Server 1, port: 7801'</span>);</div><div class="line">  res.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">7801</span>, err =&gt; &#123;</div><div class="line">  <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server 1 started.port: 7801'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>为了方便查看效果，我们将 <code>Server 2</code> 的端口修改为 <code>7802</code>，输出的文字也稍微变下。</p>
<p>接下来我们来进行负载均衡的配置，在 <code>nginx</code> 中，负载均衡有几种方式：</p>
<ol>
<li>轮询（默认方式）</li>
<li>加权轮询（轮询升级版，可以指定权重）</li>
<li>ip_hash（通过ip计算hash，然后跳转到指定服务器）</li>
<li>fair（第三方，根据后台服务器的响应时间来分配请求，响应时间短，优先分配，适应性较强）</li>
<li>upstream_hash（ip hash升级版，可以指定hash因子）</li>
</ol>
<p>这里我们就简单测试下前两种方式，实现配置如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">  ...</div><div class="line">  upstream test_server &#123;</div><div class="line">    server localhost:7801; <span class="comment"># 后端服务器1,</span></div><div class="line">    server localhost:7802; <span class="comment"># 后端服务器2</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  server &#123;</div><div class="line">    listen 7779;</div><div class="line">    location / &#123;</div><div class="line">      proxy_pass http://test_server; <span class="comment"># 负载均衡 </span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时，访问 <code>http://localhost:7779</code>，会发现 Server1 和 Server2 循环命中，这就是默认的轮询方式负载。</p>
<p>接着，测试带权重的负载，修改配置如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">  ...</div><div class="line">  upstream test_server &#123;</div><div class="line">    server localhost:7801 weight=2; <span class="comment"># 后端服务器1，权重2</span></div><div class="line">    server localhost:7802 weight=1; <span class="comment"># 后端服务器2，权重1</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  server &#123;</div><div class="line">    listen 7779;</div><div class="line">    location / &#123;</div><div class="line">      proxy_pass http://test_server; <span class="comment"># 负载均衡 </span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时，再多次请求 <code>http://localhost:7779</code>，会发现 Server1 出现两次，Server2 出现一次交替命中。</p>
<h2 id="5、更多配置"><a href="#5、更多配置" class="headerlink" title="5、更多配置"></a>5、更多配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">  ...</div><div class="line">  gzip on; <span class="comment"># 开启Gzip</span></div><div class="line"></div><div class="line">  server &#123;</div><div class="line">    ...</div><div class="line">    location / &#123;</div><div class="line">      add_header &lt;field&gt; value [always]; <span class="comment"># 返回时追加Header</span></div><div class="line">      proxy_set_header &lt;field&gt; &lt;value&gt;; <span class="comment"># 反向代理时，发送Header </span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多指令，请查询：<a href="https://nginx.org/en/docs/dirindex.html" target="_blank" rel="external">https://nginx.org/en/docs/dirindex.html</a></p>
<p>想了解完整配置，请查阅：<a href="https://nginx.org/en/docs/" target="_blank" rel="external">https://nginx.org/en/docs/</a></p>
<h2 id="6、其他"><a href="#6、其他" class="headerlink" title="6、其他"></a>6、其他</h2><h3 id="6-1、测试使用的完整Nginx配置文件"><a href="#6-1、测试使用的完整Nginx配置文件" class="headerlink" title="6.1、测试使用的完整Nginx配置文件"></a>6.1、测试使用的完整Nginx配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#user  nobody;</span></div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line"><span class="comment">#error_log  logs/error.log;</span></div><div class="line"><span class="comment">#error_log  logs/error.log  notice;</span></div><div class="line"><span class="comment">#error_log  logs/error.log  info;</span></div><div class="line"></div><div class="line"><span class="comment">#pid        logs/nginx.pid;</span></div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    <span class="comment"># 定制日志格式</span></div><div class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></div><div class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></div><div class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></div><div class="line"></div><div class="line">    <span class="comment">#access_log  logs/access.log  main;</span></div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    <span class="comment">#tcp_nopush     on;</span></div><div class="line"></div><div class="line">    <span class="comment"># 定制保持连接超时时间</span></div><div class="line">    <span class="comment">#keepalive_timeout  0;</span></div><div class="line">    keepalive_timeout  65;</div><div class="line"></div><div class="line">    <span class="comment"># 是否启用gzip</span></div><div class="line">    <span class="comment">#gzip  on;</span></div><div class="line"></div><div class="line">    upstream test_server &#123;</div><div class="line">      server localhost:7801 weight=2; </div><div class="line">      server localhost:7802 weight=1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       7777;</div><div class="line">        server_name  localhost;</div><div class="line"></div><div class="line">        <span class="comment"># 设置编码格式</span></div><div class="line">        <span class="comment">#charset koi8-r;</span></div><div class="line"></div><div class="line">        <span class="comment"># 是否开启访问日志</span></div><div class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location /api &#123;</div><div class="line">          proxy_pass http://localhost:7779;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment"># 指定错误页面</span></div><div class="line">        <span class="comment">#error_page  404              /404.html;</span></div><div class="line"></div><div class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment">#location ~ \.php$ &#123;</span></div><div class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></div><div class="line">        <span class="comment">#&#125;</span></div><div class="line"></div><div class="line">        <span class="comment"># 托管PHP的相关配置</span></div><div class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment">#location ~ \.php$ &#123;</span></div><div class="line">        <span class="comment">#    root           html;</span></div><div class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></div><div class="line">        <span class="comment">#    fastcgi_index  index.php;</span></div><div class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></div><div class="line">        <span class="comment">#    include        fastcgi_params;</span></div><div class="line">        <span class="comment">#&#125;</span></div><div class="line"></div><div class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></div><div class="line">        <span class="comment"># concurs with nginx's one</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment">#location ~ /\.ht &#123;</span></div><div class="line">        <span class="comment">#    deny  all;</span></div><div class="line">        <span class="comment">#&#125;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">      listen 7778;</div><div class="line">      location / &#123;</div><div class="line">        proxy_pass http://www.newegg.com;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">      listen 7779;</div><div class="line">      location / &#123;</div><div class="line">        proxy_pass http://test_server;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#server &#123;</span></div><div class="line">    <span class="comment">#    listen       8000;</span></div><div class="line">    <span class="comment">#    listen       somename:8080;</span></div><div class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></div><div class="line"></div><div class="line">    <span class="comment">#    location / &#123;</span></div><div class="line">    <span class="comment">#        root   html;</span></div><div class="line">    <span class="comment">#        index  index.html index.htm;</span></div><div class="line">    <span class="comment">#    &#125;</span></div><div class="line">    <span class="comment">#&#125;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># 托管HTTPS</span></div><div class="line">    <span class="comment"># HTTPS server</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#server &#123;</span></div><div class="line">    <span class="comment">#    listen       443 ssl;</span></div><div class="line">    <span class="comment">#    server_name  localhost;</span></div><div class="line"></div><div class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></div><div class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></div><div class="line"></div><div class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></div><div class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></div><div class="line"></div><div class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></div><div class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></div><div class="line"></div><div class="line">    <span class="comment">#    location / &#123;</span></div><div class="line">    <span class="comment">#        root   html;</span></div><div class="line">    <span class="comment">#        index  index.html index.htm;</span></div><div class="line">    <span class="comment">#    &#125;</span></div><div class="line">    <span class="comment">#&#125;</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Web API接口之Geolocation]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/Web%20API%E6%8E%A5%E5%8F%A3%E4%B9%8BGeolocation/</url>
      <content type="html"><![CDATA[<h2 id="0、关于Geolocation"><a href="#0、关于Geolocation" class="headerlink" title="0、关于Geolocation"></a>0、关于Geolocation</h2><p>Geolocation，地理位置API。用于获取用户的位置信息。它不算是现有的HTML5标准的“直系”成员，但是是W3C的一个标准。它几乎就是一个真正的JavaScript API！</p>
<h2 id="1、位置相关"><a href="#1、位置相关" class="headerlink" title="1、位置相关"></a>1、位置相关</h2><h3 id="1-1、经纬度表示位置"><a href="#1-1、经纬度表示位置" class="headerlink" title="1.1、经纬度表示位置"></a>1.1、经纬度表示位置</h3><p>要想知道用户的位置，就需要有一个坐标系统，这就是我们的经纬度。一般我们用度/分/秒表示经纬度，如果需要将经纬度转换为小数，可以使用如下函数：</p>
<pre><code>function degreesToDecimal(degrees, minutes, seconds){
  return degrees + (minutes / 60) + (seconds / 3600);
}
</code></pre><h3 id="1-2、API如何确定你的位置"><a href="#1-2、API如何确定你的位置" class="headerlink" title="1.2、API如何确定你的位置"></a>1.2、API如何确定你的位置</h3><p>浏览器要获取你的位置信息，并不要求你非得使用最新的智能手机，即使桌面浏览器也能获取你的位置。那么是如何获取到位置的呢？</p>
<p>其实，获取位置信息的方式有很多，比如：</p>
<ol>
<li>IP地址 –通过ip地址库获取你的位置</li>
<li>GPS  –通过全球定位系统获取你的位置（高精度）</li>
<li>蜂窝电话  –通过三角定位获取你的位置</li>
<li>Wi-Fi  – 同样适用类似蜂窝电话的三角定位获取位置</li>
</ol>
<p>我们没办法知道设备是使用的何种方法获取我们的位置信息，一些聪明的浏览器很可能会使用多种方式来确定你的位置。</p>
<h2 id="2、如何使用Geolocation"><a href="#2、如何使用Geolocation" class="headerlink" title="2、如何使用Geolocation"></a>2、如何使用Geolocation</h2><p>在使用Geolocation之前，我们需要先是否支持，通过如下代码：</p>
<pre><code>if(navigator.geolocation){
  //Supported.
} else {
  window.alert(&apos;No geolocation support.&apos;);
}
</code></pre><h3 id="2-1、获取位置"><a href="#2-1、获取位置" class="headerlink" title="2.1、获取位置"></a>2.1、获取位置</h3><p>获取位置信息的方法是一个异步方法，我们应该如下来使用它：</p>
<pre><code>if(navigator.geolocation){
  var callback = function(pos){
    console.log(&apos;你的位置是：&apos;, pos);
  };
  navigator.geolocation.getCurrentPosition(callback);
} else {
  window.alert(&apos;No geolocation support.&apos;);
}
</code></pre><p>其中pos长什么样呢？大概是如下这个样子的：</p>
<pre><code>{
  coords： { // Coordinates
    accuracy: 137082,
    altitude: null,
    altitudeAccuracy: null,
    heading: null,
    latitude: 24.1848198,
    longitude: 120.63149479999998,
    speed: null
  },
  timestamp: 1453877895563
}
</code></pre><p>其中latitude和longitude就是我们的经纬度了。</p>
<p>该方法的语法是：navigator.geolocation.getCurrentPosition(success[, error[, options]])，具体参数含义，请接着往下看。</p>
<h3 id="2-2、监控位置变化"><a href="#2-2、监控位置变化" class="headerlink" title="2.2、监控位置变化"></a>2.2、监控位置变化</h3><p>在2.1中，我们知道如何获取位置，那如何监控位置变化呢？很容易相当的办法，就是我们定时去获取位置信息，然后比对。那么有没有更好的方式呢？当然，Geolocation API已经帮我们考虑好了。如下：</p>
<pre><code>//正常时，会获取到一个地理位置信息
var watchSuccess = function(pos){
  var latitude = pos.coords.latitude;
  var longitude = pos.coords.longitude;
  console.log(&apos;你的经纬度是：&apos;, latitude, longitude);
};
//错误时，函数会接收一个错误对象
var watchError = function(err){
  console.warn(err, err.code, err.message);
};
var watcherId = navigator.geolocation.watchPosition(watchSuccess, watchError);
</code></pre><p>watchPosition方法的语法是：id = navigator.geolocation.watchPosition(success[, error[, options]])。所以，我们还可以针对这个方法设置参数：</p>
<pre><code>var options = {
  enableHighAccuracy: false, //默认false，为true时，则选择最高的精度获取位置
  timeout: 5000, //每次获取位置信息的最长时间，默认是无限的
  maximumAge: 0 // 缓存时间（毫秒），如果为0，则每次获取最新的
};
</code></pre><h3 id="2-3-清除监控"><a href="#2-3-清除监控" class="headerlink" title="2.3 清除监控"></a>2.3 清除监控</h3><p>既然我们有监控方法，那么该如何停止呢？这就要借助清除监控的方法了，代码如下：</p>
<pre><code>navigator.geolocation.clearWatch(watcherId);
</code></pre><p>watcherId是2.2中监控时的返回值。</p>
<h3 id="2-4、如何计算距离？"><a href="#2-4、如何计算距离？" class="headerlink" title="2.4、如何计算距离？"></a>2.4、如何计算距离？</h3><p>给予两个坐标点，如何计算两者之间的距离呢？一般采用半正矢（Haversine）公式，具体代码如下：</p>
<p>  function degreesToRadians(degrees){<br>    var radians = (degrees * Math.PI) / 180;<br>    return radians;<br>  }</p>
<p>  function computeDistince(startCoords, destCoords){<br>    var Radius = 6371; //每度在地球上的距离（km）</p>
<pre><code>var startLatRads = degreesToRadians(startCoords.latitude);
var startLongRads = degreesToRadians(startCoords.longitude);
var destLatRads = degreesToRadians(destCoords.latitude);
var destLongRads = degreesToRadians(destCoords.longitude);

var distince = Math.acos(
  Math.sin(startLatRads) * Math.sin(destLatRads) + 
  Math.cos(startLatRads) * Math.cos(destLatRads) * 
  Math.cos(startLongRads - destLongRads)
) * Radius;
return distince;
</code></pre><p>  }</p>
<h2 id="3、扩展"><a href="#3、扩展" class="headerlink" title="3、扩展"></a>3、扩展</h2><p>地理位置API单独使用意义不大，一般来说，结合地图就可以实现很复杂的功能了。</p>
<p>待续…</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript配置文件tsconfig简析]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/TypeScript%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6tsconfig%E7%AE%80%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>在使用VsCode编写TypeScript时，VsCode提供了一个tsconfig.json辅助我们设置TypeScript的配置项，另外使用gulp-typescript或者是webpack编译ts文件时，都可以用到这个配置项来确定如何生成最终的js文件。</p>
<p>那tsconfig.json到底有哪些常用属性，它们又起到什么作用呢？下文将为你一一揭晓。</p>
<h2 id="1、tsconfig-json"><a href="#1、tsconfig-json" class="headerlink" title="1、tsconfig.json"></a>1、tsconfig.json</h2><h3 id="1-1、compilerOptions"><a href="#1-1、compilerOptions" class="headerlink" title="1.1、compilerOptions"></a>1.1、compilerOptions</h3><p>tsconfig.json文件中的 <code>compilerOptions</code> 属性用于确定如何编译ts文件。</p>
<p>其中大概有如下属性：</p>
<p>1.1.1、<strong>module: enum</strong></p>
<p><code>module</code> 用于指定模块的代码生成规则，可以使用 <code>commonjs</code> 、 <code>amd</code> 、 <code>umd</code> 、 <code>system</code> 、 <code>es6</code> 、 <code>es2015</code> 、 <code>none</code> 这些选项。</p>
<p>选择commonJS，会生成符合commonjs规范的文件，使用amd，会生成满足amd规范的文件，使用system会生成使用ES6的system.import的代码。使用es6或者是es2015会生产包含ES6特性的代码。</p>
<p>1.1.2、<strong>target: enum</strong></p>
<p><code>target</code> 用于指定生成代码的兼容版本，可以从es3,es5,es2015,es6中选择一个，如果不设置，默认生产的代码兼容到es3。</p>
<p>1.1.3、<strong>sourceMap: boolean</strong></p>
<p><code>sourceMap</code> 是是否生成SourceMap的开关，如果设置为true，则会生成.map文件。</p>
<p>1.1.4、 <strong>noImplicitAny: boolean</strong></p>
<p><code>noImplicitAny</code> 当表达式和申明 类型为any时，是否需要发出警告，设置true，则不警告</p>
<p>1.1.5、 <strong>removeComments: boolean</strong></p>
<p>用于指定是否需要输出注释，设置为true，则不输出注释。</p>
<p>1.1.6、 <strong>charset: string</strong></p>
<p>用于指定ts文件的编码格式</p>
<p>1.1.7、 <strong>declaration: boolean</strong></p>
<p>是否需要生成定义文件d.ts，设置为true，则生成。</p>
<p>1.1.8、 <strong>diagnostics: boolean</strong></p>
<p>是否需要显示诊断信息，设置为true，则显示。</p>
<p>1.1.9、 <strong>emitBOM: boolean</strong></p>
<p>是否需要在输出文件的开头发出一个UTF-8字节顺序标记，设置为true，则输出。</p>
<p>1.1.10、<strong>inlineSourceMap: boolean</strong></p>
<p>是否需要将sourceMap文件生成到js文件中，设置为true，则生成到js文件中。</p>
<p><strong>注：此选项和sourceMap、mapRoot选项冲突，会优先使用inlineSouceMap</strong></p>
<p>1.1.11、<strong>inlineSources： boolean</strong></p>
<p>用于指定生成的source内容是否inline，如果设置为true，则inline展示（从测试的效果来看，就是生成在js文件中的source map内容要多一些）</p>
<p><strong>注：该设置项依赖inlineSouceMap设置为true</strong></p>
<p>1.1.12、<strong>jsx: enum</strong></p>
<p>用于指定按照何种方式生成jsx代码，可选react和preserve。</p>
<p>1.1.13、<strong>reactNamespace: string</strong></p>
<p>配置jsx属性使用，指定生成react代码时，需要使用的命名空间。默认””</p>
<p>1.1.14、<strong>listFiles: boolean</strong></p>
<p>编译时是否需要打印文件列表，设置为true，则打印。默认false</p>
<p>1.1.15、<strong>locale: string</strong></p>
<p>用于指定本地化错误信息，如果设定为en-us，那么错误信息将显示英文。默认””</p>
<p>1.1.16、<strong>mapRoot: string(uri)</strong></p>
<p>指定map文件的跟路径，该选项的值影响.map文件中的sources属性。默认””</p>
<p><strong>注：该选项依赖sourceMap: true</strong></p>
<p>1.1.17、<strong>newLine: enum</strong></p>
<p>指定换行符。可选 <code>CRLF</code> 和 <code>LF</code> 两种，前者是回车换行，后者是换行。默认是回车换行</p>
<p>1.1.18、<strong>noEmit: boolean</strong></p>
<p>当设置为true时，将不会输出</p>
<p>1.1.19、<strong>noEmitHelpers: boolean</strong></p>
<p>设置为true时，不会生成自定义的helper函数。</p>
<p>1.1.20、<strong>noEmitOnError: boolean</strong></p>
<p>设置为true时，如果遇到了错误，就不再输出</p>
<p>1.1.21、<strong>noLib: boolean</strong></p>
<p>设置为true时，将不会包含默认的库，如（lib.d.ts）,此时有可能导致找不到Array，String等对象</p>
<p>1.1.22、<strong>noResolve: boolean</strong></p>
<p>设置为true时，不使用三斜杠引入模块，需要从编译的文件列表中添加。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// &lt;reference path="" /&gt;</span></div><div class="line"><span class="keyword">import</span> PI <span class="keyword">from</span> <span class="string">'./2A.ts'</span>;</div></pre></td></tr></table></figure>
<p>1.1.23、<strong>skipDefaultLibCheck: boolean</strong></p>
<p>设置为true时，将跳过默认库检查。</p>
<p>1.1.24、<strong>outFile: string(uri)</strong></p>
<p>设置输出文件，会将多个ts输入文件合并到该文件中</p>
<p>1.1.25、<strong>outDir: string(uri)</strong></p>
<p>指定输出文件的根目录。</p>
<p>1.1.26、<strong>preserveConstEnums: boolean</strong></p>
<p>设置为true时，生成代码时不会删除常量枚举声明。</p>
<p>1.1.27、<strong>pretty: boolean</strong></p>
<p>当设置为true时，错误信息，跟踪信息将带有颜色和样式</p>
<p>1.1.28、<strong>noImplicitUseStrict: boolean</strong></p>
<p>当设置为true时，编译输出时不会调用’use strict’指令（也就是不生成use strict）</p>
<p>1.1.29、<strong>rootDir: string(uri)</strong></p>
<p>指定输入文件的根目录。rootDir应包含所有的源文件。</p>
<p>1.1.30、<strong>isolatedModules: boolean</strong></p>
<p>设置为true时，无条件的触发导入未解决的文件。</p>
<p>1.1.31、<strong>sourceRoot: string(uri)</strong></p>
<p>设置在调试时定位的目标文件根目录</p>
<p>1.1.32、<strong>suppressExcessPropertyErrors: boolean</strong></p>
<p>设置为true时，禁止过剩的对象字面量属性检查</p>
<p>1.1.33、<strong>suppressImplicitAnyIndexErrors: boolean</strong></p>
<p>Suppress noImplicitAny errors for indexing objects lacking index signatures.</p>
<p>1.1.34、<strong>stripInternal: boolean</strong></p>
<p>设置为true，则遇到@internal注解时，不会触发代码定义。</p>
<p>1.1.35、<strong>watch: boolean</strong></p>
<p>设置为true时，将监视文件变化。当文件变化时，自动编译</p>
<p>1.1.36、<strong>experimentalDecorators: boolean</strong></p>
<p>设置为true，则支持ES7的装饰器特性</p>
<p>1.1.37、<strong>emitDecoratorMetadata: boolean</strong></p>
<p>设置为true，则使用元数据特性</p>
<p>1.1.38、<strong>moduleResolution: string</strong></p>
<p>指定模块的解析策略，Node或者是classic，默认是classic。</p>
<p>1.1.39、<strong>allowUnusedLabels: boolean</strong></p>
<p>设置为true时，允许没有用到的标签。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">l: do&#123;</div><div class="line">  console.log(&apos;abc&apos;);</div><div class="line">&#125;while (1 !== 1);</div></pre></td></tr></table></figure>
<p>以上代码有个未使用的标签l，默认是会报错的。</p>
<p>1.1.40、<strong>noImplicitReturns: boolean</strong></p>
<p>设置为true时，如果不是函数中的所有路径都有返回值，则提示Error。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(a === <span class="number">1</span>)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'abc'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//fun函数只有当a = 1的时候，才有确定的返回值。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.1.41、<strong>noFallthroughCasesInSwitch: boolean</strong></p>
<p>设置为true时，将严格校验switch-case语法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> key = <span class="string">'ab'</span>;</div><div class="line">  <span class="keyword">switch</span> (key) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'ab'</span>:</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'abc'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码默认情况不会报错，当设置noFallthroughCasesInSwitch: true时，则会提示错误。</p>
<p>1.1.42、<strong>allowUnreachableCode: boolean</strong></p>
<p>设置为true时，如果有无法访问的代码，也不会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'abc'</span>;</div><div class="line">  <span class="keyword">return</span> <span class="string">'ccc'</span>; <span class="comment">//默认会报错，设置allowUnreachableCode为true时，则不报错</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.1.43、<strong>forceConsistentCasingInFileNames: boolean</strong></p>
<p>设置为true时，将强制区分大小写。默认为false。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2a.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</div><div class="line"><span class="comment">//1a.ts</span></div><div class="line"><span class="keyword">import</span> PI <span class="keyword">from</span> <span class="string">'./2A.ts'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> PI;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码默认可以通过，当强制区分大小写时，则提示错误 ‘2a’ !== ‘2A’</p>
<p>1.1.44、<strong>allowSyntheticDefaultImports: boolean</strong></p>
<p>设置为true时，则允许从没有默认导出的模块中默认导入(也就是不做检查)。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2.ts</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</div><div class="line"><span class="comment">//1.ts</span></div><div class="line"><span class="keyword">import</span> PI <span class="keyword">from</span> <span class="string">'./2.ts'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> PI;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码，默认是会报错的，当设置allowSyntheticDefaultImports时，则不会报错。</p>
<p>1.1.45、<strong>allowJs: boolean</strong></p>
<p>当设置为true时，js文件也会被编译。</p>
<p><strong>注意：编译js文件时，如果不另外设置outFile，将不会成功，因为不能够重写源代码文件</strong></p>
<h3 id="1-2、compileOnSave"><a href="#1-2、compileOnSave" class="headerlink" title="1.2、compileOnSave"></a>1.2、compileOnSave</h3><p>该属性用于启用保存时编译功能。</p>
<p><em>**注意：当前仅仅只有VS2015配置TypeScript1.8.4以后或者在atom中搭配atom-typescript插件才有效</em></p>
<h3 id="1-3、exclude"><a href="#1-3、exclude" class="headerlink" title="1.3、exclude"></a>1.3、exclude</h3><p>exclude用于排除不需要编译的ts文件。该属性和files属性冲突。两者只能设置其一。</p>
<h3 id="1-4、files"><a href="#1-4、files" class="headerlink" title="1.4、files"></a>1.4、files</h3><p>当files属性不存在时，编译器会编译当前目录和子目录中的所有文件。当files属性存在是，仅仅是编译files列表中的文件。</p>
<p>该属性和exclude属性冲突。如果同时指定了exclude和files，则files属性优先。</p>
<h2 id="2、常用tsconfig配置"><a href="#2、常用tsconfig配置" class="headerlink" title="2、常用tsconfig配置"></a>2、常用tsconfig配置</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"compilerOptions"</span>: &#123;</div><div class="line">    <span class="attr">"target"</span>: <span class="string">"ES5"</span>,</div><div class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</div><div class="line">    <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"noEmitHelpers"</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"exclude"</span>: [</div><div class="line">    <span class="string">"node_modules"</span>,</div><div class="line">    <span class="string">"typings/main"</span>,</div><div class="line">    <span class="string">"typings/main.d.ts"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"compileOnSave"</span>: <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、参考资料"><a href="#3、参考资料" class="headerlink" title="3、参考资料"></a>3、参考资料</h2><ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html" target="_blank" rel="external">https://www.typescriptlang.org/docs/handbook/tsconfig-json.html</a></li>
<li><a href="http://json.schemastore.org/tsconfig" target="_blank" rel="external">http://json.schemastore.org/tsconfig</a></li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack In Angular2]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/Webpack%20In%20Angular2/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>当下Angular2是比较值得关注的技术了，想要把Angular2跑起来，还是比较容易的。但</p>
<p>在这里，我要做的是搭建一个Angular2的开发环境，那么就一步一步来尝试下。</p>
<h2 id="1、搭建开发环境"><a href="#1、搭建开发环境" class="headerlink" title="1、搭建开发环境"></a>1、搭建开发环境</h2><h3 id="1-1、创建项目"><a href="#1-1、创建项目" class="headerlink" title="1.1、创建项目"></a>1.1、创建项目</h3><p>新建目录 <code>webpack-in-angular2</code>，然后进入目录执行 <code>npm init -f</code> 创建好 <code>package.json</code> 文件。</p>
<p>打开package.json文件。新建属性 <code>dependencies</code> ，并赋值如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"@angular/common"</span>: <span class="string">"^2.0.0-rc.1"</span>,</div><div class="line">    <span class="attr">"@angular/compiler"</span>: <span class="string">"2.0.0-rc.1"</span>,</div><div class="line">    <span class="attr">"@angular/core"</span>: <span class="string">"2.0.0-rc.1"</span>,</div><div class="line">    <span class="attr">"@angular/http"</span>: <span class="string">"2.0.0-rc.1"</span>,</div><div class="line">    <span class="attr">"@angular/platform-browser"</span>: <span class="string">"2.0.0-rc.1"</span>,</div><div class="line">    <span class="attr">"@angular/platform-browser-dynamic"</span>: <span class="string">"2.0.0-rc.1"</span>,</div><div class="line">    <span class="attr">"@angular/router"</span>: <span class="string">"^2.0.0-rc.1"</span>,</div><div class="line">    <span class="attr">"@angular/router-deprecated"</span>: <span class="string">"2.0.0-rc.1"</span>,</div><div class="line">    <span class="attr">"@angular/upgrade"</span>: <span class="string">"2.0.0-rc.1"</span>,</div><div class="line">    </div><div class="line">    <span class="attr">"es6-shim"</span>: <span class="string">"^0.35.0"</span>,</div><div class="line">    <span class="attr">"reflect-metadata"</span>: <span class="string">"^0.1.3"</span>,</div><div class="line">    <span class="attr">"rxjs"</span>: <span class="string">"5.0.0-beta.6"</span>,</div><div class="line">    <span class="attr">"zone.js"</span>: <span class="string">"^0.6.12"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目录下打开控制台，执行 <code>npm i</code> 安装依赖。</p>
<p>至此，Angular2项目已经创建完成。</p>
<h3 id="1-2、安装webpack"><a href="#1-2、安装webpack" class="headerlink" title="1.2、安装webpack"></a>1.2、安装webpack</h3><p>首先要确保已经全局安装了 <code>webpack</code></p>
<p>接着安装所需要包 <code>npm install --save-dev webpack typescript ts-loader ts-helpers</code></p>
<h3 id="1-3、配置webpack"><a href="#1-3、配置webpack" class="headerlink" title="1.3、配置webpack"></a>1.3、配置webpack</h3><p>在根目录创建 <code>webpack.config.js</code> 文件，用于编写webpack的相关配置项。</p>
<p>在配置 <code>webpack</code> 之前，我们先在 <code>src</code> 目录下创建好我们需要的 <code>polyfills.ts</code> 和 <code>vendor.ts</code>，内容如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//polyfills.ts</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">'es6-shim'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'reflect-metadata'</span>;</div><div class="line"><span class="built_in">require</span>(<span class="string">'zone.js/dist/zone'</span>);</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">'ts-helpers'</span>;</div></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//vendor.ts</span></div><div class="line"></div><div class="line"><span class="comment">// Angular 2</span></div><div class="line"><span class="keyword">import</span> <span class="string">'@angular/platform-browser'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'@angular/platform-browser-dynamic'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'@angular/common'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'@angular/http'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'@angular/router'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'@angular/router-deprecated'</span>;</div><div class="line"></div><div class="line"><span class="comment">//RxJS</span></div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs'</span>;</div></pre></td></tr></table></figure>
<p>接下来，我们再配置webpack的配置项，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line"><span class="meta"></span></div><div class="line">'use strict';</div><div class="line"></div><div class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">debug</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">polyfills</span>: <span class="string">'./src/polyfills.ts'</span>,</div><div class="line">    <span class="attr">vendor</span>: <span class="string">'./src/vendor.ts'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'dist/assets/js'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].js'</span>,</div><div class="line">    <span class="attr">chunkFilename</span>: <span class="string">'[id].chunk.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">loader</span>: <span class="string">'ts'</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>此时，通过控制台执行 <code>webpack</code> 会提示找不到路径错误。</p>
<p>这个时候，我们需要新建一个 <code>tsconfig.json</code> 文件，内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//tsconfig.json</div><div class="line"></div><div class="line">&#123;</div><div class="line">  "compilerOptions": &#123;</div><div class="line">    "module": "commonjs",</div><div class="line">    "target": "es5"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后再执行 <code>webpack</code>，可以看到在dist/assets/js目录下，已经生成了我们需要的 <code>polyfills.js</code> 和 <code>vendor.js</code> 两个文件。</p>
<p>至此，简单的webpack使用，已经ok，同时也可以生成我们需要的来个库文件了。</p>
<h3 id="1-4、Angular2-Hello-World"><a href="#1-4、Angular2-Hello-World" class="headerlink" title="1.4、Angular2 Hello World"></a>1.4、Angular2 Hello World</h3><p>接下来，我们实现一个Angular2的Hello App。</p>
<p>在 <code>src/</code> 下创建 <code>bootstrap.ts</code> 文件，内容如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;bootstrap&#125; from <span class="string">'@angular/platform-browser-dynamic'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'demo-app'</span>,</div><div class="line">  template: <span class="string">`</span></div><div class="line">&lt;h3&gt;Hello, Angular2 and Webpack.&lt;/h3&gt;</div><div class="line">  `</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent&#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bootstrap(AppComponent);</div></pre></td></tr></table></figure>
<p>然后在 <code>webpack.config.js</code> 中添加入口点：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">entry: &#123;</div><div class="line">  <span class="attr">polyfills</span>: <span class="string">'./src/polyfills.ts'</span>,</div><div class="line">  <span class="attr">vendor</span>: <span class="string">'./src/vendor.ts'</span>,</div><div class="line">  <span class="attr">bootstrap</span>: <span class="string">'./src/bootstrap.ts'</span> <span class="comment">//新增的入口文件</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再次执行 <code>webpack</code> 命令，就可以找到 <code>dist/assets/js/bootstrap.js</code> 文件了。但打开该文件一看，似乎不对，把angular都已经打包进去了。其实我们已经把angular打包到 <code>vendor.js</code> 中了，根本就不需要再打包到 <code>bootstrap.js</code> 。</p>
<p>此时，我们可以修改webpack的config文件，添加公共代码块引用，配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">let</span> CommonsChunkPlugin = webpack.optimize.CommonsChunkPlugin;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">debug</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">polyfills</span>: <span class="string">'./src/polyfills.ts'</span>,</div><div class="line">    <span class="attr">vendor</span>: <span class="string">'./src/vendor.ts'</span>,</div><div class="line">    <span class="attr">bootstrap</span>: <span class="string">'./src/bootstrap.ts'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'dist/assets/js'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].js'</span>,</div><div class="line">    <span class="attr">chunkFilename</span>: <span class="string">'[id].chunk.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">loader</span>: <span class="string">'ts'</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> CommonsChunkPlugin(&#123;</div><div class="line">      <span class="attr">name</span>: [<span class="string">'vendor'</span>, <span class="string">'polyfills'</span>] <span class="comment">//vendor和polyfills设置为公共代码块</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>再次执行 <code>webpack</code> ，发现已经达到我们想要的效果了（bootstrap.js只包含了必须的代码）。</p>
<p>接着，我们在 <code>src/</code> 创建 <code>index.html</code> 文件，内容如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack in Angular2 demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">demo-app</span>&gt;</span><span class="tag">&lt;/<span class="name">demo-app</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"assets/js/polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"assets/js/vendor.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"assets/js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同时，修改 <code>webpack.config.js</code> ，使用 <code>copy-webpack-plugin</code> 将 <code>index.html</code> 复制到 <code>dist/</code> 目录下。</p>
<p>先通过 <code>npm install copy-webpack-plugin --save-dev</code> 安装该插件，然后修改配置节点如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">  <span class="keyword">new</span> CommonsChunkPlugin(&#123;</div><div class="line">    <span class="attr">name</span>: [<span class="string">'vendor'</span>, <span class="string">'polyfills'</span>] <span class="comment">//vendor和polyfills设置为公共代码块</span></div><div class="line">  &#125;),</div><div class="line">  <span class="keyword">new</span> CopyWebpackPlugin([</div><div class="line">    <span class="comment">//将src/index.html复制到dist目录。</span></div><div class="line">    &#123;<span class="attr">form</span>: <span class="string">'src/index.html'</span>, <span class="attr">to</span>: path.join(__dirname, <span class="string">'dist'</span>)&#125;</div><div class="line">  ])</div><div class="line">]</div></pre></td></tr></table></figure>
<p>完成以上步骤之后，打开dist目录，使用 <code>anywhere</code> 命令打开 <code>web server</code>，可以在自动打开的浏览器中看到 Hello, Angular2 and Webpack.</p>
<p>至此，我们已经将Angular2和Webpack结合起来使用了。</p>
<h3 id="1-5、使用webpack-dev-server"><a href="#1-5、使用webpack-dev-server" class="headerlink" title="1.5、使用webpack-dev-server"></a>1.5、使用webpack-dev-server</h3><p>每次都在 <code>dist/</code> 目录下，通过 <code>anywhere</code> 来打开，并不方便。我们可以通过 <code>webpack-dev-server</code> 插件实现静态服务器。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack初体验]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/Webpack%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h2 id="0、关于webpack"><a href="#0、关于webpack" class="headerlink" title="0、关于webpack"></a>0、关于webpack</h2><p>Webpack是灵活的、可扩展的、开源的模块打包工具。<a href="https://webpack.github.io/" target="_blank" rel="external">https://webpack.github.io/</a>。<br>Webpack获取模块和它们之间的依赖关系，然后将这些内容打包为静态资源。</p>
<h3 id="0-1、-Webpack有如下几大特点："><a href="#0-1、-Webpack有如下几大特点：" class="headerlink" title="0.1、 Webpack有如下几大特点："></a>0.1、 Webpack有如下几大特点：</h3><ol>
<li>插件 –利用webpack提供的多功能插件接口，使得它可以被添加很多新特性，实现了webpack的高扩展性。</li>
<li>加载器（Loaders） – webpack通过加载器来预处理文件，所以它不仅仅只能打包javascript。同时，使用node程序可以很容易的实现自己的加载器。</li>
<li>代码分割 – webpack允许你将代码分块，按需加载，减少初始加载时间。</li>
<li>开发工具 –webpack支持SourceUrl和相关调试，同时可以通过开发中间件和开发服务器来实现自动化。</li>
<li>高性能 –通过异步IO和多级缓存支持，实现了webpack的高性能。</li>
<li>多支持 -webpack支持amd和commonjs风格的代码，并且还可以静态分析和拥有一个评价引擎来评估简单表达式。</li>
<li>资源优化 –webpack能够实现多层优化来减少输出大小，还能使用散列还关注请求缓存。</li>
<li>多目标 –webpack的主要目标是在Web上，但是它还支持WebWorks和node.js。</li>
</ol>
<h3 id="0-2、为什么要webpack？-webpack形成的动机"><a href="#0-2、为什么要webpack？-webpack形成的动机" class="headerlink" title="0.2、为什么要webpack？(webpack形成的动机)"></a>0.2、为什么要webpack？(webpack形成的动机)</h3><ol>
<li>多种模块加载的方式，AMD、CommonJS、ES6 modules，各有优点，也各有缺陷。</li>
<li>传输方式的两个极端，每次请求一个模块和一个请求所有模块，都并不能达到很好的效果。</li>
<li>资源不仅仅是JavaScript，也有可能是字体、图片，多语言，模板等。</li>
</ol>
<h2 id="1、Webpack功能"><a href="#1、Webpack功能" class="headerlink" title="1、Webpack功能"></a>1、Webpack功能</h2><h3 id="1-1、加载器（Loaders）"><a href="#1-1、加载器（Loaders）" class="headerlink" title="1.1、加载器（Loaders）"></a>1.1、加载器（Loaders）</h3><p>Loader是把资源文件进行转换的一种程序，使用资源文件做为参数，然后返回新的资源文件。比如，将CoffeeScript代码处理为JS代码。</p>
<p><strong>Loader有哪些特点呢？</strong></p>
<ol>
<li>Loader可以链接，通过管道方式传输。</li>
<li>Loader可以是同步或者是异步的。</li>
<li>Loader使用nodeJs运行，而且能够做更多。</li>
<li>Loader接受查询参数，可以用来传递配置。</li>
<li>Loader可以在配置中绑定到扩展货正则表达式。</li>
<li>Loader可以使用npm发布。</li>
<li>普通模块可以通过package.json来转换为loader。</li>
<li>Loader可以访问配置。</li>
<li>插件可以为Loader添加更多特性。</li>
</ol>
<p>Loader采用<code>xxx-loader</code>这样的名字命令。<code>xxx</code>就是上下文的名称。在使用loader的时候，可以忽略<code>-loader</code>，只需要使用上下文名称就可以了。</p>
<p><strong>有如下三种方式可以使用loader，</strong></p>
<ol>
<li>通过require来使用</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用当前目录的loader.js处理指定的文件</span></div><div class="line"><span class="built_in">require</span>(<span class="string">"./loader!./dir/file.txt"</span>);</div><div class="line"><span class="comment">// 使用jade-loader来处理.jade模板文件</span></div><div class="line"><span class="built_in">require</span>(<span class="string">"jade!./template.jade"</span>);</div></pre></td></tr></table></figure>
<ol>
<li>通过配置</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.jade$/</span>, <span class="attr">loader</span>: <span class="string">"jade"</span> &#125;,</div><div class="line">      <span class="comment">// =&gt; 针对.jade文件使用jade-loader</span></div><div class="line"></div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">"style!css"</span> &#125;,</div><div class="line">      <span class="comment">// =&gt; 针对.css文件使用style和css两种loader</span></div><div class="line">      <span class="comment">// 另外的一种配置语法</span></div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loaders</span>: [<span class="string">"style"</span>, <span class="string">"css"</span>] &#125;,</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>通过cli</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --module-bind jade --module-bind &apos;css=style!css&apos;</div></pre></td></tr></table></figure>
<p><strong>如何使用查询参数？</strong></p>
<p>在require中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">"url-loader?mimetype=image/png!./file.png"</span>);</div></pre></td></tr></table></figure>
<p>在配置中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方式一</span></div><div class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.png$/</span>, <span class="attr">loader</span>: <span class="string">"url-loader?mimetype=image/png"</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">//方式二</span></div><div class="line">&#123;</div><div class="line">    <span class="attr">test</span>: <span class="regexp">/\.png$/</span>,</div><div class="line">    <span class="attr">loader</span>: <span class="string">"url-loader"</span>,</div><div class="line">    <span class="attr">query</span>: &#123; <span class="attr">mimetype</span>: <span class="string">"image/png"</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在CLI中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --<span class="built_in">module</span>-bind <span class="string">"png=url-loader?mimetype=image/png"</span></div></pre></td></tr></table></figure>
<h3 id="1-1、插件"><a href="#1-1、插件" class="headerlink" title="1.1、插件"></a>1.1、插件</h3><p>使用插件一般都涉及到webpack的打包功能，比如使用<a href="https://github.com/senotrusov/bell-on-bundler-error-plugin" target="_blank" rel="external">BellOnBundlerErrorPlugin</a>，来提示在打包过程的错误。</p>
<p>webpack包含部分内置插件，可以在config中进行配置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> webpack.ResolverPlugin([</div><div class="line">        <span class="keyword">new</span> webpack.ResolverPlugin.DirectoryDescriptionFilePlugin(<span class="string">"bower.json"</span>, [<span class="string">"main"</span>])</div><div class="line">    ], [<span class="string">"normal"</span>, <span class="string">"loader"</span>])</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>也可以通过以下代码使用外部插件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ComponentPlugin = <span class="built_in">require</span>(<span class="string">"component-webpack-plugin"</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">      <span class="keyword">new</span> ComponentPlugin()</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-3-开发工具"><a href="#1-3-开发工具" class="headerlink" title="1.3 开发工具"></a>1.3 开发工具</h3><p>开发工具相关配置通过通过<a href="http://webpack.github.io/docs/configuration.html" target="_blank" rel="external">Configuration</a>进行查看。</p>
<p>提供开发服务器的包：<a href="http://webpack.github.io/docs/webpack-dev-server.html" target="_blank" rel="external">webpack-dev-server</a></p>
<p>用于高级用户的中间件：<a href="http://webpack.github.io/docs/webpack-dev-middleware.html" target="_blank" rel="external">webpack-dev-middleware</a></p>
<h2 id="2、使用Webpack"><a href="#2、使用Webpack" class="headerlink" title="2、使用Webpack"></a>2、使用Webpack</h2><p>我们一般采用配置文件加webpack.config的方式来使用webpack，那具体应该如何用呢？</p>
<p>首先，通过 <code>npm install webpack -g</code> 和 <code>npm install webpack --save-dev</code> 全局和在项目中安装webpack。</p>
<p>然后通过 <code>npm install xxx</code> 来安装webpack所需要的插件和加载器（Loader）</p>
<p>接下来，就是编写webpack的配置文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">//引入webpack</span></div><div class="line"></div><div class="line"><span class="comment">//webpack配置</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">'index.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'./dist'</span>, <span class="comment">//输出目录</span></div><div class="line">    filename: <span class="string">'[name][hash]bundle.js'</span> <span class="comment">//输出文件名</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">resolve</span>: &#123;</div><div class="line">    <span class="attr">root</span>: __dirname</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">noParse</span>: [],</div><div class="line">    <span class="attr">loaders</span>: [ <span class="comment">//针对不同的文件，采用不同的加载器来处理</span></div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="attr">loader</span>: <span class="string">'babel'</span>&#125;, <span class="comment">//js文件除开node_modules,通过babel来处理</span></div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.html$/</span>, <span class="attr">loader</span>: <span class="string">'raw'</span> &#125;, <span class="comment">//html文件通过raw-loader处理</span></div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style!css'</span>&#125; <span class="comment">//css文件通过style-loader和css-loader来处理</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="comment">//Banner插件，合并时增加注释</span></div><div class="line">    <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'Hello'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>())</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>最后，执行webpack，就能够启动了，在执行webpack的时候，可以附加很多参数，这些参数可以通过 <code>webpack -h</code> 来查看</p>
<p><strong>当前只能简单使用，等理解了webpack的核心思想，再写一篇《webpack深度解析》，敬请期待…</strong></p>
<h2 id="3、参考文档"><a href="#3、参考文档" class="headerlink" title="3、参考文档"></a>3、参考文档</h2><ol>
<li><a href="http://webpack.github.io/docs/" target="_blank" rel="external">Webpack官方文档</a></li>
<li><a href="http://blog.madewithlove.be/post/webpack-your-bags/" target="_blank" rel="external">在一个真实的项目中使用Webpack</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[重温设计模式（一）：工厂方法]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E9%87%8D%E6%B8%A9%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%87%8D%E6%B8%A9%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><strong>工厂方法模式（Factory method pattern），属于创建性模式。</strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack小抄]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/Webpack%E5%B0%8F%E6%8A%84/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>此文用于记载在使用webpack打包过程中的点点滴滴！（仅适用于 <code>webpack1.x</code>）</p>
<h2 id="1、动态指定loader"><a href="#1、动态指定loader" class="headerlink" title="1、动态指定loader"></a>1、动态指定loader</h2><p><code>webpack</code> 的config文件中的loader，一般针对特定的后缀文件，当我们要对单个文件进行独立配置的时候，就不太好满足需求了，此时我们就需要在 <code>import</code> 或者 <code>require</code> 中指定文件的loader。</p>
<p>指定loader的时候，有如下几种场景：</p>
<ol>
<li>需要使用自定义loader，此时的import应该按照如下方式编写：<code>require(&#39;./loader!./xxx.js)</code> ，使用当前目录下的 <code>loader.js</code> 来处理 <code>xxx.js</code> 。</li>
<li>需要在全局loader（这里指在config中配置的loader）之前做一些处理（插入loader），那我们可以如下处理：<code>import &#39;jade!./template.jade&#39;</code>，使用 <code>jade-loader</code> 来处理template.jade文件。</li>
<li>需要覆盖全局的loader，可以如下使用：<code>import &#39;!style!css!less!./test.less&#39;</code>，使用 <code>less-loader</code> <code>css-loader</code> <code>style-loader</code> 来处理test.less文件。</li>
</ol>
<p><strong>注意1：插入loader与覆盖loader，差别在于第一个字符是不是!(感叹号)。</strong></p>
<p><strong>注意2：当指定loader的时候，需要记住loader是从右往左依次执行的，一定要注意顺序。</strong></p>
<h2 id="2、打包项目为类库"><a href="#2、打包项目为类库" class="headerlink" title="2、打包项目为类库"></a>2、打包项目为类库</h2><p>当我们要把项目打包为类库的时候，我们需要在entry中进行如下配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  entry: &#123;</div><div class="line">    libraryTarget: 'umd', //可选var：直接全局变量，amd: AMD风格的库，cmd: CMD风格的库</div><div class="line">    library: 'xxx' //挂载到window上的名称</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、webpack-dev-server部署IP访问"><a href="#3、webpack-dev-server部署IP访问" class="headerlink" title="3、webpack-dev-server部署IP访问"></a>3、webpack-dev-server部署IP访问</h2><p>使用默认的选项，只能使用 <code>localhost</code> 访问，如果想通过 <code>IP</code> 访问，那么需要设定配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">devServer: &#123;</div><div class="line">  <span class="attr">contentBase</span>: <span class="string">'./'</span>,</div><div class="line">  <span class="attr">port</span>: <span class="number">7410</span>,</div><div class="line">  <span class="attr">host</span>: <span class="string">'0.0.0.0'</span> <span class="comment">// 设定host属性，绑定到 0.0.0.0，则可允许IP访问</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4、Webpack使用外部依赖"><a href="#4、Webpack使用外部依赖" class="headerlink" title="4、Webpack使用外部依赖"></a>4、Webpack使用外部依赖</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">externals: &#123;</div><div class="line">  <span class="string">'@angular/common'</span> : <span class="string">'ng.common'</span>,</div><div class="line">  <span class="string">'@angular/compiler'</span> : <span class="string">'ng.compiler'</span>,</div><div class="line">  <span class="string">'@angular/core'</span> : <span class="string">'ng.core'</span>,</div><div class="line">  <span class="string">'@angular/http'</span> : <span class="string">'ng.http'</span>,</div><div class="line">  <span class="string">'@angular/platform-browser'</span> : <span class="string">'ng.platformBrowser'</span>,</div><div class="line">  <span class="string">'@angular/platform-browser-dynamic'</span> : <span class="string">'ng.platformBrowserDynamic'</span>,</div><div class="line">  <span class="string">'@angular/router'</span> : <span class="string">'ng.router'</span>,</div><div class="line">  <span class="string">'@angular/forms'</span> : <span class="string">'ng.forms'</span>,</div><div class="line">  <span class="string">'rxjs'</span> : <span class="string">'Rx'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5、Webpack多入口点，打包为library"><a href="#5、Webpack多入口点，打包为library" class="headerlink" title="5、Webpack多入口点，打包为library"></a>5、Webpack多入口点，打包为library</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">  <span class="attr">path</span>: <span class="string">'./dist'</span>,</div><div class="line">  <span class="attr">publicPath</span>: <span class="string">'http://10.16.85.170:9999/'</span>,</div><div class="line">  <span class="attr">filename</span>: <span class="string">'newkit.[name].js'</span>,</div><div class="line">  <span class="attr">library</span>: [<span class="string">'newkit'</span>, <span class="string">'[name]'</span>],</div><div class="line">  <span class="attr">liabraryTarget</span>: <span class="string">'umd'</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="6、和gulp配合使用"><a href="#6、和gulp配合使用" class="headerlink" title="6、和gulp配合使用"></a>6、和gulp配合使用</h2><p>尽量使用 <code>const webpack = require(&#39;webpack&#39;)</code> 。</p>
<p>用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> showWebpackError = <span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> gutil.PluginError(<span class="string">'webpack'</span>, err);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> statColor = stats.compilation.warnings.length &lt; <span class="number">1</span> ? <span class="string">'green'</span> : <span class="string">'yellow'</span>;</div><div class="line">  <span class="keyword">if</span> (stats.compilation.warnings.length &gt; <span class="number">0</span>) &#123;</div><div class="line">    stats.compilation.errors.forEach(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">      statColor = <span class="string">'red'</span>;</div><div class="line">    &#125;);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    gutil.log(stats.toString(&#123;</div><div class="line">      <span class="attr">colors</span>: gutil.colors.supportsColor,</div><div class="line">      <span class="attr">hash</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">timings</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">chunks</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">chunkModules</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">modules</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">children</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">version</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">cached</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">cachedAssets</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">reasons</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">source</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">errorDetails</span>: <span class="literal">false</span></div><div class="line">    &#125;));</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">webpack(opt).watch(<span class="number">200</span>, (err, stats) =&gt; &#123;</div><div class="line">	showWebpackError(err, stats);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Yarn vs. Npm]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/Yarn%20vs.%20Npm/</url>
      <content type="html"><![CDATA[<h1 id="0、什么是-Yarn"><a href="#0、什么是-Yarn" class="headerlink" title="0、什么是 Yarn ?"></a>0、什么是 <code>Yarn</code> ?</h1><p>官方解释是：<strong>FAST, RELIABLE, AND SECURE DEPENDENCY MANAGEMENT（快速，可靠和安全的依赖管理器）</strong>。</p>
<p>它是 <code>facebook</code> 开源的一个 <code>npm</code> 替代品。我们主要用它来进行依赖管理工作。</p>
<h1 id="1、为什么需要-Yarn"><a href="#1、为什么需要-Yarn" class="headerlink" title="1、为什么需要 Yarn ?"></a>1、为什么需要 <code>Yarn</code> ?</h1><p>对于 <code>Yarn</code>，其实一开始我是拒绝的。</p>
<p>为啥？</p>
<ol>
<li>发布第二天时我就去体验，结果发现安装它自身比较麻烦，而且安装依赖还慢，还非常容易崩溃。</li>
<li>命令和 <code>npm</code> 不一样，增加了学习成本</li>
<li><code>yarn</code> 安装依赖进度条在windows上不友好（是npm之前旧版本的样式）</li>
<li>觉得赶超 <code>npm</code> 还需要一定的时间</li>
</ol>
<p>那为什么又开始推荐 <code>yarn</code> 呢？</p>
<ol>
<li><code>npm</code> 安装依赖慢，是个长久的问题</li>
<li>再次体验 <code>yarn</code>, 发现之前遇到的一些问题都不见了</li>
<li>使用 <code>yarn</code> 安装依赖，速度有很大的提升<br>4、<code>yarn</code> 比 <code>npm</code> 提供更多更易用的功能 </li>
</ol>
<p>综上，我觉得现在可以开始尝试使用 <code>yarn</code>，说不定过不了多久，还真能完全替代 <code>npm</code>。</p>
<h1 id="2、yarn-cli-使用手册（对比npm）"><a href="#2、yarn-cli-使用手册（对比npm）" class="headerlink" title="2、yarn-cli 使用手册（对比npm）"></a>2、<code>yarn-cli</code> 使用手册（对比npm）</h1><p>首先，要使用 <code>yarn-cli</code>，需要先执行 <code>npm install -g yarn</code> 来全局安装 <code>yarn</code>（莫名的想到，IE浏览器最大的作用就是下载其他浏览器），通过 <code>yarn --version</code> 来查看 <code>yarn</code> 的版本。</p>
<p>如 <code>npm</code> 一样，<code>yarn</code> 也提供了较多的命令。其中最常用的命令如下：</p>
<ol>
<li>yarn init ($ npm init)</li>
<li>yarn install ($ npm install) </li>
<li>yarn add ($ npm install –save)</li>
<li>yarn remove ($ npm uninstall –save) </li>
<li>yarn publish ($ npm publish)</li>
</ol>
<p><strong>注意：下文中仅仅会列出本人觉得比较有代表性/常用的命令，并不是所有的命令</strong></p>
<h3 id="2-1、yarn-init"><a href="#2-1、yarn-init" class="headerlink" title="2.1、yarn init"></a>2.1、<code>yarn init</code></h3><p><code>yarn init</code> 用于初始化 <code>package.json</code> 文件，效果和 <code>npm init</code> 类似。</p>
<p>同样也支持直接创建，不询问。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 初始化package.json，带交互</span></div><div class="line">npm init  =&gt;  yarn init</div><div class="line"></div><div class="line"><span class="comment"># 初始化package.json，直接创建</span></div><div class="line">npm init <span class="_">-f</span>/--force  =&gt;  yarn init -y/--yes</div></pre></td></tr></table></figure>
<h3 id="2-2、yarn-install"><a href="#2-2、yarn-install" class="headerlink" title="2.2、yarn install"></a>2.2、<code>yarn install</code></h3><p><code>yarn install</code> 该命令和 <code>npm install</code> 一样，用于根据 <code>package.json</code> 来初始化项目依赖。</p>
<p>和 <code>npm</code> 对比如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装所有依赖</span></div><div class="line">npm install =&gt; yarn install</div><div class="line"></div><div class="line"><span class="comment"># 安装项目依赖（对比开发依赖，上产线时的依赖）</span></div><div class="line">npm install --production =&gt; yarn install --production/--prod</div></pre></td></tr></table></figure>
<p>除此之外，<code>yarn install</code> 还有一些新的参数设置，正是这些设置，让 <code>yarn</code> 比 <code>npm</code> 有着更强大的功能。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 强制安装所有的包，就算是已经安装过的</span></div><div class="line">yarn install --force</div><div class="line"></div><div class="line"><span class="comment"># 不会读取和生成lockfile</span></div><div class="line">yarn install --no-lockfile</div><div class="line"></div><div class="line"><span class="comment"># 不生成lockfile</span></div><div class="line">yarn install --pure-lockfile</div></pre></td></tr></table></figure>
<h3 id="2-3、yarn-add"><a href="#2-3、yarn-add" class="headerlink" title="2.3、yarn add"></a>2.3、<code>yarn add</code></h3><p><code>yarn add &lt;package&gt;</code> 等同于 <code>npm install &lt;package&gt;</code>，用于安装指定包，它和 <code>npm</code> 的区别如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 仅安装依赖包</span></div><div class="line">npm install &lt;package&gt; --save  =&gt;  N/A</div><div class="line"></div><div class="line"><span class="comment"># 安装依赖包，并写入 dependencies 属性</span></div><div class="line">npm install &lt;package&gt; --save  =&gt;  yarn add &lt;package&gt;  </div><div class="line"></div><div class="line"><span class="comment"># 安装依赖包，并写入 devDependencies 属性</span></div><div class="line">npm install &lt;package&gt; --save-dev  =&gt;  yarn add &lt;package&gt; --dev</div><div class="line"></div><div class="line"><span class="comment"># 安装依赖包，并写入 peerDependencies 属性</span></div><div class="line">N/A  =&gt;  yarn add &lt;package&gt; --peer</div><div class="line"></div><div class="line"><span class="comment"># 安装依赖包，并写入 optionalDependencies 属性</span></div><div class="line">npm install &lt;package&gt; --save-optional  =&gt;  yarn add &lt;package&gt; --optional</div><div class="line"></div><div class="line"><span class="comment"># 安装精确的版本号的依赖包</span></div><div class="line"><span class="comment"># 什么意思呢？简单点说，就是在 package.json中写入的版本号规则不一样。</span></div><div class="line"><span class="comment"># 默认场景下，是会写： "xxx":"^1.1.0"，允许使用同一主版本的包，如1.2.0</span></div><div class="line"><span class="comment"># 当设置该参数之后，就会变成： "xxx": "1.1.0"，（只能使用该版本号的包）</span></div><div class="line">npm install &lt;package&gt;[@version] --save-exact  =&gt; yarn add &lt;package&gt;[@version] --exact</div><div class="line"></div><div class="line"><span class="comment"># 安装具有相同次版本号的依赖包</span></div><div class="line">N/A  =&gt;  yarn add &lt;package&gt;[@version] --tilde</div></pre></td></tr></table></figure>
<p>除此之外，还有一个比较常见的安装包方式，那就是全局安装安装，在 <code>yarn</code> 中又该如何使用呢？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 全局安装依赖包</span></div><div class="line">npm install &lt;package&gt; -g/--global  =&gt; yarn global add &lt;package&gt;</div></pre></td></tr></table></figure>
<h3 id="2-4、yarn-remove"><a href="#2-4、yarn-remove" class="headerlink" title="2.4、yarn remove"></a>2.4、<code>yarn remove</code></h3><p>该命令和 <code>npm uninstall</code> 比较类似，用于删除依赖包。但和 <code>npm uninstall</code> 又有点不同。</p>
<p>因为它没法直接删除包，而不更新 <code>package.json</code>。</p>
<p>当 <code>remove</code> 一个包时，它会同时更新 <code>package.json</code> 中对它的所有引用。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn remove &lt;package&gt; = npm uninstall &lt;package&gt; --save | --save-dev | save-exact | save-optional</div></pre></td></tr></table></figure>
<p>和 <code>yarn add</code> 类似，如果要移除全局安装包，需要用 <code>yarn global remove &lt;package&gt;</code></p>
<h3 id="2-5、yarn-publish"><a href="#2-5、yarn-publish" class="headerlink" title="2.5、yarn publish"></a>2.5、<code>yarn publish</code></h3><p>用于将包发布到仓库（当前是npm仓库）上。类似于 <code>npm publish</code></p>
<h1 id="3、其他重要的命令"><a href="#3、其他重要的命令" class="headerlink" title="3、其他重要的命令"></a>3、其他重要的命令</h1><h3 id="3-1、yarn-run"><a href="#3-1、yarn-run" class="headerlink" title="3.1、yarn run"></a>3.1、<code>yarn run</code></h3><p>该命令和 <code>npm run</code> 没啥区别，用户执行 <code>package.json</code> 中 <code>script</code> 节点中定义的命令。</p>
<h3 id="3-2、yarn-self-update"><a href="#3-2、yarn-self-update" class="headerlink" title="3.2、yarn self-update"></a>3.2、<code>yarn self-update</code></h3><p>用于更新自身，如果是 <code>npm</code>，则是： <code>npm install -g npm</code></p>
<h3 id="3-3、yarn-outdated"><a href="#3-3、yarn-outdated" class="headerlink" title="3.3、yarn outdated"></a>3.3、<code>yarn outdated</code></h3><p>检查依赖版本情况，类似 <code>npm outdated</code></p>
<h3 id="3-4、yarn-upgrade"><a href="#3-4、yarn-upgrade" class="headerlink" title="3.4、yarn upgrade"></a>3.4、<code>yarn upgrade</code></h3><p>用于更新版本，类似于 <code>npm update</code></p>
<h3 id="3-5、yarn-config"><a href="#3-5、yarn-config" class="headerlink" title="3.5、yarn config"></a>3.5、<code>yarn config</code></h3><p>该命令用于管理 <code>yarn</code> 的配置数据。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看配置数据</span></div><div class="line">npm config list  =&gt;  yarn config list </div><div class="line"></div><div class="line"><span class="comment"># 查看指定的key值</span></div><div class="line">npm config get &lt;key&gt;  =&gt;  yarn config get &lt;key&gt;</div><div class="line"></div><div class="line"><span class="comment"># 删除指定的Key</span></div><div class="line">npm config delete &lt;key&gt;  =&gt;  yarn config delete &lt;key&gt;</div><div class="line"></div><div class="line"><span class="comment"># 设置指定的key - value</span></div><div class="line">npm config <span class="built_in">set</span> &lt;key&gt; &lt;value&gt; =&gt; yarn config <span class="built_in">set</span> &lt;key&gt; &lt;value&gt;</div></pre></td></tr></table></figure>
<p><strong>由于国内的环境，强烈建议将 <code>registry</code>设置为： <code>https://registry.npm.taobao.org/</code>，命令如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org/ -g</div></pre></td></tr></table></figure>
<h1 id="4、参考资料"><a href="#4、参考资料" class="headerlink" title="4、参考资料"></a>4、参考资料</h1><ol>
<li><a href="https://yarnpkg.com/en/docs/cli/" target="_blank" rel="external">yarn 文档</a></li>
<li><a href="https://docs.npmjs.com/cli/" target="_blank" rel="external">npm 文档</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Web API接口之FileReader]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/Web%20API%E6%8E%A5%E5%8F%A3%E4%B9%8BFileReader/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>在给网站编写 JavaScript 代码时，也有很多可用的 API。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="external">WEB API 参考</a>。</p>
<h2 id="1、FileReader"><a href="#1、FileReader" class="headerlink" title="1、FileReader"></a>1、FileReader</h2><p>使用FileReader对象,web应用程序可以异步的读取存储在用户计算机上的文件(或者原始数据缓冲)内容。兼容IE10+，FF和Chrome。Safari和Opera不支持。</p>
<h2 id="2、如何读取文件？"><a href="#2、如何读取文件？" class="headerlink" title="2、如何读取文件？"></a>2、如何读取文件？</h2><pre><code>var readFile = function(file, callback) {
  var fileReader = new FileReader(); //实例化FileReader
  fileReader.onloadend = function() { //加载完成后执行
    var result = null; 
    if (fileReader.readyState === FileReader.DONE) { //判断操作是否完成
      result = fileReader.result; //获取结果
    }
    if (callback) {
      callback(result);
    }
  };
  fileReader.readAsBinaryString(file); //以二进制的方式读取文件
};
</code></pre><p>调用的话，就可以通过如下代码调用</p>
<pre><code>readFile(file, function(result){
  // do something
});
</code></pre><p>其中file既可以是blob对象也可以是一个File对象。一般我们常用的是File对象，如何来获取一个简单的File对象呢？</p>
<pre><code>&lt;input type=&quot;file&quot; id=&quot;file_input&quot;&gt;
</code></pre><p>JS:</p>
<pre><code>var fileEl = document.getElementById(&apos;#file_input&apos;);
var file = fileEl.files[0]; //files是数组对象
</code></pre><h2 id="3、FileReader-API"><a href="#3、FileReader-API" class="headerlink" title="3、FileReader API"></a>3、FileReader API</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol>
<li>void abort(); </li>
<li>void readAsArrayBuffer(in Blob blob);</li>
<li>void readAsBinaryString(in Blob blob);</li>
<li>void readAsDataURL(in Blob blob);</li>
<li>void readAsText(in Blob blob, [optional] in DOMString encoding);</li>
</ol>
<p>其中1是终止读取操作，2~4是将数据读取为不同的格式。</p>
<h3 id="状态常量"><a href="#状态常量" class="headerlink" title="状态常量"></a>状态常量</h3><ol>
<li>EMPTY 还没有加载任何数据</li>
<li>LOADING 数据正在被加载</li>
<li>DONE 已完成全部的读取请求</li>
</ol>
<h3 id="属性（属性全部都是只读的）"><a href="#属性（属性全部都是只读的）" class="headerlink" title="属性（属性全部都是只读的）"></a>属性（属性全部都是只读的）</h3><ol>
<li>error 读取文件时发生的错误</li>
<li>readyState FileReader对象的当前状态</li>
<li>result 读取到的文件内容</li>
</ol>
<h2 id="4、用途"><a href="#4、用途" class="headerlink" title="4、用途"></a>4、用途</h2><ol>
<li>客户端校验文件内容</li>
<li>预览图片</li>
<li>客户端导出</li>
</ol>
<h2 id="5、参考文档"><a href="#5、参考文档" class="headerlink" title="5、参考文档"></a>5、参考文档</h2><ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="external">MDN - Blob</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="external">MDN - FileReader</a></li>
</ol>
<h2 id="6、后续补充"><a href="#6、后续补充" class="headerlink" title="6、后续补充"></a>6、后续补充</h2><h3 id="2016-2-17日追加"><a href="#2016-2-17日追加" class="headerlink" title="2016-2-17日追加"></a>2016-2-17日追加</h3><p>FileReader的API方法readAsBinaryString在IE11中无法使用，为了兼容IE11，我们需要使用另外的API或者使用猴子补丁的方式实现该API。</p>
<p>参考<a href="http://stackoverflow.com/questions/31391207/javascript-readasbinarystring-function-on-e11" target="_blank" rel="external">http://stackoverflow.com/questions/31391207/javascript-readasbinarystring-function-on-e11</a></p>
<p>补丁代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!FileReader.prototype.readAsBinaryString)&#123;</div><div class="line">   FileReader.prototype.readAsBinaryString = <span class="function"><span class="keyword">function</span> (<span class="params">blob</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> binary = <span class="string">''</span>;</div><div class="line">     <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">     <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">     reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(reader.result); </div><div class="line">       <span class="keyword">var</span> length = bytes.byteLength;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">         binary += <span class="built_in">String</span>.fromCharCode(bytes[i]);</div><div class="line">       &#125;</div><div class="line">       self.result = binary;</div><div class="line">       $(pt).trigger(<span class="string">'onload'</span>);</div><div class="line">     &#125;;</div><div class="line">     reader.readAsArrayBuffer(blob);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Google JavaScript Style Guide（上）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/Google%20JavaScript%20Style%20Guide%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>JavaScript是一套灵活的语言，所以我们可以用各种风格来编写代码。但为了更好的编写JavaScript代码，有些共同的规范是需要我们去遵循的。以下是Google提供的JavaScript代码风格指南，值得我们学习。<br>可以到 <a href="http://google.github.io/styleguide/javascriptguide.xml" target="_blank" rel="external">原文链接</a> 查看原文英文版。</p>
<h2 id="JavaScript-语言规则"><a href="#JavaScript-语言规则" class="headerlink" title="JavaScript 语言规则"></a>JavaScript 语言规则</h2><p>1、 <code>var</code></p>
<p>总是使用 <code>var</code> 来定义变量，如果你没这样做，那么定义的变量很可能会污染全局变量，导致不必要的问题。</p>
<p><strong>注：在ES6中，我们还可以使用let来定义变量，该方式定义的变量具有词法作用域，没有变量提升的风险。</strong></p>
<p>2、Constants（常量）</p>
<ol>
<li>使用NANES_LIKE _THIS这种全大写，下划线分割风格来定义常量</li>
<li>使用@const来注释你的常量</li>
<li>不要使用 <code>const</code> 关键字来定义常量，IE不支持</li>
</ol>
<p><strong>注：在支持ES6的环境下，建议直接通过 <code>const</code> 关键字来定义常量</strong></p>
<p>3、Semicolons（分号）</p>
<p>由于JavaScript的自动补全分号机制，可能会导致意料之外的结果，所以建议总是使用分号。</p>
<p>错误实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Error 1</span></div><div class="line"><span class="keyword">var</span> fun1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125; <span class="comment">//此处缺少分号，由于JavaScript的优先级，会导致优先和后面的括号结果，当成函数调用。</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'abc'</span>);</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// Error 2</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="number">-1</span> == <span class="number">0</span> || <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//输出1</span></div></pre></td></tr></table></figure>
<p><strong>注：函数和分号，函数申明不需要分号，函数表达式需要使用分号</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;  <span class="comment">//函数表达式需要分号</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;  <span class="comment">//函数申明不需要分号</span></div></pre></td></tr></table></figure></p>
<p>4、嵌套函数</p>
<p>嵌套函数在大多数时候是非常有用的，可以随意的使用给它们。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="string">'local'</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x);</div><div class="line">  &#125;</div><div class="line">  g(); <span class="comment">//可以在函数内部访问到，但没有对外公开</span></div><div class="line">&#125;</div><div class="line">f();</div></pre></td></tr></table></figure></p>
<p>5、在块中定义函数</p>
<p>不要在块中定义函数，JavaScript是函数作用域。</p>
<p><strong>注：我们可以在块中使用函数表达式</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//就算if为false，foo函数同样会被申明</span></div><div class="line"><span class="keyword">if</span>(<span class="literal">false</span>)&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'foo'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">foo &amp;&amp; foo(); </div><div class="line"></div><div class="line"><span class="comment">//此处满足需求，if为false，则bar未定义</span></div><div class="line"><span class="keyword">if</span>(<span class="literal">false</span>)&#123;</div><div class="line">  <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'bar'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">bar &amp;&amp; bar();</div></pre></td></tr></table></figure>
<p>6、异常</p>
<p>异常基本上是无法避免的，可以考虑使用完善的开发框架。</p>
<p>7、自定义异常</p>
<p>建议使用自定义异常，如果没这样做，函数返回的异常信息可能是很不友好的。同时会暴露原始异常信息，所以建议使用自定义异常来屏蔽技术细节。</p>
<p>8、标准功能</p>
<p>标准功能总是由于非标准功能，为了最大的可移植性和兼容性，尽量使用标准功能。</p>
<p>9、基本类型的包装对象</p>
<p>没必要对基本类型进行包装，而且很容易产生错误。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</div><div class="line"><span class="keyword">if</span> (x) &#123; <span class="comment">//此处x为真，所以会执行到内部的代码</span></div><div class="line">  alert(<span class="string">'hi'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>10、多级层次原型</p>
<p>多级原型继承不是首选，建议使用 <a href="https://github.com/google/closure-library/" target="_blank" rel="external">Closure</a> 或者类似的库。</p>
<p>11、方法和属性定义</p>
<p>虽然有很多种方式可以创建函数，但是优先选择使用函数表达式，以属性或者变量的方式存在。如果是要定义类，那么还是采用方法申明的方式。</p>
<p><strong>注：ES6可以使用 <code>class</code> 关键字定义类</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//常规使用函数</span></div><div class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  </div><div class="line">&#125;;</div><div class="line"><span class="comment">//类函数定义</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"><span class="comment">//使用class申明类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo2</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>11、delete（关键字）</p>
<p>优先将无用的属性设置为null，而不是delete。因为在JavaScript引擎中，改变一个对象的属性数目要比重新设置属性值慢得多。</p>
<p>12、闭包</p>
<p>可以使用，但是要当心。闭包使用不当，容易导致内存泄露。实例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 内存泄露，每次点击将使用到a和b，导致循环引用（ERROR）</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">element, a, b</span>) </span>&#123;</div><div class="line">  element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="comment">/* uses a and b */</span> </div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 内存泄露修复</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">element, a, b</span>) </span>&#123;</div><div class="line">  element.onclick = bar(a, b);</div><div class="line">&#125;</div><div class="line"><span class="comment">//通过函数隔离，onclick事件不在对原始的a和b引用，所以避免的循环引用。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="comment">/* uses a and b */</span> </div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>13、eval()</p>
<p>尽量避免使用eval，一个是性能低下，二个是很容易被攻击</p>
<p>14、with(){}</p>
<p>不要使用with，with会让你的代码难以理解，而且结果具有不确定性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//foo是否包含x属性，将会导致不同的结果</span></div><div class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">x1</span>: <span class="number">1</span>&#125;; <span class="comment">// &#123;x: 1&#125;</span></div><div class="line"><span class="keyword">var</span> x = <span class="number">3</span>;</div><div class="line"><span class="keyword">with</span> (foo) &#123;</div><div class="line">  <span class="built_in">console</span>.log(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>15、this</p>
<p>建议仅在对象构造函数，方法和配置闭包中使用 <code>this</code> 。因为this在不同的地方，指向的对象不一样，这些很容易引发错误。</p>
<p>16、for-in 循环</p>
<p>建议在object/map/hash这种key-value结构中使用 for-in 循环，其他地方还是用for吧。另外for-in循环并不能保证key的顺序，所以在要顺序要求的地方也不要使用for-in。</p>
<p><strong>注：ES5中新增了Object.keys可以用来替代for-in，在ES6中可以用for of遍历可迭代对象</strong></p>
<p>17、关联数组</p>
<p>不要使用数组作为 <code>map/hash/关联数组</code> 。关联数组不允许使用非数字索引。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//关联数组</span></div><div class="line"><span class="keyword">var</span> arr = &#123;&#125;;</div><div class="line"><span class="comment">//添加元素</span></div><div class="line">arr[<span class="string">'one'</span>] = <span class="string">'abc'</span>;</div><div class="line">arr[<span class="string">'two'</span>] = <span class="string">'def'</span>;</div><div class="line"><span class="comment">//删除元素</span></div><div class="line"><span class="keyword">delete</span> arr[<span class="string">'one'</span>];</div><div class="line"><span class="comment">//访问元素</span></div><div class="line"><span class="built_in">console</span>.log(arr[<span class="string">'two'</span>]);</div></pre></td></tr></table></figure>
<p>18、多行字符（行尾\反斜杠）</p>
<p>应避免使用多行字符，在每行开始处的空白无法被编译，反斜杠也可能会导致错误的空白，另外，它不是ECMAScript的一部分。我们可以使用字符串连接来替代</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str1 = <span class="string">'AA \</span></div><div class="line">            BB';</div><div class="line"><span class="keyword">var</span> str2 = <span class="string">'AA '</span> + </div><div class="line">           <span class="string">'BB'</span>;</div><div class="line"><span class="comment">//ES6用法</span></div><div class="line"><span class="keyword">var</span> str3 = <span class="string">`AA</span></div><div class="line">BB`;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(str1);</div><div class="line"><span class="built_in">console</span>.log(str2);</div><div class="line"><span class="built_in">console</span>.log(str3);</div></pre></td></tr></table></figure>
<p>19、数组和对象字面量</p>
<p>总是使用数组和对象字面量。数组构造是很容易出错的，new Array(‘a’)表示一个长度的数组，new Array(5)表示5个长度的数组。具体如何返回结果，取决于第一个参数的类型。</p>
<p>20、不要修改内置对象的原型</p>
<p>对于Object和Array原型的修改是严格禁止的。修改其他内置对象的原型虽然不那么危险，但仍然会导致难以调试，应当避免。</p>
<p>21、IE条件注释</p>
<p>不要使用IE条件注释。会阻碍自动化工具处理js代码，也有可能会在运行时改变语法树。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/*@cc_on if (@_jscript) &#123; return 2* @*/</span>  <span class="number">3</span>; <span class="comment">/*@ &#125; @*/</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(f());</div></pre></td></tr></table></figure>
<h2 id="未完，待续"><a href="#未完，待续" class="headerlink" title="未完，待续"></a>未完，待续</h2>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Web前端基础测试题]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/Web%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%B5%8B%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="1、HTML篇"><a href="#1、HTML篇" class="headerlink" title="1、HTML篇"></a>1、HTML篇</h2><h4 id="1、HTML是一种（）。"><a href="#1、HTML是一种（）。" class="headerlink" title="1、HTML是一种（）。"></a>1、HTML是一种（）。</h4><p>A、标记语言  </p>
<p>B、编程语言  </p>
<p>C、自然语言  </p>
<p>D、描述语言</p>
<h4 id="2、HTML的后缀名是（）。"><a href="#2、HTML的后缀名是（）。" class="headerlink" title="2、HTML的后缀名是（）。"></a>2、HTML的后缀名是（）。</h4><p>A、 .h </p>
<p>B、.ht  </p>
<p>C、.htm  </p>
<p>D、.html</p>
<h4 id="3、HTML5新增的元素有（）。"><a href="#3、HTML5新增的元素有（）。" class="headerlink" title="3、HTML5新增的元素有（）。"></a>3、HTML5新增的元素有（）。</h4><p>A、 p</p>
<p>B、 ruby</p>
<p>C、 canvas</p>
<p>D、 span</p>
<h4 id="4、HTML5中，使用（）可以播放视频？"><a href="#4、HTML5中，使用（）可以播放视频？" class="headerlink" title="4、HTML5中，使用（）可以播放视频？"></a>4、HTML5中，使用（）可以播放视频？</h4><p>A、 audio</p>
<p>B、 mark</p>
<p>C、 video</p>
<p>D、 source</p>
<h2 id="2、CSS篇"><a href="#2、CSS篇" class="headerlink" title="2、CSS篇"></a>2、CSS篇</h2><p>####5、以下html代码中，用（）可设置Home的颜色的元素。</p>
<pre><code>&lt;div class=&quot;container&quot;&gt;
  &lt;p class=&quot;about&quot;&gt;
    &lt;a href=&quot;#&quot; id=&quot;home-link&quot;&gt;Home&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;
</code></pre><p>A、 #home-link{}</p>
<p>B、 .container .about{}</p>
<p>C、 .container &gt; a{}</p>
<p>D、 .about a{}</p>
<h4 id="6、要对Me设置样式，应该使用（）。"><a href="#6、要对Me设置样式，应该使用（）。" class="headerlink" title="6、要对Me设置样式，应该使用（）。"></a>6、要对Me设置样式，应该使用（）。</h4><pre><code>&lt;div&gt;
    &lt;span id=&quot;id&quot;&gt;&lt;/span&gt;
    &lt;span&gt;Me&lt;/span&gt;
&lt;/div&gt;
</code></pre><p>A、 #id &gt; span{}</p>
<p>B、 #id + span{}</p>
<p>C、 #id span{}</p>
<p>D、 #id ~ span{}</p>
<h4 id="7、如果对文本的第一个字符进行设置样式？"><a href="#7、如果对文本的第一个字符进行设置样式？" class="headerlink" title="7、如果对文本的第一个字符进行设置样式？()"></a>7、如果对文本的第一个字符进行设置样式？()</h4><p>A、 :after{}</p>
<p>B、 :before{}</p>
<p>C、 :first-letter{}</p>
<p>D、 :first-line{}</p>
<h4 id="8、在CSS的border-box盒子模型中，border-width-2px-width-100px-padding-5px-margin-1px-那么，该元素占用的宽度为（）"><a href="#8、在CSS的border-box盒子模型中，border-width-2px-width-100px-padding-5px-margin-1px-那么，该元素占用的宽度为（）" class="headerlink" title="8、在CSS的border-box盒子模型中，border-width: 2px; width: 100px; padding: 5px; margin: 1px;那么，该元素占用的宽度为（）"></a>8、在CSS的border-box盒子模型中，border-width: 2px; width: 100px; padding: 5px; margin: 1px;那么，该元素占用的宽度为（）</h4><p>A、 100px</p>
<p>B、 102px</p>
<p>C、 108px</p>
<p>D、 116px</p>
<h4 id="9、如何对span设置width？（）"><a href="#9、如何对span设置width？（）" class="headerlink" title="9、如何对span设置width？（）"></a>9、如何对span设置width？（）</h4><p>A、 span{width: 100px; display: inline-block;}</p>
<p>B、 span{width: 100px; display: inline;}</p>
<p>C、 span{width: 100px; display: block;}</p>
<p>D、 span{width: 100px;}</p>
<h4 id="10、当position设置为（）时，可以让元素钉在浏览器窗口上，不随滚动条滚动而滚动。"><a href="#10、当position设置为（）时，可以让元素钉在浏览器窗口上，不随滚动条滚动而滚动。" class="headerlink" title="10、当position设置为（）时，可以让元素钉在浏览器窗口上，不随滚动条滚动而滚动。"></a>10、当position设置为（）时，可以让元素钉在浏览器窗口上，不随滚动条滚动而滚动。</h4><p>A、 absolute</p>
<p>B、 static</p>
<p>C、 relative</p>
<p>D、 fixed</p>
<h4 id="11、以下哪些是CSS的预处理器（）"><a href="#11、以下哪些是CSS的预处理器（）" class="headerlink" title="11、以下哪些是CSS的预处理器（）"></a>11、以下哪些是CSS的预处理器（）</h4><p>A、 Less</p>
<p>B、 Sass</p>
<p>C、 Stylus</p>
<p>D、 Dart</p>
<h2 id="3、JavaScript篇"><a href="#3、JavaScript篇" class="headerlink" title="3、JavaScript篇"></a>3、JavaScript篇</h2><h4 id="12、以下变量定义不正确的是（）。"><a href="#12、以下变量定义不正确的是（）。" class="headerlink" title="12、以下变量定义不正确的是（）。"></a>12、以下变量定义不正确的是（）。</h4><p>A、 var a, var b;</p>
<p>B、 var a = b = 1;</p>
<p>C、 var a, b, c;</p>
<p>D、 var class = 1;</p>
<h4 id="13、假定今天是2015年11月1日，如下代码的输出结果是（）"><a href="#13、假定今天是2015年11月1日，如下代码的输出结果是（）" class="headerlink" title="13、假定今天是2015年11月1日，如下代码的输出结果是（）"></a>13、假定今天是2015年11月1日，如下代码的输出结果是（）</h4><pre><code>new Date().getMonth()
</code></pre><p>A、 111</p>
<p>B、 10</p>
<p>C、 11</p>
<p>D、 2015</p>
<h4 id="14、当表单填写完毕，鼠标单击提交按钮时，触发的是（）事件"><a href="#14、当表单填写完毕，鼠标单击提交按钮时，触发的是（）事件" class="headerlink" title="14、当表单填写完毕，鼠标单击提交按钮时，触发的是（）事件"></a>14、当表单填写完毕，鼠标单击提交按钮时，触发的是（）事件</h4><p>A、onblur</p>
<p>B、onmouseleave</p>
<p>C、onmouseenter</p>
<p>D、onsubmit</p>
<h4 id="15、以下哪些是JavaScript的中间语言？"><a href="#15、以下哪些是JavaScript的中间语言？" class="headerlink" title="15、以下哪些是JavaScript的中间语言？"></a>15、以下哪些是JavaScript的中间语言？</h4><p>A、 TypeScript</p>
<p>B、 CoffeeScript</p>
<p>C、 JScript</p>
<p>D、 ActionScript</p>
<h4 id="16、typeof-undefined-输出（）"><a href="#16、typeof-undefined-输出（）" class="headerlink" title="16、typeof undefined 输出（）"></a>16、typeof undefined 输出（）</h4><p>A、 “undefined”</p>
<p>B、 “object”</p>
<p>C、 “null”</p>
<p>D、 Error</p>
<h4 id="17、-typeof-Array-prototype-输出-（）"><a href="#17、-typeof-Array-prototype-输出-（）" class="headerlink" title="17、 typeof Array.prototype 输出 （）"></a>17、 typeof Array.prototype 输出 （）</h4><p>A、 “undefined”</p>
<p>B、 “object”</p>
<p>C、 “null”</p>
<p>D、 Error</p>
<h4 id="18、-undefined-null-NaN-NaN-输出（）"><a href="#18、-undefined-null-NaN-NaN-输出（）" class="headerlink" title="18、[undefined == null, NaN == NaN] 输出（）"></a>18、[undefined == null, NaN == NaN] 输出（）</h4><p>A、 [true, true]</p>
<p>B、 [false false]</p>
<p>C、 [true, false]</p>
<p>D、 [false, true]</p>
<h4 id="19、以下代码输出（）"><a href="#19、以下代码输出（）" class="headerlink" title="19、以下代码输出（）"></a>19、以下代码输出（）</h4><pre><code>(function() {
  var a = b = 5;
})();
console.log(b);
</code></pre><p>A、 Error</p>
<p>B、 null</p>
<p>C、 undefined</p>
<p>D、 5</p>
<h4 id="20、以下代码输出（）"><a href="#20、以下代码输出（）" class="headerlink" title="20、以下代码输出（）"></a>20、以下代码输出（）</h4><pre><code>function test() {
  console.log(a);
  console.log(foo());
  var a = 1;
  function foo() {
    return 2;
  }
} 
test();
</code></pre><p>A、 1 和 undefined</p>
<p>B、 1 和 2</p>
<p>C、 undefined 和 2</p>
<p>D、 undefined 和 undefined</p>
<h2 id="4、编程篇"><a href="#4、编程篇" class="headerlink" title="4、编程篇"></a>4、编程篇</h2><h4 id="21、请补全代码"><a href="#21、请补全代码" class="headerlink" title="21、请补全代码"></a>21、请补全代码</h4><pre><code>function sortArr(arr){
  //Your code here... 
}
console.log(sortArr([1, 3, 0, 9, 7])); // Result: [9, 7, 3, 1, 0]
</code></pre><h4 id="22、请补全代码"><a href="#22、请补全代码" class="headerlink" title="22、请补全代码"></a>22、请补全代码</h4><pre><code>function distinctArr(arr){
  //Your code here... 
}
console.log(distinctArr([1, 5, 7, 3, 7, 5])); // Result: [1, 5, 7, 3]
</code></pre><p>附参考答案：</p>
<p>A<br>CD<br>BC<br>C<br>ABD<br>BD<br>C<br>B<br>AC<br>D<br>ABC<br>AD<br>B<br>D<br>AB<br>A<br>B<br>C<br>D<br>C</p>
<p>21、<br>function sortArr(arr){<br>  var arrCopy = arr.slice(0);<br>  // 使用sort时，需要先复制一次arr，避免修改原本的数组。<br>  arrCopy.sort(function(a1, a2){<br>    return a2 - a1;<br>  });<br>  return arrCopy;<br>}</p>
<p>22、<br>function distinctArr(arr){<br>  var resultArr = [];<br>  arr.forEach(function(item, i){<br>    if(resultArr.indexOf(item) === -1){<br>      resultArr.push(item);<br>    }<br>  });<br>  return resultArr;<br>}</p>
<p>function distinctArr(arr){<br>  var tempArr = arr.filter(function(item, index, inputArray){<br>      return inputArray.indexOf(item) === index;<br>   });<br>  return tempArr;<br>}</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[那些年我们认识的iframe]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E8%AE%A4%E8%AF%86%E7%9A%84iframe/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[一个元素实现3个回图形]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%AE%9E%E7%8E%B03%E4%B8%AA%E5%9B%9E%E5%9B%BE%E5%BD%A2/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>如何用一个html元素实现三个回子类似的图形？</p>
<h2 id="解题方案"><a href="#解题方案" class="headerlink" title="解题方案"></a>解题方案</h2><h3 id="方案一，利用outline和outline-offset结合伪元素来实现。"><a href="#方案一，利用outline和outline-offset结合伪元素来实现。" class="headerlink" title="方案一，利用outline和outline-offset结合伪元素来实现。"></a>方案一，利用outline和outline-offset结合伪元素来实现。</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.test</span>, <span class="selector-class">.test</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.test</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</div><div class="line">  <span class="attribute">outline</span>: <span class="number">1px</span> solid red;</div><div class="line">  <span class="attribute">outline-offset</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.test</span><span class="selector-pseudo">::before</span>, <span class="selector-class">.test</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.test</span><span class="selector-pseudo">::before</span>&#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">150px</span>;  </div><div class="line">&#125;</div><div class="line"><span class="selector-class">.test</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">  <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">300px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方案二，利用box-shadow来模拟边框实现"><a href="#方案二，利用box-shadow来模拟边框实现" class="headerlink" title="方案二，利用box-shadow来模拟边框实现"></a>方案二，利用box-shadow来模拟边框实现</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">.test&#123;</div><div class="line">  position:relative;</div><div class="line">  border: 1px solid red;</div><div class="line">  height: 150px;</div><div class="line">  width: 120px;</div><div class="line">  box-shadow: 275px 0px 0 0px white, 275px 0px 0 1px red;;</div><div class="line">&#125;</div><div class="line">.test::before&#123;</div><div class="line">  content: '';</div><div class="line">  position: absolute;</div><div class="line">  display: block;</div><div class="line">  width: 100px;</div><div class="line">  height: 100px;</div><div class="line">  left: 10px;</div><div class="line">  top: 25px;</div><div class="line">  border: 1px solid blue;</div><div class="line">  box-shadow:135px 0 0px 0px white, 135px 0 0px 1px blue,  275px 0px 0 0px white, 275px 0px 0 1px blue;;</div><div class="line">&#125;</div><div class="line">.test::after&#123;</div><div class="line">  content: '';</div><div class="line">  display: block;</div><div class="line">  position:absolute;</div><div class="line">  width: 120px;</div><div class="line">  height: 150px;</div><div class="line">  left: 135px;</div><div class="line">  top: 0;</div><div class="line">  border: 1px solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[探索Decorator]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E6%8E%A2%E7%B4%A2Decorator/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><h2 id="1、啥是Decorator？"><a href="#1、啥是Decorator？" class="headerlink" title="1、啥是Decorator？"></a>1、啥是Decorator？</h2><h2 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h2>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[前端模块化：RequireJS]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%9ARequireJS/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端模块化能解决什么问题？</p>
<ol>
<li>模块的版本管理</li>
<li>提高可维护性 – 通过模块化，可以让每个文件职责单一，非常有利于代码的维护</li>
<li>按需加载 – 提高显示效率</li>
<li>更好的依赖处理 – 传统的开发模式，如果B依赖A，那么必须在B文件前面先加载好A。如果使用了模块化，只需要在模块内部申明依赖即可。</li>
</ol>
<h2 id="AMD规范-amp-CMD规范"><a href="#AMD规范-amp-CMD规范" class="headerlink" title="AMD规范 &amp; CMD规范"></a>AMD规范 &amp; CMD规范</h2><p>说到前端模块化，就不得不提<strong>AMD规范</strong>（<a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88" target="_blank" rel="external">中文版</a>)、<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">英文版</a>）和<strong>CMD规范</strong>（<a href="https://github.com/cmdjs/specification/blob/master/draft/module.md" target="_blank" rel="external">英文版</a>）</p>
<p>它们的区别：</p>
<p><a href="http://www.zhihu.com/question/20351507" target="_blank" rel="external">http://www.zhihu.com/question/20351507</a></p>
<p><a href="http://www.cnblogs.com/tugenhua0707/p/3507957.html" target="_blank" rel="external">http://www.cnblogs.com/tugenhua0707/p/3507957.html</a></p>
<p>AMD规范是 RequireJS 在推广过程中对模块定义的规范化产出，所以我在这里重点介绍下 AMD规范。</p>
<p>AMD规范全名异步模块定义（Asynchronous Module Definition）规范，让模块和依赖可以异步加载。</p>
<p>主要API：</p>
<pre><code>define(id?, dependencies?, factory);
</code></pre><p>id,字符串，定义中模块的名字，可选参数（没有提供，则默认为模块加载器请求的指定脚本的名字），如果提供，那么模块名必须是顶级和绝对的（不允许相对名字）</p>
<p>dependencies，数组，模块的依赖，可选参数</p>
<p>factory，函数或对象，必选参数。</p>
<h2 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h2><p>RequireJS是一个JS的文件和模块加载器。专门为浏览器优化，同时也支持其他JS环境。</p>
<h3 id="使用RequireJS"><a href="#使用RequireJS" class="headerlink" title="使用RequireJS"></a>使用RequireJS</h3><p>要想使用requireJS，首先需要在页面引入脚本：</p>
<pre><code>&lt;script src=&quot;assets/vendor/require/require.js&quot;&gt;&lt;/script&gt;
</code></pre><p>接下来，书写脚本：</p>
<pre><code>&lt;script&gt;
    requirejs([&apos;js/a&apos;], function(a){
        alert(a.test);
    });  
&lt;/script&gt;
</code></pre><p>再来看看a.js:</p>
<pre><code>define({
  test: &apos;aa&apos;
});
</code></pre><p>html代码如下：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;RequireJS Demo&lt;/title&gt;
        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;chrome=1&quot;&gt;
        &lt;script src=&quot;assets/vendor/require/require.js&quot;&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;script&gt;
            requirejs([&apos;assets/js/a&apos;], function(a){
                alert(a.test);
            });  
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>在浏览器中打开后，弹出aa。</p>
<p>在实践这个简单示例的时候，需要注意requireJS的<code>baseUrl</code> 设置：</p>
<p><strong>细节之处</strong></p>
<p>1、RequireJS 加载文件/模块都是相对于baseUrl的</p>
<p>2、baseUrl默认使用data-main属性指定的脚本目录</p>
<pre><code>//baseUrl=&quot;assets/&quot;
&lt;script data-main=&quot;assets/main&quot; src=&quot;assets/vendor/require/require.js&quot;&gt;&lt;/script&gt;

//baseUrl=&quot;assets/js/&quot;
&lt;script data-main=&quot;assets/js/main&quot; src=&quot;assets/vendor/require/require.js&quot;&gt;&lt;/script&gt;
</code></pre><p>3、如果没有data-main属性，那么baseUrl等于该html所在的目录</p>
<p>4、baseUrl可以通过RequireJS config进行设置</p>
<p>5、优先级：config &gt; data-main属性 -&gt; html目录</p>
<p>6、RequireJS加载JS时，可以不写js后缀</p>
<p>7、加载文件/模块时，会自动包含前缀http或者https</p>
<p>8、可以在config中使用paths配置，指定相对目录</p>
<pre><code>//这是我的项目目录结构
www/
  index.html
  assets/
    js/
      a.js
    vendor/
      require/
        require.js
    main.js

//配置文件
requirejs.config({
    baseUrl: &apos;assets&apos;,
    paths: {
        js: &apos;js&apos;
    }
});

//可以直接使用js来映射目录，进行文件引用
requirejs([&apos;js/a&apos;], function(a){
  alert(a.test);
}); 
</code></pre><p><strong>注意：</strong>一定要保证使用paths的时候，一定要放在config之后。通过在配置paths时，如果是直接子目录，不需要斜杠。</p>
<p>9、data-main指定的文件，是requirejs的入口点</p>
<h3 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h3><p>在requirejs中，我们可以采用多种方式定义模块，如下：</p>
<p>1、简单的键值对:</p>
<pre><code>define({
  color: &apos;black&apos;,
  size: &apos;18px&apos;
});
</code></pre><p>2、定义函数：</p>
<pre><code>define(function(){
  return {
    color: &apos;black&apos;,
    size: &apos;18px&apos;
  };
});
</code></pre><p>3、定义函数并使用依赖：</p>
<pre><code>define([&apos;a&apos;, &apos;b&apos;], function(a, b){
  return {
    color: &apos;black&apos;,
    size: &apos;18px&apos;,
    alert: function(){
      return a.num + b.num;
    }
  };
});
</code></pre><p>4、将函数定义为模块：</p>
<pre><code>define([&apos;a&apos;, &apos;b&apos;], function(a, b){
  return function(title){
    return title ? title : a.title + b.title;
  };
});
</code></pre><p>5、通过简单的CommonJs包装器定义模块：</p>
<pre><code>define(function(require, exports, module){
  var a = require(&apos;a&apos;),
      b = require(&apos;b&apos;);
  return function(){}; 
});
</code></pre><p>6、定义包含名字的模块：</p>
<pre><code>define(&apos;moduleA&apos;, [&apos;a&apos;, &apos;b&apos;], function(a, b){
  //do something...
});
</code></pre><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><pre><code>requirejs.config({
  baseUrl: &apos;&apos;, //基地址
  paths: { //路径映射
    &apos;js&apos;: &apos;../js&apos;
  },
  bundles: { //
    primary: [&apos;main&apos;, &apos;util&apos;],
    secondary: [&apos;text!secondary.html&apos;]
  },
  shim: { //从非模块的js中，导出模块
    jquery: {
      deps: [],
      exports: &apos;jQuery&apos;
    }
  },
  map: { //方便版本控制
    &apos;some/newmodule&apos;: {
      &apos;foo&apos;: &apos;foo1.2&apos;
    },
    &apos;some/oldmodule&apos;: {
      &apos;foo&apos;: &apos;foo1.0&apos;
    }
  },
  config: { //配置module
    bar: {
      size: &apos;large&apos;
    }
  },
  packages: [], //需要从CommonJS packages中加载的模块
  nodeIdCompat: true,
  waitSeconds: 15, // 加载脚本超时时间（秒）
  context: &apos;&apos;, //设置上下文名称
  deps:[], //需要加载的依赖
  callback: function(){}, //当deps加载完时执行
  enforceDefine: false, // 是否当脚本没有define时抛出错误
  xhtml: false, //是否使用xhtml创建脚本元素
  urlArgs: &apos;test=&apos; + (new Date()).getTime(), //配置url参数
  scriptType: &apos;text/javascript&apos;, //设置加载脚本的脚本类型
  skipDataMain: false //是否使用data-main属性
});
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[再说Promise]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E5%86%8D%E8%AF%B4Promise/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>在JavaScript，由于天生的回调机制，当业务逻辑嵌套较多的时候，就很容易产生回调地狱。</p>
<p>为了避免回调地狱，在JS中可以使用 <code>co</code>, <code>Promise</code>, <code>async await</code> 等等方式。</p>
<p>在当前ES6开始流行的情况下，<code>Promise</code> 则是主流，就算是 <code>async await</code> ，也需要和Promise搭配，那我们就来看下 <code>Promise</code> 到底是怎么工作的！</p>
<h2 id="1、原生Promise"><a href="#1、原生Promise" class="headerlink" title="1、原生Promise"></a>1、原生Promise</h2><p>打开Chrome控制台，输入 <code>Promise.</code> 然后可以看到Promise的一些静态方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.accept(); <span class="comment">// 【非标准】等价于Promise.resolve()</span></div><div class="line"><span class="built_in">Promise</span>.all(); <span class="comment">// 同时执行多个Promise，所有Promise都执行完毕（resolve, reject都算）之后，才会调用then方法。</span></div><div class="line"><span class="built_in">Promise</span>.defer(); <span class="comment">// 【非标准】返回一个Deferred对象</span></div><div class="line"><span class="built_in">Promise</span>.race(); <span class="comment">// 通过执行多个Promise，有一个成功就继续下一步。</span></div><div class="line"><span class="built_in">Promise</span>.reject(); <span class="comment">// 返回一个rejected的Promise</span></div><div class="line"><span class="built_in">Promise</span>.resolve(); <span class="comment">// 返回一个resolved的Promise</span></div></pre></td></tr></table></figure>
<p>通过 <code>let p = Promise.defer().promise</code> 之后，使用 <code>p.</code>，可以看到 <code>Promise</code> 实例可用的一些方法（实际是原型方法）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">catch</span>(); <span class="comment">// 是onRejected的语法糖，注册onRejected方法。</span></div><div class="line">chain(); <span class="comment">// 【非标准】</span></div><div class="line">then(); <span class="comment">// 注册onFulfilled和onRejected方法。</span></div></pre></td></tr></table></figure>
<p>至于具体如何用，看 <a href="http://liubin.org/promises-book" target="_blank" rel="external">Promise Book</a>。</p>
<h2 id="2、Promise原理浅析"><a href="#2、Promise原理浅析" class="headerlink" title="2、Promise原理浅析"></a>2、Promise原理浅析</h2><p>光用还不够，在这里我们来分解一下Promise背后的原理。</p>
<p>要去分析Promise的原理，首先就不得不提到两个规范。一个是 Promise A+ 规范（ES6 Promise的前身，是一个社区规范）和 ECMA Promise规范（标准化之后的规范）。它们约定了Promise的规则。</p>
<p>在这里，我们就不按部就班的来对应该问题，我们就通过TDD的方式来实现一个Promise-polyfills。</p>
<p>测试工具采用了 <a href="">ava</a>。</p>
<p>为了避免浏览器干扰，我们把Promise取别名为Promise2。目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Promise2.js</div><div class="line">test/</div><div class="line">  promise.test.js</div></pre></td></tr></table></figure>
<p>我们先完成第一个测试，验证Promise应该有的静态方法和原型方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//promise.test.js</div><div class="line"></div><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">let test = require(&apos;ava&apos;);</div><div class="line">let Promise2 = require(&apos;./../Promise2&apos;);</div><div class="line"></div><div class="line">// Promise2 is a function. </div><div class="line">test(t =&gt; t.is(&apos;function&apos;, typeof Promise2));</div><div class="line"></div><div class="line">// Promise2 has static function resolve</div><div class="line">test(t =&gt; t.is(&apos;function&apos;, typeof Promise2.resolve));</div><div class="line"></div><div class="line">// Promise2 has static function reject</div><div class="line">test(t =&gt; t.is(&apos;function&apos;, typeof Promise2.reject));</div><div class="line"></div><div class="line">// Promise2 has static function race</div><div class="line">test(t =&gt; t.is(&apos;function&apos;, typeof Promise2.race));</div><div class="line"></div><div class="line">// Promise2 has static function all</div><div class="line">test(t =&gt; t.is(&apos;function&apos;, typeof Promise2.all));</div><div class="line"></div><div class="line">let p1 = new Promise2();</div><div class="line"></div><div class="line">// new Promise2 is a Promise2 instance</div><div class="line">test(t =&gt; t.is(true, p1 instanceof Promise2));</div><div class="line"></div><div class="line">// Promise2 instace muse has function catch</div><div class="line">test(t =&gt; t.is(&apos;function&apos;, typeof p1.catch));</div><div class="line"></div><div class="line">// Promise2 instace muse has function then</div><div class="line">test(t =&gt; t.is(&apos;function&apos;,  typeof p1.then));</div></pre></td></tr></table></figure>
<p>要让这些测试用例通过，编写了如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise2</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> all() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> race() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> reject() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> resolve() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  then() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">catch</span>() &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = Promise2;</div></pre></td></tr></table></figure>
<p>至此，我们的一个程序基架已经ok了。接下来我们一步步的来继续完善测试和实现代码。</p>
<p>接下来，我们看一下Promise的常规用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'before resolve'</span>);</div><div class="line">    resolve();</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'after resolve'</span>);</div><div class="line">  &#125;, <span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">MDN Promise</a></li>
<li><a href="http://liubin.org/promises-book" target="_blank" rel="external">Promise Book</a></li>
<li><a href="https://promisesaplus.com/" target="_blank" rel="external">Promise A+ 规范</a></li>
<li><a href="https://tc39.github.io/ecma262/#sec-promise-objects" target="_blank" rel="external">ECMA262 Promise</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[如何用Node编写命令行工具]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E5%A6%82%E4%BD%95%E7%94%A8Node%E7%BC%96%E5%86%99%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h1 id="0、-命令行工具"><a href="#0、-命令行工具" class="headerlink" title="0、 命令行工具"></a>0、 命令行工具</h1><p>当全局安装模块之后，我们可以在控制台下执行指定的命令来运行操作，如果npm一样。我把这样的模块称之为命令行工具模块（如理解有偏颇，欢迎指正）</p>
<h1 id="1、用Node编写命令行工具"><a href="#1、用Node编写命令行工具" class="headerlink" title="1、用Node编写命令行工具"></a>1、用Node编写命令行工具</h1><p>在Node中，我们很容易就能实现一个命令行工具。通过借助npm install -g安装，就能直接调用命令行工具了。</p>
<h3 id="1-1、创建项目"><a href="#1-1、创建项目" class="headerlink" title="1.1、创建项目"></a>1.1、创建项目</h3><p>首先，命令行也是一个node程序，那么首先通过npm init初始化一个Node项目。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// package.json</div><div class="line">&#123;</div><div class="line">  "name": "newkit-cli",</div><div class="line">  "version": "0.0.1",</div><div class="line">  "description": "Newkit Management Tools",</div><div class="line">  "main": "index.js",</div><div class="line">  "scripts": &#123;</div><div class="line">    "test": "test"</div><div class="line">  &#125;,</div><div class="line">  "author": "Jay",</div><div class="line">  "license": "MIT"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-2、创建可执行代码"><a href="#1-2、创建可执行代码" class="headerlink" title="1.2、创建可执行代码"></a>1.2、创建可执行代码</h3><p>在项目目录下，创建src目录，并在其中创建index.js文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//src/index.js文件内容</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'cli'</span>);</div></pre></td></tr></table></figure>
<p>通过<code>node src/index</code>就可以执行到段代码了，那如何用自定义命令来执行呢？ </p>
<h3 id="1-3、在package-json中配置自定义命令"><a href="#1-3、在package-json中配置自定义命令" class="headerlink" title="1.3、在package.json中配置自定义命令"></a>1.3、在package.json中配置自定义命令</h3><p>在package.json中可以配置bin节点，当全局安装的时候，该节点内容将会被注册为自定义命令。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"newkit-cli"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"Newkit Management Tools"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"bin"</span>: &#123;</div><div class="line">    <span class="attr">"nc"</span>: <span class="string">"./src/index.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"test"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"Jay"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="1-4、测试命令"><a href="#1-4、测试命令" class="headerlink" title="1.4、测试命令"></a>1.4、测试命令</h3><p>假设我们已经写好了命令行工具了，那我们应该如何测试呢？</p>
<p>我们可以通过<code>npm install -g</code>将当前模块安装到全局模块中。然后再执行nc命令来测试。</p>
<p>通过如上步骤，我们发现并不能执行我们的index.js，这是为什么呢？</p>
<p>因为我们并没有指定用什么工具来执行这条命令，所以应该怎么做呢？打开index.js，然后加上一句代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node </span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'cli'</span>);</div></pre></td></tr></table></figure>
<p>这句代码什么意思呢？这句代码告诉系统，使用node来启动我们的命令。此时再安装，然后执行nc，你会发现，控制台会打印出cli。也就是我们index中代码的执行结果。</p>
<p>至此，我们的一个最简单的命令行执行就开发成功了。</p>
<h1 id="2、处理命令行参数"><a href="#2、处理命令行参数" class="headerlink" title="2、处理命令行参数"></a>2、处理命令行参数</h1><p>单纯的执行一个命令，似乎不满足我们的实际运用场景，大部分时候我们会使用<code>nc version</code>、<code>nc xxx -a --b</code>之类的方式来使用命令。那应该如何获取这些命令呢？</p>
<h3 id="2-1、使用process来获取控制台参数"><a href="#2-1、使用process来获取控制台参数" class="headerlink" title="2.1、使用process来获取控制台参数"></a>2.1、使用process来获取控制台参数</h3><p>将index.js代码修改一下，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node </span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'cli'</span>);</div><div class="line"><span class="built_in">console</span>.log(process.argv);</div></pre></td></tr></table></figure></p>
<p>安装之后，再次执行<code>nc xxx -a --b true</code>,会看到如下的输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cli</div><div class="line">[ &apos;C:\\Program Files\\nodejs\\node.exe&apos;,</div><div class="line">  &apos;C:\\Users\\jh3r\\AppData\\Roaming\\npm\\node_modules\\newkit-cli\\src\\index.js&apos;,</div><div class="line">  &apos;xxx&apos;,</div><div class="line">  &apos;-a&apos;,</div><div class="line">  &apos;--b&apos;,</div><div class="line">  &apos;true&apos; ]</div></pre></td></tr></table></figure>
<p>从结果可以看到，我们所使用所有参数都会传递到程序中去，这个时候，我们就可以解析这些参数，来实现不同的输出了。</p>
<h3 id="2-2、使用Commander来开发命令行工具"><a href="#2-2、使用Commander来开发命令行工具" class="headerlink" title="2.2、使用Commander来开发命令行工具"></a>2.2、使用Commander来开发命令行工具</h3><p>从上面的输出也可以看到，我们要手动去解析参数的话，还是一个比较复杂的操作。既然身处Node社区，那么完全使用社区流行的包来帮我们简化代码。</p>
<p>Commander 是一款重量轻，表现力和强大的命令行框架。提供了用户命令行输入和参数解析强大功能。</p>
<p>Commander的方便之处在于：自记录代码、自动生成帮助、合并短参数（“ABC”==“-A-B-C”）、默认选项、强制选项​​、命令解析、提示符</p>
<p>我们可以在<a href="https://github.com/tj/commander.js/" target="_blank" rel="external">https://github.com/tj/commander.js/</a>找到Commander。</p>
<p>继续改造index.js文件，修改内容为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node </span></div><div class="line"><span class="keyword">var</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</div><div class="line"></div><div class="line">program</div><div class="line">  .version(<span class="string">'0.0.2'</span>) <span class="comment">//提供命令行工具的版本号，可以通过-V获取到</span></div><div class="line">  <span class="comment">// 使用option方法注册命令</span></div><div class="line">  .option(<span class="string">'-i, --init [type]'</span>, <span class="string">'Initial Newkit in current folder'</span>, (type) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'process'</span>, type, program.init);</div><div class="line">  &#125;, <span class="literal">true</span>)</div><div class="line">  .option(<span class="string">'-u| --update &lt;module&gt;'</span>, <span class="string">'Update module.'</span>, (moduleName) =&gt; &#123;</div><div class="line">    <span class="comment">//使用program.update 来获取默认值，如果有命令行参数，那么会作为回调函数的参数</span></div><div class="line">    <span class="built_in">console</span>.log(moduleName, program.update);</div><div class="line">  &#125;, <span class="string">'app-common'</span>)</div><div class="line"></div><div class="line">  .parse(process.argv);</div></pre></td></tr></table></figure></p>
<p><strong>注意：以上代码有较多注意的点</strong></p>
<ol>
<li>option方法参数是四个，第一个是命令，第二个是描述，第三个是回调，第四个是命令的默认值</li>
<li>第一个参数中的-i和-u是短命令，–init和–update是长命令。长短命令之间的分隔符可以是<code>|</code>和<code>,</code>，如果使用逗号分隔，那么可以通过program.init来获取默认值。</li>
<li>在代码中我们在命令中，注意到有<code>[type]</code>和<code>&lt;module&gt;</code>两种，前者是可选参数，后者的必选参数。</li>
</ol>
<p>除此之外，还可以使用command方法来实现Git风格的子命令，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">program</div><div class="line">  .command(<span class="string">'update &lt;module&gt;'</span>)</div><div class="line">  .action(<span class="function">(<span class="params"><span class="built_in">module</span>, options</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">module</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p><em>更多功能，请自行测试</em></p>
<h3 id="2-3、使用yargs来开发命令行工具"><a href="#2-3、使用yargs来开发命令行工具" class="headerlink" title="2.3、使用yargs来开发命令行工具"></a>2.3、使用yargs来开发命令行工具</h3><p>具体代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env node </span></div><div class="line"><span class="keyword">var</span> argv = <span class="built_in">require</span>(<span class="string">'yargs'</span>)</div><div class="line">  .option(<span class="string">'i'</span>, &#123;</div><div class="line">    <span class="attr">alias</span> : <span class="string">'init'</span>,</div><div class="line">    <span class="attr">demand</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">default</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">describe</span>: <span class="string">'Project Init'</span>,</div><div class="line">    <span class="attr">type</span>: <span class="string">'string'</span></div><div class="line">  &#125;)</div><div class="line">  .usage(<span class="string">'Usage: nc init'</span>)</div><div class="line">  .example(<span class="string">'nc init'</span>, <span class="string">'Initial newkit project'</span>)</div><div class="line">  .help(<span class="string">'h'</span>)</div><div class="line">  .alias(<span class="string">'h'</span>, <span class="string">'help'</span>)</div><div class="line">  .epilog(<span class="string">'copyright 2015'</span>)</div><div class="line">  .argv;</div><div class="line"></div><div class="line"><span class="comment">//根据不同的参数来做处理</span></div></pre></td></tr></table></figure>
<p>yargs更多信息请参阅：<a href="https://github.com/yargs/yargs" target="_blank" rel="external">https://github.com/yargs/yargs</a></p>
<h1 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h1><ol>
<li>根据Unix的传统，程序执行成功返回0，否则返回1</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(err)&#123;</div><div class="line">  <span class="keyword">return</span> process.exit(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">process.exit(<span class="number">0</span>);</div></pre></td></tr></table></figure>
<ol>
<li>系统信号</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">process.on(<span class="string">'SIGINT'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Got a SIGINT'</span>);</div><div class="line">  process.exit(<span class="number">0</span>);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//发送系统信号：$ kill -s SIGINT [process_id]</span></div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器内容安全策略解析]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E8%A7%A3%E6%9E%90/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器 Pointer Events]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8%20Pointer%20Events/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Pointer Events是一套触控输入处理规格，支持Pointer Events的浏览器包括了IE和Firefox，最近Chrome也宣布即将支持该处理规则。</p>
<h2 id="PointerEvent"><a href="#PointerEvent" class="headerlink" title="PointerEvent"></a>PointerEvent</h2><p><code>PointEvent</code>对象继承自<code>MouseEvent</code>，使用上也比较类似。</p>
<ol>
<li>mousedown -&gt; pointerdown</li>
<li>mouseenter -&gt; pointerenter</li>
<li>mouseleave -&gt; pointerleave</li>
<li>mousemove -&gt; pointermove</li>
<li>mouseout -&gt; pointerout</li>
<li>mouseover -&gt; pointerover</li>
<li>mouseup -&gt; pointerup</li>
</ol>
<p>PointerEvent提供了多有预期的鼠标事件属性，并添加了通用的附加属性，来帮助您区分输入类型和特点。</p>
<ol>
<li>height</li>
<li>isPrimary</li>
<li>pointerId</li>
<li>pointerType</li>
<li>pressure</li>
<li>tiltX</li>
<li>tiltY</li>
<li>width</li>
</ol>
<p>在现在的JS编码中，推荐使用特性检测（以前是浏览器检测）来编写代码，我们可以用以下代码检测浏览器是否支持该特性：</p>
<pre><code>if (window.PointerEvent) {
  // Pointer events are supported.
}
</code></pre><p>那接下来看一下具体的事件代码：</p>
<pre><code>window.addEventListener(&apos;pointerdown&apos;, pointerdownHandler, false);

function pointerdownHandler (evt) {
    console.log(evt)
}
</code></pre><p>通过输出，可以更直观的看到PointerEvent的各个属性。</p>
<p>通过浏览器的navigator对象的maxTouthPoints，可以拿到当前设备支持的最大多点触控的数量：</p>
<pre><code>navigator.maxTouchPoints
</code></pre><p>从win8开始，IE提供了默认的触摸事件处理，如果想全部由js代码控制触摸事件，那么可以使用：</p>
<pre><code>touch-action: none;
</code></pre><p>来禁用默认值。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://msdn.microsoft.com/en-us/library/ie/dn433244(v=vs.85" target="_blank" rel="external">https://msdn.microsoft.com/en-us/library/ie/dn433244(v=vs.85).aspx</a>.aspx)</p>
<p><a href="http://www.w3.org/TR/pointerevents/" target="_blank" rel="external">http://www.w3.org/TR/pointerevents/</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器历史history对象]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%86%E5%8F%B2history%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h1 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h1><p>在单页应用时代，有一个非常重要的概念，那就是前端路由。那它到底是怎么实现的呢？</p>
<p>路由一般有如下两种方式：</p>
<ol>
<li>HASH路由（控制浏览器hash变化）</li>
<li>URL路由（URL直接变化）</li>
</ol>
<p><strong>本文主要关注URL变化这种路由实现。</strong> </p>
<h1 id="1、History对象"><a href="#1、History对象" class="headerlink" title="1、History对象"></a>1、History对象</h1><p>当我们浏览网页时，我们会点击其中的一个链接进行跳转，其中一部分是直接替换掉当前页面，此时就产生了历史记录。</p>
<p>在浏览器中，历史记录的存储我们无法直接控制，但是对于历史记录的使用，是可以通过 <code>window.history</code> 对象操作的。</p>
<p>比如我们可以查看当前访问了多少个页面：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.history.length);</div></pre></td></tr></table></figure>
<p>可以后退和前进：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.history.back();</div><div class="line"><span class="built_in">window</span>.history.forward();</div></pre></td></tr></table></figure>
<p>也可以以当前页面为基准，跳转到前N个或者后N个页面：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.history.go(<span class="number">2</span>); <span class="comment">// 前进两页</span></div><div class="line"><span class="built_in">window</span>.history.go(<span class="number">-1</span>); <span class="comment">//后退1页</span></div></pre></td></tr></table></figure>
<p><strong>注意：如果前进或者后退的索引上没有相对应的历史记录，那么将不会跳转，如 go(555)</strong></p>
<h1 id="2、HTML5-history"><a href="#2、HTML5-history" class="headerlink" title="2、HTML5 history"></a>2、HTML5 history</h1><p>在HTML5， <code>history</code> 有了新的方法，允许我们逐条的添加和修改历史记录条目。</p>
<p>这些方法协同 <code>window.onpopstate</code> 事件，就构成了我们URL路由的基石。</p>
<p>以下，我们就来看看有哪些新增的方法。</p>
<h2 id="2-1、pushState"><a href="#2-1、pushState" class="headerlink" title="2.1、pushState()"></a>2.1、pushState()</h2><p>使用该方法，可以推送一个状态到历史记录中去。函数使用方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.history.pushState(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;, <span class="string">''</span>, <span class="string">'/abc.html'</span>);</div></pre></td></tr></table></figure>
<p>其中参数一是一个JS对象，关联在历史条目中；<br>参数二是标题字符串；（当前会被忽略，建议传递’’）<br>参数三是可选的页面地址（改变URL）</p>
<p><strong>注意：参数三是一个字符串，但不能带有http://， 可以直接写 xx.html，也可以传入 /xx.html。</strong></p>
<p><strong>注意2：虽然看起来效果有点类似 <code>window.location = &#39;#abc&#39;</code> ，但pushState()方法永远不会触发hashchange事件，即便新的地址只变更了hash</strong></p>
<h2 id="2-2、replaceState"><a href="#2-2、replaceState" class="headerlink" title="2.2、replaceState()"></a>2.2、replaceState()</h2><p><code>replaceState</code> 和 <code>pushState</code> 非常类似，前者是修改，后者是新增。</p>
<h2 id="2-3、history-state-属性"><a href="#2-3、history-state-属性" class="headerlink" title="2.3、history.state 属性"></a>2.3、history.state 属性</h2><p>当我们正处在一个 <code>state</code> 状态下的时候，我们可以通过 <code>history.state</code> 来查看当前的 <code>state</code> 对象。</p>
<p>如上例中的 <code>{a:1, b:2}</code></p>
<h2 id="2-4、window-onpopstate-事件"><a href="#2-4、window-onpopstate-事件" class="headerlink" title="2.4、window.onpopstate 事件"></a>2.4、window.onpopstate 事件</h2><p>如果仅仅只能推送状态到 <code>history</code> 中，那我们可实现的操作非常有效。但当结合 <code>onpopstate</code> 事件，我们就能够实现一个可控制URL变化的前端路由器。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(evt);</div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.history.pushState(&#123;<span class="attr">key</span>: <span class="string">'k1'</span>&#125;, <span class="string">''</span>, <span class="string">'abc.html'</span>);</div></pre></td></tr></table></figure>
<p>先执行以上代码，我们发现事件并没有触发，此时点击浏览器后退按钮，可以发现事件被触发。</p>
<p><strong>注意：调用history.pushState()或者history.replaceState()不会触发popstate事件. popstate事件只会在其他浏览器操作时触发, 比如点击后退按钮(或者在JavaScript中调用history.back()方法)。</strong></p>
<p><strong>注意2：当网页加载时,各浏览器对popstate事件是否触发有不同的表现,Chrome 和 Safari会触发popstate事件, 而Firefox不会。</strong></p>
<p><strong>注意3：就算是进入非state页面（不是pushState或者replaceState作用过的），也会触发popstate事件。</strong></p>
<h1 id="3、URL-Router"><a href="#3、URL-Router" class="headerlink" title="3、URL-Router"></a>3、URL-Router</h1><p>有了之前的这些基础，我们来看看，实现一个简单的前端路由需要多少代码？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">;<span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">let</span> urlRouter = &#123;&#125;;</div><div class="line">  <span class="keyword">let</span> container;</div><div class="line">  <span class="keyword">let</span> routeMapCache;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> getPage = <span class="function">(<span class="params">url, callback</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    xhr.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</div><div class="line">    xhr.setRequestHeader(<span class="string">'Accept'</span>, <span class="string">'text/plain'</span>);</div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (xhr.readyState === XMLHttpRequest.DONE) &#123;</div><div class="line">        callback &amp;&amp; callback(xhr.responseText);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    xhr.send();</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  urlRouter.init = <span class="function">(<span class="params">routeMap, options</span>) =&gt;</span> &#123;</div><div class="line">    routeMapCache = routeMap;</div><div class="line">    <span class="keyword">if</span> (options.container <span class="keyword">instanceof</span> HTMLElement) &#123;</div><div class="line">      container = options.container;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      container = <span class="built_in">document</span>.querySelector(options.container);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 处理状态变化</span></div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">      <span class="keyword">let</span> stateObj = history.state || evt.state;</div><div class="line">      <span class="built_in">console</span>.log(evt, stateObj);</div><div class="line">      <span class="keyword">if</span> (stateObj) &#123;</div><div class="line">        urlRouter.go(stateObj.state);</div><div class="line">      &#125;</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 初始化时，处理默认状态</span></div><div class="line">    <span class="keyword">let</span> path = <span class="built_in">window</span>.location.pathname;</div><div class="line">    <span class="keyword">let</span> stateKeys = <span class="built_in">Object</span>.keys(routeMapCache);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stateKeys.length; i++) &#123;</div><div class="line">      <span class="keyword">let</span> stateObj = routeMapCache[stateKeys[i]];</div><div class="line">      <span class="keyword">if</span> (stateObj.url === path) &#123;</div><div class="line">        urlRouter.go(stateKeys[i]);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  urlRouter.go = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> stateObj = routeMapCache[state];</div><div class="line">    <span class="keyword">if</span> (!stateObj) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'state not found.'</span>);</div><div class="line">    &#125;</div><div class="line">    stateObj.state = state;</div><div class="line">    <span class="built_in">window</span>.history.pushState(stateObj, <span class="string">''</span>, stateObj.url);</div><div class="line">    getPage(stateObj.path, (content) =&gt; &#123;</div><div class="line">      container.innerHTML = content;</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="built_in">window</span>.urlRouter = urlRouter;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>如何使用？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> routeMap = &#123;</div><div class="line">  <span class="string">'page1'</span>: &#123; <span class="attr">url</span>: <span class="string">'/page1'</span>, <span class="attr">path</span>: <span class="string">'page1.html'</span> &#125;,</div><div class="line">  <span class="string">'page2'</span>: &#123; <span class="attr">url</span>: <span class="string">'/page2'</span>, <span class="attr">path</span>: <span class="string">'page2.html'</span> &#125;,</div><div class="line">  <span class="string">'page3'</span>: &#123; <span class="attr">url</span>: <span class="string">'/page3'</span>, <span class="attr">path</span>: <span class="string">'page3.html'</span> &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 初始化路由</span></div><div class="line"><span class="built_in">window</span>.urlRouter.init(routeMap, &#123; <span class="attr">container</span>: <span class="string">'#page-content'</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">//路由跳转</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> links = [].slice.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">'#page-menu li a'</span>));</div><div class="line">links.forEach(<span class="function"><span class="params">link</span> =&gt;</span> &#123;</div><div class="line">  link.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">    evt.stopPropagation();</div><div class="line">    evt.preventDefault();</div><div class="line">    <span class="built_in">window</span>.urlRouter.go(evt.target.getAttribute(<span class="string">'href'</span>));</div><div class="line">  &#125;, <span class="literal">false</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>具体Demo地址：<a href="https://github.com/hstarorg/HstarDemoProject/tree/master/Javascript_demo/url-router" target="_blank" rel="external">URL-Router Demo</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器关闭事件分析]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%97%AD%E4%BA%8B%E4%BB%B6%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h1><p>很多时候，我们可能会遇到这样一类需求：</p>
<ol>
<li>浏览器关闭时，弹出一个新页面</li>
<li>浏览器关闭时，发送统计信息（如页面浏览时长）</li>
<li>浏览器关闭时，让用户二次确认</li>
</ol>
<p>这个时候，我们就需要考虑如何判断浏览器关闭，如何阻止浏览器关闭，如何在浏览器关闭时，还是执行特定操作。</p>
<h1 id="1、浏览器关闭与刷新判断"><a href="#1、浏览器关闭与刷新判断" class="headerlink" title="1、浏览器关闭与刷新判断"></a>1、浏览器关闭与刷新判断</h1><p>对于关闭与刷新判断，一般有以下几种做法：</p>
<p>首先基础都是通过监听 <code>onbeforeunload</code>、<code>onunload</code> 等相关事件。</p>
<p>然后判断刷新与关闭：</p>
<ol>
<li>判断鼠标坐标</li>
<li>判断键盘操作</li>
<li>判断事件间隔时长</li>
</ol>
<p>其中，1和2一般是合起来使用。但也并不保险。关闭和刷新的快捷操作是可以自定义的。而且实现逻辑复杂。</p>
<p><strong>在这里，我就重点来测试线通过判断事件间隔的方式来处理关闭与刷新的判断。</strong> </p>
<p>我们编写了如下测试代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'onbeforeunload'</span>, <span class="built_in">Date</span>.now());</div><div class="line">  <span class="keyword">debugger</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'onunload'</span>, <span class="built_in">Date</span>.now());</div><div class="line">  <span class="keyword">debugger</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分别在浏览器上刷新和关闭，得到如下结果：</p>
<table>
<thead>
<tr>
<th>浏览器</th>
<th style="text-align:center">关闭/刷新</th>
<th style="text-align:center">onbeforeunload</th>
<th style="text-align:center">onunload</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chrome</td>
<td style="text-align:center">关闭</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
</tr>
<tr>
<td>Chrome</td>
<td style="text-align:center">刷新</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
</tr>
<tr>
<td>Firefox</td>
<td style="text-align:center">关闭</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
</tr>
<tr>
<td>Firefox</td>
<td style="text-align:center">刷洗</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
</tr>
<tr>
<td>Edge</td>
<td style="text-align:center">关闭</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[]</td>
</tr>
<tr>
<td>Edge</td>
<td style="text-align:center">刷新</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
</tr>
<tr>
<td>IE11</td>
<td style="text-align:center">关闭</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
</tr>
<tr>
<td>IE11</td>
<td style="text-align:center">刷新</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
</tr>
</tbody>
</table>
<p>Edge关闭时，unload是否触发，还并不太确定（不太好验证）。</p>
<p>接下来，我们来验证两个时间的触发时间，测试代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'onbeforeunload'</span>, <span class="built_in">Date</span>.now());</div><div class="line">  <span class="keyword">if</span> (navigator.sendBeacon) &#123;</div><div class="line">    navigator.sendBeacon(<span class="string">'http://localhost:9999/?t=onbeforeunload'</span>, <span class="string">'onbeforeunload'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">window</span>.start = <span class="built_in">Date</span>.now();</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'onunload'</span>, <span class="built_in">Date</span>.now());</div><div class="line">  <span class="keyword">if</span> (navigator.sendBeacon) &#123;</div><div class="line">    navigator.sendBeacon(<span class="string">`http://localhost:9999/?t=onunload&amp;ts=<span class="subst">$&#123;<span class="built_in">Date</span>.now() - <span class="built_in">window</span>.start&#125;</span>`</span>, <span class="string">'onunload'</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">window</span>.open(<span class="string">'http://10.16.85.170:8000/'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 <code>navigator.sendBeacon</code> 将间隔时间发送到后台进行查看。遗憾的是，IE和Edge并不支持该方法。</p>
<p>测试得出如下表格：</p>
<table>
<thead>
<tr>
<th>浏览器</th>
<th style="text-align:center">关闭/刷新</th>
<th style="text-align:center">onbeforeunload</th>
<th style="text-align:center">onunload</th>
<th style="text-align:center">时间间隔</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chrome52</td>
<td style="text-align:center">关闭</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">&lt; 5ms</td>
</tr>
<tr>
<td>Chrome52</td>
<td style="text-align:center">刷新</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">&gt; 20ms</td>
</tr>
<tr>
<td>Firefox46</td>
<td style="text-align:center">关闭</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">&gt; 200ms</td>
</tr>
<tr>
<td>Firefox46</td>
<td style="text-align:center">刷洗</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">10~100ms</td>
</tr>
<tr>
<td>Edge13</td>
<td style="text-align:center">关闭</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[]</td>
<td style="text-align:center">N/A</td>
</tr>
<tr>
<td>Edge13</td>
<td style="text-align:center">刷新</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">&lt; 5ms</td>
</tr>
<tr>
<td>IE11</td>
<td style="text-align:center">关闭</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">&gt; 10ms</td>
</tr>
<tr>
<td>IE11</td>
<td style="text-align:center">刷新</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">[x]</td>
<td style="text-align:center">&lt; 5ms</td>
</tr>
</tbody>
</table>
<p>根据这个表格，然后在按照自己的需要，就可以选择一个分割点来判断是刷新还是关闭。</p>
<p><strong>当前未发现100%能判断清楚的方法，以上请酌情使用。</strong></p>
<h1 id="2、阻止浏览器关闭"><a href="#2、阻止浏览器关闭" class="headerlink" title="2、阻止浏览器关闭"></a>2、阻止浏览器关闭</h1><p>有一些场景，要求在浏览器关闭的时候，再次弹出一个确认框，那这个又应该如何实现呢？</p>
<p>关闭时询问，是一个比较标准化的处理了，只需要我们对 <code>unbeforeunload</code> 事件的 <code>event</code> 参数设置返回值，即可达到再次确认的效果。实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'beforeunload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</div><div class="line">  evt.returnValue =  <span class="string">'您确定要离开了么？'</span>;</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p><strong>注意：火狐为了避免不必要的弹窗，如果页面没有交互，是不会进行二次确认的，通过不会显示returnValue给用户。相关链接： <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/WindowEventHandlers/onbeforeunload" target="_blank" rel="external">https://developer.mozilla.org/zh-TW/docs/Web/API/WindowEventHandlers/onbeforeunload</a></strong></p>
<h1 id="3、浏览器关闭-刷新时发送统计数据"><a href="#3、浏览器关闭-刷新时发送统计数据" class="headerlink" title="3、浏览器关闭/刷新时发送统计数据"></a>3、浏览器关闭/刷新时发送统计数据</h1><p>很多时候，我们想在浏览器关闭/刷新时发送一些统计数据，之前的话，我们可以采用如下一些做法：</p>
<ol>
<li>在 <code>onbeforeunload</code> 中使用同步Ajax</li>
<li>发送Ajax，然后使用死循环，阻塞一个该事件。</li>
</ol>
<p>这个功能作为一个比较大众化的需求，W3C中也有了一个针对性的草案，那就是浏览器对象的 <code>sendBeacon</code> 方法。</p>
<p>函数签名如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">navigator.sendBeacon(url, data);</div></pre></td></tr></table></figure>
<p>有了这个方法，我们就可以在合适的地方（诸如onbeforeunload）发送我们的统计数据，日志数据等等。</p>
<p><strong>注意：该方法还是草案阶段，当前IE和EDGE暂不可用。</strong></p>
<h1 id="4、相关资料"><a href="#4、相关资料" class="headerlink" title="4、相关资料"></a>4、相关资料</h1><ol>
<li><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/WindowEventHandlers/onbeforeunload" target="_blank" rel="external">MDN WindowEventHandlers.onbeforeunload</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon" target="_blank" rel="external">MDN Navigator.sendBeacon()</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[简单学ES6]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E7%AE%80%E5%8D%95%E5%AD%A6ES6/</url>
      <content type="html"><![CDATA[<p>##前言##<br>随着ES6标准的定稿，众多的特性也趋于稳定，各大浏览器也在逐步实现这些特性，那么对ES6有更多的了解就无可厚非了。</p>
<p>##准备##<br>在学习ES6之前，我们需要有一个环境来测试ES6代码。在这里我推荐使用node的分支io.js。</p>
<ol>
<li><p>如何安装？</p>
<ol>
<li>下载地址：<a href="https://iojs.org/en/index.html" target="_blank" rel="external">https://iojs.org/en/index.html</a>，如果各位小伙伴不习惯英文，可以把url中的en修改为cn。</li>
<li>然后根据自己的操作系统版本，下载合适的安装包（主要指Windows系统）进行安装。</li>
<li>安装过程就不一一赘述了，和一般软件一样。</li>
</ol>
</li>
<li><p>如何验证安装成功？</p>
<ol>
<li>打开cmd，然后输入<code>iojs -v</code>,如果输出一个版本号，那么就代表io.js安装成功。（PS：我现在使用的是v1.2.0）</li>
<li>也可以输入<code>iojs -p process.versions.v8</code>查看iojs所使用的V8（PS：不是V8发动机）的版本。（PS:我这儿显示4.1.0.14）</li>
</ol>
</li>
</ol>
<p>##小窥ES6##<br>在测试ES6代码前，我们可以先看下io.js对ES6的支持：<a href="https://iojs.org/cn/es6.html" target="_blank" rel="external">https://iojs.org/cn/es6.html</a>。</p>
<p><strong>接下来，开始我们的ES6-Class之旅：</strong></p>
<p>###1、class 基础 ###</p>
<p>大家应该知道，在大部分面向对象的语言中，都有class的说法，那么在早期的Js中，面向对象的实现比较特殊，我们必须要用function来模拟。如：</p>
<pre><code>//ES5及以下
function Point(x, y){
  this.x = x;
  this.y = y;
}
var p1 = new Point(100, 100);
</code></pre><p>然而在ES6中，我们可以直接使用class关键字，如：</p>
<pre><code>//ES6
&apos;use strict&apos; //不能去掉，要不然iojs会提示不认识class。
class Point{
  constructor(x, y){
    this.x = x;
    this.y = y;
  }
}
var p1 = new Point(100, 100);
console.log(p1);
</code></pre><p>将以上代码保存为1.js,那么执行如下命令：<strong><code>iojs --es_staging 1.js</code></strong> 就可以看到”{x:100, y: 100}”这个结果了。（PS:注意要在1.js的目录打开cmd）。</p>
<p>接下来，看一个复杂点的，继承：</p>
<pre><code>//ES6
&apos;use strict&apos;
class Point{
  constructor(x, y){
    this.x = x;
    this.y = y;
  }
}
var p1 = new Point(100, 100);
console.log(p1);

class ColorPoint extends Point{
  constructor(x, y, color){
    super(x, y);
    this.color = color;
  }
}
var cp = new ColorPoint(50, 50, &apos;red&apos;);
console.log(cp);

//输出继承关系
console.log(cp instanceof ColorPoint); //true
console.log(cp instanceof Point);  //true
</code></pre><p>可以看到，和大部分语言的继承都很类似，如果你有其他面向对象语言的基础，那么很容易就能理解。</p>
<p>对Point和ColorPoint进行typeof，结果很明显也能看到是function。</p>
<pre><code>console.log(typeof Point);  // function
console.log(typeof ColorPoint);  // function
</code></pre><p>那如果对class进行函数调用呢？</p>
<pre><code>Point(100, 100); //Error
</code></pre><p>如上，必须通过new调用class，直接使用函数调用则会报错。</p>
<p>再来对比以下代码：</p>
<pre><code>//标准的函数可以先写调用语句，后写申明语句。因为会定义前置
foo();
function foo(){}
//如果是class呢?
new Foo(); //Error,Foo is not defined
class Foo{}
</code></pre><p>如上，如果是定义的class，那么必须要定义语句在前，调用在后。</p>
<p>再来看以下的情形：</p>
<pre><code>function funThatUseBar(){
  new Bar();
}
//funThatUseBar(); //Error,Bar is not defined
class Bar{}
funThatUseBar(); //ok
</code></pre><p>如上，如果先使用了Bar，那么也是会报错的。必须要优先定义class。</p>
<p>附上以上所有的js，会报错的语句，进行了注释。</p>
<pre><code>//ES6
&apos;use strict&apos;
class Point{
  constructor(x, y){
    this.x = x;
    this.y = y;
  }
}
var p1 = new Point(100, 100);
console.log(p1);

class ColorPoint extends Point{
  constructor(x, y, color){
    super(x, y);
    this.color = color;
  }
}
var cp = new ColorPoint(50, 50, &apos;red&apos;);
console.log(cp);

//*********************************************

//输出继承关系
console.log(cp instanceof ColorPoint); //true
console.log(cp instanceof Point);  //true

console.log(typeof Point);  // function
console.log(typeof ColorPoint);  // function

//Point(100, 100); //Error

//************************************
//标准的函数可以先写调用语句，后写申明语句。因为会定义前置
foo();
function foo(){}

//如果是class呢?
//new Foo(); //Error,Foo is not defined
class Foo{}


//*******************************************

function funThatUseBar(){
  new Bar();
}
//funThatUseBar(); //Error,Bar is not defined
class Bar{}
funThatUseBar(); //ok
</code></pre><p>###2、类中的主体</p>
<p>ES6中、class的主体只能包含方法，不能包含数据属性。如果在类中包含变量定义，则会报错。class中的方法有三种类型：构造函数、静态方法、原型方法，如：</p>
<pre><code>class Class1{
  //构造
  constructor(options){

  }

  // 静态方法，静态方法用static修饰
  static staticMethod(){
    return &apos;static method&apos;;
  }

  prototypeMethod(){
    return &apos;prototype method&apos;;
  }
}
</code></pre><p>其中，每个class和class原型的constructor都是相等的，同时class本质也是function</p>
<pre><code>console.log(Class1 === Class1.prototype.constructor) // true
console.log(typeof Class1)  // function
</code></pre><p>然后我们对类中的方法做测试</p>
<pre><code>var p = console.log;
p(typeof Class1.prototype.prototypeMethod); 
Class1.prototype.prototypeMethod() // 原型方法调用方式
p(typeof Class1.staticMethod);  
Class1.staticMethod() //静态方法调用方式
</code></pre><p>Getters 和 Setters 的用法</p>
<pre><code>class Class2{
  get name(){
    return &apos;jay&apos;;
  }
  set name(value){
    console.log(&apos;set name = &apos; + value);
  }
}

var c2 = new Class2();
c2.name = &apos;hu&apos;;  // &quot;set name = hu&quot;
console.log(c2.name); // &quot;jay&quot;
</code></pre><p>当使用了get和set时，那么针对属性的get和set会自动调用class中相关的方法。</p>
<p>贴出所有Js代码：</p>
<pre><code>&apos;use strict&apos;
class Class1{
  //构造
  constructor(options){

  }

  // 静态方法
  static staticMethod(){
    return &apos;static method&apos;;
  }

  prototypeMethod(){
    return &apos;prototype method&apos;;
  }
}

console.log(Class1 === Class1.prototype.constructor);
console.log(typeof Class1);

var p = console.log;
p(typeof Class1.prototype.prototypeMethod);
p(typeof Class1.staticMethod);

class Class2{
  get name(){
    return &apos;jay&apos;;
  }
  set name(value){
    console.log(&apos;set name = &apos; + value);
  }
}

var c2 = new Class2();
c2.name = &apos;hu&apos;;
console.log(c2.name);
</code></pre><p>###3、类的继承</p>
<p>简单的继承关系，如下：</p>
<pre><code>&apos;use strict&apos;
class Class1{
  toString(){
    return &apos;parent class.&apos;;
  }
}

class SubClass extends Class1{
  toString(){
    return &apos;sub class.&apos;;
  }
}

var sc = new SubClass();
console.log(sc.toString()); // &quot;sub class&quot;
</code></pre><p>其中，sc是Class1的实例，也是SubClass的实例：</p>
<pre><code>console.log(sc instanceof Class1); //true
console.log(sc instanceof SubClass); //true
</code></pre><p>如果要调用父类的方法，怎么办呢？</p>
<pre><code>class SubClass2 extends Class1{
  toString(){
    return super.toString();
  }
}

var sc2 = new SubClass2();
console.log(sc2.toString());
</code></pre><p>在继承关系中，子类的原型等于父类：</p>
<pre><code>console.log(Object.getPrototypeOf(SubClass2) === Class1); //true
</code></pre><p>在子类中访问父类构造，使用super即可。</p>
<p>##其他##</p>
<ol>
<li>如果想一览所有的ES6新特性，可以参考<a href="https://github.com/lukehoban/es6features" target="_blank" rel="external">https://github.com/lukehoban/es6features</a></li>
<li>如果想系统的学习ES6，那么推荐<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a></li>
<li>想了解更多Classes in ECMAScript 6，可参考<a href="http://www.2ality.com/2015/02/es6-classes-final.html" target="_blank" rel="external">http://www.2ality.com/2015/02/es6-classes-final.html</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次Bug排查（Spider）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E8%AE%B0%E4%B8%80%E6%AC%A1Bug%E6%8E%92%E6%9F%A5%EF%BC%88Spider%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="0、写在之前"><a href="#0、写在之前" class="headerlink" title="0、写在之前"></a>0、写在之前</h2><h3 id="Spider是什么？"><a href="#Spider是什么？" class="headerlink" title="Spider是什么？"></a>Spider是什么？</h3><p>Spider是基于Express框架结合socket.io（现已切换为ws）和Echarts2实现的即时性能监视工具。整体结构为前后端分离，通过express的static中间件来处理静态请求，Express本身则处理api请求。</p>
<p>用法上，只需要按照指定的格式post数据给Spider，那么当请求Spider展示时，将会自动将数据展示为图表。</p>
<p>项目地址：<a href="http://trgit2/backend_framework/spider" target="_blank" rel="external">http://trgit2/backend_framework/spider</a></p>
<p>展示地址：<a href="http://developer.newegg.org/spider" target="_blank" rel="external">http://developer.newegg.org/spider</a></p>
<h3 id="Spider能做什么？"><a href="#Spider能做什么？" class="headerlink" title="Spider能做什么？"></a>Spider能做什么？</h3><p>Spider可以提供一段时间（最大30分钟）内特定操作的消耗时间统计图（散点图）。大概展示效果如下图：</p>
<p><img src="http://7xit2j.com1.z0.glb.clouddn.com/test1.png" alt="散点图"></p>
<h2 id="1、问题初现"><a href="#1、问题初现" class="headerlink" title="1、问题初现"></a>1、问题初现</h2><p>该项目从15年3月发布，由于用户量较少，一直稳定运行。</p>
<p>近期，MPS团队使用它来监控业务请求各个阶段的耗时情况，用于定位性能问题。此时，问题出现，spider运行一段时间（10~30分钟）后将会消耗大量服务器内存，导致内存不足而崩溃。</p>
<p>此时，用户使用场景：</p>
<ol>
<li>在c#程序中，收集各种类型操作的耗时数据，累计起来。</li>
<li>每隔1s将数据提交到spider后端。</li>
<li>打开监控页面，查看数据（可能会有多个监控端）</li>
</ol>
<p>spider处理过程：</p>
<ol>
<li>接收到请求数据之后，将数据进行处理，并存入内存；</li>
<li>如果发现有监控端运行，那么推送数据给监控端（每次收到请求数据都会触发一次推送）</li>
<li>监控端根据最新的数据绘制图表展示。</li>
</ol>
<h2 id="2、问题分析"><a href="#2、问题分析" class="headerlink" title="2、问题分析"></a>2、问题分析</h2><h3 id="猜想1：Node代码写法问题，导致内存泄露"><a href="#猜想1：Node代码写法问题，导致内存泄露" class="headerlink" title="猜想1：Node代码写法问题，导致内存泄露"></a>猜想1：Node代码写法问题，导致内存泄露</h3><p>因为JS的闭包容易内存泄露，首先怀疑代码写法问题。</p>
<p><strong>验证：</strong>经过仔细排查代码，并对有可能有泄露代码进行改写</p>
<p><strong>结果：</strong>问题未解决，未缓解</p>
<h3 id="猜想2：缓存数据的代码有内存泄露"><a href="#猜想2：缓存数据的代码有内存泄露" class="headerlink" title="猜想2：缓存数据的代码有内存泄露"></a>猜想2：缓存数据的代码有内存泄露</h3><p>由于客户端提交的数据是直接写入内存的，而刚好又是消耗内存，那么开始怀疑缓存数据的代码。</p>
<p><strong>验证：</strong>重写了数据缓存代码（参考正常运行的缓存代码实现）</p>
<p><strong>结果：</strong>问题未解决，未缓解</p>
<p><strong>此时，把最常见的情况都验证了，无解。思绪中断，接着做了哪些事情呢？</strong></p>
<ol>
<li>查找有可能导致JS内存泄露的情况，一一确认。</li>
<li>安装JS的内存分析工具（条件苛刻，未安装成功）。</li>
<li>安装Node程序的监控包，进行大量本地测试（很难复现问题）。</li>
<li>此时陷入困境…</li>
<li>再次想方设法安装内存分析工具，在本地测试，未果（问题很难复现）。</li>
<li>线上测试，问题依旧，根据结果，发现大量字符串占用内存，导致内存不足。</li>
<li>分析代码，查找该字符串初现的位置。</li>
<li>开始新的猜测</li>
</ol>
<p>###猜想3：socket.io内存泄露</p>
<p>从内存分析的结果来看，大量字符串占用了内存，该格式的字符串，是由socket.io分发到客户端的时候产生的。所以怀疑到了socket.io头上。</p>
<p>通过查资料，发现socket.io确实有内存泄露的前科，一度认为这就是原因。</p>
<p><strong>验证1：</strong>升级socket.io到最新的版本</p>
<p><strong>结果1：</strong>有一定的好转，但不明显（坚持的时间稍微久一点，内存偶尔能回收一下）</p>
<p>再次各种查资料，发现有提到强制node使用gc回收，可以处理非托管内存。</p>
<p><strong>验证2：</strong>增加gc回收代码，定时执行</p>
<p><strong>结果2：</strong>基本上看起来无效，和结果1并没有太大区别</p>
<p><strong>此时，有点穷途末路了。问题还在，继续探索</strong></p>
<p><strong>验证3：</strong>考虑到项目本身不大，重新使用了一个新的WebSocket(ws)包来推送数据</p>
<p><strong>结果3：</strong>有明显好转，坚持的时间更长了（一度认为解决了问题）</p>
<p><strong>可是好景不长，较长时间（几小时）后，问题再次出现</strong></p>
<h3 id="猜想4：再度怀疑缓存代码"><a href="#猜想4：再度怀疑缓存代码" class="headerlink" title="猜想4：再度怀疑缓存代码"></a>猜想4：再度怀疑缓存代码</h3><p>此时未直接验证，切换到业界一个比较流行的缓存库(<a href="https://github.com/isaacs/node-lru-cache" target="_blank" rel="external">lru-cache</a>)。</p>
<h3 id="猜想5：每次提交数据都会触发一次推送，推送频率较高，导致数据阻塞"><a href="#猜想5：每次提交数据都会触发一次推送，推送频率较高，导致数据阻塞" class="headerlink" title="猜想5：每次提交数据都会触发一次推送，推送频率较高，导致数据阻塞"></a>猜想5：每次提交数据都会触发一次推送，推送频率较高，导致数据阻塞</h3><p>这个猜想，算来后面总结的。一开始怀疑过这个问题，想过降低推送频率，但没有实施。经@James分析也猜测问题可能会出现在此处，因为大量字符串占用内存，也满足这个猜想。想到就做：</p>
<p><strong>验证：</strong>将每次收到数据触发推送，修改为间隔一定时间（5s）推送一次。</p>
<p><strong>结果：</strong>内存趋于平稳，及时性在接收范围内。</p>
<p>至此，问题基本上算是解决了。</p>
<h2 id="3、Bug分析"><a href="#3、Bug分析" class="headerlink" title="3、Bug分析"></a>3、Bug分析</h2><p>此次问题，是由于服务端推送数据量较大，而且频率较高，上次推送未完成，就触发了下一次推送。导致消息阻塞，越积越多，所以就耗尽内存而亡。</p>
<h2 id="4、后续"><a href="#4、后续" class="headerlink" title="4、后续"></a>4、后续</h2><p>之后，spider运行一天多之后死掉过一次，但没有看到具体原因。重启之后，稳定运行至今。暂时性怀疑中途死掉的一次为意外（或者瞬时流量大增）</p>
<h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>从发现该问题，到解决该问题，耗时大概在一周。虽然期间还处理了其他任务，但整体来说解决这个问题还是消耗了很长的时间。</p>
<p><strong>究其原因：</strong></p>
<ol>
<li>对TCP底层传输数据不太熟悉</li>
<li>没有处理大量数据高频率推送的经验</li>
<li>发布时，只对程序进行了简单的本地测试，没有进行压力测试。</li>
</ol>
<p><strong>学到了什么：</strong></p>
<ol>
<li>对代码负责，以更严谨的态度来对待，减少出问题</li>
<li>对WebSocket的负载和相关设计有了更深刻的理解</li>
<li>多做一些测试，更稳定的保持代码质量</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[说说如何部署node程序]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%E8%AF%B4%E8%AF%B4%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2node%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>Node作为时下流行的服务端运行时，我们就不得不接触另外一个方面的内容，那就是部署。此文就来说一下node的部署问题。</p>
<h2 id="1、开发时部署"><a href="#1、开发时部署" class="headerlink" title="1、开发时部署"></a>1、开发时部署</h2><p>在开发阶段，我们可以随意部署，直接通过 <code>node xxx.js</code> 就能很方便的启动项目。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这种方式有一个弊端，每次代码变更之后，我们需要手动去重启。</div><div class="line">这个时候，我们可以借助一些第三方工具来实现监控代码变更。</div><div class="line">如： gulp-develop-server、nodeman、node-supervisor等等。</div></pre></td></tr></table></figure>
<h2 id="2、上线时如何部署？"><a href="#2、上线时如何部署？" class="headerlink" title="2、上线时如何部署？"></a>2、上线时如何部署？</h2><h3 id="2-1、原始做法"><a href="#2-1、原始做法" class="headerlink" title="2.1、原始做法"></a>2.1、原始做法</h3><p>既然开发时，可以用 <code>node xxx.js</code>，那上线时也一样。妥妥的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">弊端：会启动一个黑窗口，不能关闭，登录不能被注销</div><div class="line">``` </div><div class="line"></div><div class="line">### 2.1、原始做法，升级版</div><div class="line"></div><div class="line">在Windows下，通过 ``start /b node xxx.js`` ，让程序后台运行。</div><div class="line"></div><div class="line">在Linux下，通过 ``node xxx.js &amp;`` 或者 ``nohup node xxx.js &gt; xxx.log &amp;`` 来实现后台运行。</div></pre></td></tr></table></figure>
<p>该方式，避免了阻塞当前控制台，但是其他弊端与2.1一致。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 2.2、使用进程管理器工具</div><div class="line"></div><div class="line">Node社区中，有比较多进程管理工具。如 [forever](https://github.com/foreverjs/forever) , [pm2](https://github.com/Unitech/pm2), [strongloop](https://github.com/strongloop/strongloop) 等等。</div><div class="line"></div><div class="line">我这里推荐 ``pm2``，功能强大，操作简单，监控，自动重启，多进程都能支持。</div><div class="line"></div><div class="line">以下以 ``pm2`` 为例，演示一下部署方式：</div><div class="line"></div><div class="line">通过 ``npm install pm2 -g`` 安装 ``pm2``</div><div class="line"></div><div class="line">通过 ``pm2 start xxx.js`` 启动程序</div><div class="line"></div><div class="line">通过 ``pm2 stop|restart|delete`` 来停止，重启，删除程序。</div><div class="line"></div><div class="line">通过 ``pm2 list`` 可以查看部署的程序。</div><div class="line"></div><div class="line">更多操作，请参考：[http://pm2.keymetrics.io/](http://pm2.keymetrics.io/)</div></pre></td></tr></table></figure></p>
<p>这种部署方式，还有一个问题，服务器重启后，无法自动启动。<br>```</p>
<h3 id="2-3、使用进程管理器工具，升级版"><a href="#2-3、使用进程管理器工具，升级版" class="headerlink" title="2.3、使用进程管理器工具，升级版"></a>2.3、使用进程管理器工具，升级版</h3><p>在Linux上，通过 <code>pm2 startup [platform]</code> 就能默认生成一个开机启动项。</p>
<p>如果是Windows，我们可以通过 <a href="https://www.npmjs.com/package/pm2-windows-service" target="_blank" rel="external">pm2-windows-service</a> 或者是 <a href="https://www.npmjs.com/package/pm2-windows-startup" target="_blank" rel="external">pm2-windows-startup</a> 来把 <code>pm2</code> 做成Windows服务。</p>
<p>了解更多：<a href="http://pm2.keymetrics.io/docs/usage/startup/" target="_blank" rel="external">http://pm2.keymetrics.io/docs/usage/startup/</a></p>
<h3 id="2-4、Docker部署"><a href="#2-4、Docker部署" class="headerlink" title="2.4、Docker部署"></a>2.4、Docker部署</h3><p>借助Docker提供的独立环境，以上方式均可以在docker中实现，而且就算直接用 <code>node xxx.js</code> 来启动应用，在docker中也是没问题的。</p>
<p>自动开机启动，则成了docker的问题，而不是部署程序的问题。</p>
<h3 id="2-5、更多部署方式待探索…"><a href="#2-5、更多部署方式待探索…" class="headerlink" title="2.5、更多部署方式待探索…"></a>2.5、更多部署方式待探索…</h3>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript札记：特性总览]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/TypeScript%E6%9C%AD%E8%AE%B0/TypeScript%E6%9C%AD%E8%AE%B0%EF%BC%9A%E7%89%B9%E6%80%A7%E6%80%BB%E8%A7%88/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之糟粕]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/JS%E6%9C%AD%E8%AE%B0/JavaScript%E4%B9%8B%E7%B3%9F%E7%B2%95/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>在上篇《JavaScript之毒瘤》中，列举了一些在JavaScript中难以避免的问题特性。本篇将会展示JavaScript中有问题的特性，但我们很容易就能便面它们。通过这些简单的做法，让JavaScript称为一门更好的语言。</p>
<h2 id="1、"><a href="#1、" class="headerlink" title="1、=="></a>1、==</h2><p>JavaScript有两组相等运算符。 === 和 !==，以及 == 和 !==。 === 和 !== 不会进行类型转换，一般会按照你期望的方式工作。由于JavaScript的类型转换系统相当复杂，如果要确保==和 != 不出错，就必须要牢记转换规则。另外==运算符缺乏传递性。</p>
<pre><code>//关于传递性
if a === b, b === c then a === c;
if a == b, b == c then a 不一定等于 c，破坏了传递性
</code></pre><p><strong>小测验</strong>：</p>
<pre><code>&apos;&apos; == &apos;0&apos;
0 == &apos;&apos;
0 == &apos;0&apos;

false == &apos;false&apos;
false == &apos;0&apos;

false == undefined
false == null
null == undefined

&apos;\t\t\n&apos; == 0
</code></pre><p><strong>总结</strong>：推荐使用===和!==，尽量避免使用==和!=。</p>
<h2 id="2、with语句"><a href="#2、with语句" class="headerlink" title="2、with语句"></a>2、with语句</h2><p>JavaScript提供了一个with语句，本意是用它来快速访问对象，不幸的是，它的结果可能有时不可预料。</p>
<p><strong>小测验</strong>：</p>
<pre><code>window.a = 1;
var obj={};
with(obj){
  console.log(a);
}
obj.a = 2;
with(obj){
  console.log(a);
}
</code></pre><p><strong>结论</strong>：避免使用with。</p>
<h2 id="3、eval"><a href="#3、eval" class="headerlink" title="3、eval"></a>3、eval</h2><p>eval函数传递一个字符串给JavaScript<em>编译器</em>，并且执行结果。有问题问题呢？首先是代码难以阅读，另外需要运行编译器，导致性能低下；同时，还减弱了程序的安全性。<strong>注：</strong>Function构造函数，setTimeout、setInterval的字符串参数形式和eval是执行方式一致。</p>
<p><strong>结论</strong>：避免使用eval，setTimeout、setInterval的字符串参数和Function构造函数。</p>
<h2 id="4、continue"><a href="#4、continue" class="headerlink" title="4、continue"></a>4、continue</h2><p>continue语句跳到循环顶部，性能比较低下。</p>
<p><strong>小测验</strong>：</p>
<pre><code>var counter = 10;
console.time(&apos;t1&apos;);
var sum = 0;
for(var i = 0; i &lt; counter; i++){
  if(i % 3 !== 0){
    continue;
  }
  sum = sum + i;
}
console.log(sum);
console.timeEnd(&apos;t1&apos;);

console.time(&apos;t2&apos;);
var sum = 0;
for(var i = 0; i &lt; counter; i++){
  if(i % 3 === 0){
    sum = sum + i;
  }
}

console.log(sum);
console.timeEnd(&apos;t2&apos;);
</code></pre><p><strong>结论</strong>：尽量优化代码，减少continue的使用。</p>
<h2 id="5、switch"><a href="#5、switch" class="headerlink" title="5、switch"></a>5、switch</h2><p>switch语句中，除非明确的中断流程，否则每次条件判断后，都可以穿越到下一个case条件。这很容易造成bug。</p>
<p><strong>小测验</strong>：</p>
<pre><code>var a = 15;
switch(a){
  case a * 1 :
    console.log(&apos;a*1&apos;);
  case a / 1:
    console.log(&apos;a/1&apos;);
  default:
    console.log(&apos;a&apos;);
}
</code></pre><p><strong>结论</strong>：不要刻意的使用case条件穿越。</p>
<h2 id="6、缺少块的语句"><a href="#6、缺少块的语句" class="headerlink" title="6、缺少块的语句"></a>6、缺少块的语句</h2><p>if、while、do或for可以接受代码块，也可以接受单行语句。单行语句的形式是一种带刺的玫瑰。虽然它可以节约2个字节，但它模糊了程序的结构。</p>
<p><strong>小测验</strong>：</p>
<pre><code>if(1 == &apos;0&apos;)
  console.log(&apos;1 == 0&apos;);
  console.log(&apos;my god&apos;);

// VS
if(1 == &apos;0&apos;){
  console.log(&apos;1 == 0&apos;);
}
console.log(&apos;my god&apos;);
</code></pre><p><strong>结论</strong>：避免使用模糊程序结构的单行语句。</p>
<h2 id="7、-–"><a href="#7、-–" class="headerlink" title="7、++ –"></a>7、++ –</h2><p>递增和递减使得可以用非常简洁的风格去编码。但是它可能造成缓冲区溢出、同时往往让代码变得拥挤也不易于理解。</p>
<p><strong>小测验</strong>：</p>
<pre><code>var a = 1;
a = a++ + ++a;
console.log(a);
a = 1;
a = a++ + a++;
console.log(a);
</code></pre><p><strong>结论</strong>：避免使用++ –。</p>
<h2 id="8、位运算符"><a href="#8、位运算符" class="headerlink" title="8、位运算符"></a>8、位运算符</h2><p>JavaScript有着和Java相同的一套位运算符。Java中位运算符处理整数，非常快。在JavaScript中，只有双精度浮点数，所以位运算非常慢。另外，&amp;非常容易误写为&amp;&amp;，使得bug容易被隐藏起来。</p>
<p><strong>小测验</strong>：</p>
<pre><code>var counter = 10000;
var a = 5;
var sum = 0;
console.time(&apos;t1&apos;);
for(var i = 0; i &lt; counter; i++){
  sum += a &lt;&lt; 1;
}
console.log(sum);
console.timeEnd(&apos;t1&apos;);

sum = 0;
console.time(&apos;t2&apos;);
for(var i = 0; i &lt; counter; i++){
  sum += a * 2;
}
console.log(sum);
console.timeEnd(&apos;t2&apos;);
</code></pre><p><strong>结论</strong>：避免使用位运算符。</p>
<h2 id="9、function语句-与-function表达式"><a href="#9、function语句-与-function表达式" class="headerlink" title="9、function语句 与 function表达式"></a>9、function语句 与 function表达式</h2><p>JavaScript中既有function语句，也有function表达式，这令人困惑，似乎看起来也差不多。function语句在解析时会产生变量提升，放宽了函数必须先申明后使用的的要求。同时，JS在if语句中使用function语句也是被禁止的，但实际上大多数浏览器允许在if中使用function语句，这有可能会导致兼容性问题。</p>
<p>由于一个语句不能以一个函数表达式开头，如下如下写法，可以改写为另外一种形式。</p>
<pre><code>function (){}(); //Error 

(function(){}()); // Right
</code></pre><p><strong>小测验</strong>：</p>
<pre><code>// function语句
function fun(){}

// function表达式
var fun = function(){};
</code></pre><p><strong>结论</strong>：合理使用function语句和function表达式。</p>
<h2 id="10、类型的包装对象"><a href="#10、类型的包装对象" class="headerlink" title="10、类型的包装对象"></a>10、类型的包装对象</h2><p>JavaScript有一种类型的包装对象，如 new Number(1);这很容易令人困惑。</p>
<p><strong>小测验</strong>:</p>
<pre><code>var num1 = new Number(1);
var num2 = 1;
console.log(typeof num1);
console.log(num1 === num2);
</code></pre><p><strong>结论</strong>：避免使用包装对象，如new Boolean(),new String(),new Number()等</p>
<h2 id="11、new"><a href="#11、new" class="headerlink" title="11、new"></a>11、new</h2><p>new运算符创建一个继承于其原型的新对象，并将新创建的对象绑定给this。但是，如果忘记使用new，那么就得到一个普通的函数调用，对象属性也会被绑定到全局对象上。这不会导致什么编译警告，也没有运行警告。</p>
<p>根据惯例，需要用new的函数，以首字母大写命名。这能部分程度上便于我们发现错误。</p>
<p><strong>小测验</strong>：</p>
<pre><code>function Person(){
  this.name = &apos;Default&apos;;
  this.sex = undefiend;
}

Person();
new Person();

//更好的实现
function Person(){
  if(this === window){
    return new Person();
  }
  this.name = &apos;Default&apos;;
  this.sex = undefiend;
}
</code></pre><p><strong>结论</strong>：合理的避免使用new。另外可以先判断this，再做对应处理。</p>
<h2 id="12、void"><a href="#12、void" class="headerlink" title="12、void"></a>12、void</h2><p>大部分语言中，void是一种类型，在Js中，void是一种运算符，接收一个运算数，并返回undefined</p>
<p><strong>小测验</strong>：<br>    void 0<br>    void true</p>
<p><strong>结论</strong>：有限的使用void</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6入门系列四（测试题分析）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/ES6%E5%85%A5%E9%97%A8/ES6%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E5%9B%9B%EF%BC%88%E6%B5%8B%E8%AF%95%E9%A2%98%E5%88%86%E6%9E%90%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>ES6中新增了不少的新特性，来点测试题热热身。具体题目来源请看：<a href="http://perfectionkills.com/javascript-quiz-es6/" target="_blank" rel="external">http://perfectionkills.com/javascript-quiz-es6/</a>。</p>
<p>以下将一题一题来解析what和why。</p>
<h2 id="1、题目一"><a href="#1、题目一" class="headerlink" title="1、题目一"></a>1、题目一</h2><pre><code>(function(x, f = () =&gt; x) {
  var x;
  var y = x;
  x = 2;
  return [x, y, f()];
})(1)

A、 [2, 1, 1]
B、 [2, undefined, 1]
C、 [2, 1, 2]
D、 [2, undefined, 2]
</code></pre><p><strong>解析：</strong>本题主要考察的知识点是1、参数值与函数体内定义的重名变量的优先级；2、ES6的默认参数；3、箭头函数。<br>在本题中，先执行x的定义，然后函数参数x=1，接着是y = x = 1,接着再x = 2，第三个是执行f函数，箭头函数如果只是表达式，那么等价于return 表达式，由于箭头函数的作用域等于定义时的作用域，那么函数定义时x=1，所以最后的return x 等价于 return 1</p>
<h2 id="2、题目二"><a href="#2、题目二" class="headerlink" title="2、题目二"></a>2、题目二</h2><pre><code>(function() {
  return [
    (() =&gt; this.x).bind({ x: &apos;inner&apos; })(),
    (() =&gt; this.x)()
  ]
}).call({ x: &apos;outer&apos; });

A、 [&apos;inner&apos;, &apos;outer&apos;]
B、 [&apos;outer&apos;, &apos;outer&apos;]
C、 [undefined, undefined]
D、 Error
</code></pre><p><strong>解析：</strong>本题主要考察的是箭头函数的作用域问题，箭头函数的作用域等于定义时的作用域，所以通过bind设置的this是无效的。那么结果就显而易见了。</p>
<h2 id="3、题目三"><a href="#3、题目三" class="headerlink" title="3、题目三"></a>3、题目三</h2><pre><code>let x, { x: y = 1 } = { x }; y;

A、 undefined
B、 1
C、 { x: 1 }
D、 Error
</code></pre><p><strong>解析：</strong>本题主要考察的是对象赋值，先定义x，然后在赋值的时候会执行一次y=1，最后返回y的值。</p>
<h2 id="4、题目四"><a href="#4、题目四" class="headerlink" title="4、题目四"></a>4、题目四</h2><pre><code>(function() {
  let f = this ? class g { } : class h { };
  return [
    typeof f,
    typeof h
  ];
})();

A、 [&quot;function&quot;, &quot;undefined&quot;]
B、 [&quot;function&quot;, &quot;function&quot;]
C、 [&quot;undefined&quot;, &quot;undefined&quot;]
D、 Error
</code></pre><p><strong>解析：</strong>本题主要考察定义函数变量时，命名函数的名称作用域问题。在定义函数变量时，函数名称只能在函数体中生效。</p>
<h2 id="5、题目五"><a href="#5、题目五" class="headerlink" title="5、题目五"></a>5、题目五</h2><pre><code>(typeof (new (class { class () {} })))

A、 &quot;function&quot;
B、 &quot;object&quot;
C、 &quot;undefined&quot;
D、 Error
</code></pre><p><strong>解析：</strong>本题主要考察对象的类型，和原型方法。该提可以分解如下：</p>
<pre><code>// 定义包含class原型方法的类。
var Test = class{
  class(){}
};
var test = new Test(); //定义类的实例
typeof test; //出结果
</code></pre><h2 id="6、题目六"><a href="#6、题目六" class="headerlink" title="6、题目六"></a>6、题目六</h2><pre><code>typeof (new (class F extends (String, Array) { })).substring

A、 &quot;function&quot;
B、 &quot;object&quot;
C、 &quot;undefined&quot;
D、 Error
</code></pre><p><strong>解析：</strong>本题主要考察ES6中class的继承，以及表达式的返回值和undefined的类型。题目其实可以按照如下方式分解：</p>
<pre><code>//由于JS的class没有多继承的概念，所以括号被当做表达式来看
(String, Array) //Array,返回最后一个值
(class F extends Array); //class F继承成Array
(new (class F extends Array)); //创建一个F的实例
(new (class F extends (String, Array) { })).substring; //取实例的substring方法，由于没有继承String，Array没有substring方法，那么返回值为undefined
typeof (new (class F extends (String, Array) { })).substring; //对undefined取typeof
</code></pre><h2 id="7、题目七"><a href="#7、题目七" class="headerlink" title="7、题目七"></a>7、题目七</h2><pre><code>[...[...&apos;...&apos;]].length

A、 1
B、 3
C、 6
D、 Error
</code></pre><p><strong>解析：</strong>本题主要考察的是扩展运算符…的作用。扩展运算符是将后面的对象转换为数组，具体用法是：</p>
<pre><code>[...&lt;数据&gt;] 比如 [...&apos;abc&apos;]等价于[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]
</code></pre><h2 id="8、题目八"><a href="#8、题目八" class="headerlink" title="8、题目八"></a>8、题目八</h2><pre><code>typeof (function* f() { yield f })().next().next()

A、 &quot;function&quot;
B、 &quot;generator&quot;
C、 &quot;object&quot;
D、 Error
</code></pre><p><strong>解析：</strong>本题主要考察ES6的生成器。题目可以如下分解：</p>
<pre><code>function* f() { yield f }; //定义一个生成器
var g = f(); //执行生成器
var temp = g.next(); //返回第一次yield的值
console.log(temp); //测试，查看temp，其实是一个object
temp.next()；//对对象调用next方法，无效
</code></pre><h2 id="9、题目九"><a href="#9、题目九" class="headerlink" title="9、题目九"></a>9、题目九</h2><pre><code>typeof (new class f() { [f]() { }, f: { } })[`${f}`]

A、 &quot;function&quot;
B、 &quot;undefined&quot;
C、 &quot;object&quot;
D、 Error
</code></pre><p><strong>解析：</strong>本题主要考察ES6的class，以及动态属性和模板字符串等。 实际上这个题动态属性和模板字符串都是烟雾弹，在执行new class f()的时候，就已经有语法错误了。</p>
<h2 id="10、题目十"><a href="#10、题目十" class="headerlink" title="10、题目十"></a>10、题目十</h2><pre><code>typeof `${{Object}}`.prototype

A、 &quot;function&quot;
B、 &quot;undefined&quot;
C、 &quot;object&quot;
D、 Error
</code></pre><p><strong>解析：</strong>本题考察的知识点相对单一，就是模板字符串。分解如下：</p>
<pre><code>var o = {Object},
  str = `${o}`;
typeof str.prototype; 
</code></pre><h2 id="11、题目十一"><a href="#11、题目十一" class="headerlink" title="11、题目十一"></a>11、题目十一</h2><pre><code>((...x, xs)=&gt;x)(1,2,3)

A、 1
B、 3
C、 [1,2,3]
D、 Error
</code></pre><p><strong>解析：</strong>本题主要考察的是Rest参数的用法，在ES6中，Rest参数只能放在末尾，所以该用法的错误的。</p>
<h2 id="12、题目十二"><a href="#12、题目十二" class="headerlink" title="12、题目十二"></a>12、题目十二</h2><pre><code>let arr = [ ];
for (let { x = 2, y } of [{ x: 1 }, 2, { y }]) { 
  arr.push(x, y);
}
arr;

A、 [2, { x: 1 }, 2, 2, 2, { y }]
B、 [{ x: 1 }, 2, { y }]
C、 [1, undefined, 2, undefined, 2, undefined]
D、 Error
</code></pre><p><strong>解析：</strong>本题看起来是考察let的作用域和of迭代的用法。实则是考察let的语法，let之后是一个参数名称。所以，语法错误</p>
<h2 id="13、题目十三"><a href="#13、题目十三" class="headerlink" title="13、题目十三"></a>13、题目十三</h2><pre><code>(function() {
  if (false) {
    let f = { g() =&gt; 1 };
  }
  return typeof f;
})()

A、 &quot;function&quot;
B、 &quot;undefined&quot;
C、 &quot;object&quot;
D、 Error
</code></pre><p><strong>解析：</strong>本题非常有迷惑性，看似考察的let的作用域问题，实则考察了箭头函数的语法问题。</p>
<h2 id="14、题目答案"><a href="#14、题目答案" class="headerlink" title="14、题目答案"></a>14、题目答案</h2><p>相信大家看过题目的解析，对题目答案已经了然。为了完善本文，还是在最后贴出所有题目的答案：</p>
<p>ABBAB CBDDB DDD</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[03-基础结构]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/jQuery%E6%8B%86%E8%A7%A3/03-%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h2 id="0、jQuery-与-new-jQuery"><a href="#0、jQuery-与-new-jQuery" class="headerlink" title="0、jQuery() 与 new jQuery();"></a>0、jQuery() 与 new jQuery();</h2><p>在 <code>jQuery</code> 中,我们一般都是用 <code>$(&#39;body&#39;)</code>，实际上 <code>new $(&#39;body&#39;)</code> 也是可以用的。这是如何实现的呢？</p>
<p>要能使用 <code>new</code>，那 <code>jQuery</code> 一定是一个 <code>function</code>，又要让直接调用也返回一个实例，那我们就可以考虑返回另外一个全新 <code>function</code> 的实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span> (<span class="params">selector, context</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector, context);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>通过以上这段代码，不管是用 <code>new jQuery()</code> 还是 <code>jQuery()</code> 返回的都是 <code>init</code> 方法的实例。</p>
<p>在定义 <code>jQuery</code> 这个方法的时候，实际上 <code>fn</code> 和 <code>init</code> 都还不存在。</p>
<h2 id="1、jQuery-fn-jQuery-prototype"><a href="#1、jQuery-fn-jQuery-prototype" class="headerlink" title="1、jQuery.fn = jQuery.prototype"></a>1、jQuery.fn = jQuery.prototype</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">jQuery.fn = jQuery.prototype = &#123;</div><div class="line">  <span class="comment">// The current version of jQuery being used</span></div><div class="line">  jquery: version,</div><div class="line">  <span class="attr">constructor</span>: jQuery,</div><div class="line">  <span class="comment">// The default length of a jQuery object is 0</span></div><div class="line">  length: <span class="number">0</span>,</div><div class="line">  <span class="attr">toArray</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> slice.call(<span class="keyword">this</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// Get the Nth element in the matched element set OR</span></div><div class="line">  <span class="comment">// Get the whole matched element set as a clean array</span></div><div class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="comment">// Return all the elements in a clean array</span></div><div class="line">    <span class="keyword">if</span> (num == <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> slice.call(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Return just the one element from the set</span></div><div class="line">    <span class="keyword">return</span> num &lt; <span class="number">0</span> ? <span class="keyword">this</span>[num + <span class="keyword">this</span>.length] : <span class="keyword">this</span>[num];</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// Take an array of elements and push it onto the stack</span></div><div class="line">  <span class="comment">// (returning the new matched element set)</span></div><div class="line">  pushStack: <span class="function"><span class="keyword">function</span> (<span class="params">elems</span>) </span>&#123;</div><div class="line">    <span class="comment">// Build a new jQuery matched element set</span></div><div class="line">    <span class="keyword">var</span> ret = jQuery.merge(<span class="keyword">this</span>.constructor(), elems);</div><div class="line">    <span class="comment">// Add the old object onto the stack (as a reference)</span></div><div class="line">    ret.prevObject = <span class="keyword">this</span>;</div><div class="line">    <span class="comment">// Return the newly-formed element set</span></div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// Execute a callback for every element in the matched set.</span></div><div class="line">  each: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> jQuery.each(<span class="keyword">this</span>, callback);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">map</span>: <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pushStack(jQuery.map(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">elem, i</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> callback.call(elem, i, elem);</div><div class="line">    &#125;));</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">slice</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pushStack(slice.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">first</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.eq(<span class="number">0</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">last</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.eq(<span class="number">-1</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">eq</span>: <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> len = <span class="keyword">this</span>.length,</div><div class="line">      j = +i + (i &lt; <span class="number">0</span> ? len : <span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pushStack(j &gt;= <span class="number">0</span> &amp;&amp; j &lt; len ? [<span class="keyword">this</span>[j]] : []);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">end</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.prevObject || <span class="keyword">this</span>.constructor();</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// For internal use only.</span></div><div class="line">  <span class="comment">// Behaves like an Array's method, not like a jQuery method.</span></div><div class="line">  push: push, <span class="comment">// push = [].push</span></div><div class="line">  sort: arr.sort, <span class="comment">// arr = []</span></div><div class="line">  splice: arr.splice <span class="comment">// arr = []</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>通过以上方法指定了 <code>jQuery</code> 的原型对象，也可以看到它默认的原型方法。</p>
<h2 id="2、jQuery-fn-init-prototype"><a href="#2、jQuery-fn-init-prototype" class="headerlink" title="2、jQuery.fn.init.prototype?"></a>2、jQuery.fn.init.prototype?</h2><p>看到了 <code>jQuery</code> 的构造和 <code>jQuery.prototype</code> 的申明，可能会有这样一个疑惑，在 <code>jQuery()</code> 中返回的明明是 <code>jQuery.fn.init</code> 的实例，为什么可以使用 <code>jQuery.protptype</code> 呢？</p>
<p>我们先看看 <code>init</code> 函数的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> init = jQuery.fn.init = <span class="function"><span class="keyword">function</span> (<span class="params">selector, context, root</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> match, elem;</div><div class="line">  <span class="comment">// HANDLE: $(""), $(null), $(undefined), $(false)</span></div><div class="line">  <span class="comment">// 没有给选择器还玩个毛啊</span></div><div class="line">  <span class="keyword">if</span> (!selector) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Method init() accepts an alternate rootjQuery</span></div><div class="line">  <span class="comment">// so migrate can support jQuery.sub (gh-2101)</span></div><div class="line">  root = root || rootjQuery;</div><div class="line"></div><div class="line">  <span class="comment">// Handle HTML strings</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> selector === <span class="string">"string"</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (selector[<span class="number">0</span>] === <span class="string">"&lt;"</span> &amp;&amp;</div><div class="line">      selector[selector.length - <span class="number">1</span>] === <span class="string">"&gt;"</span> &amp;&amp;</div><div class="line">      selector.length &gt;= <span class="number">3</span>) &#123;</div><div class="line"></div><div class="line">      <span class="comment">// Assume that strings that start and end with &lt;&gt; are HTML and skip the regex check</span></div><div class="line">      match = [<span class="literal">null</span>, selector, <span class="literal">null</span>];</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      match = rquickExpr.exec(selector);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Match html or make sure no context is specified for #id</span></div><div class="line">    <span class="keyword">if</span> (match &amp;&amp; (match[<span class="number">1</span>] || !context)) &#123;</div><div class="line"></div><div class="line">      <span class="comment">// HANDLE: $(html) -&gt; $(array)</span></div><div class="line">      <span class="keyword">if</span> (match[<span class="number">1</span>]) &#123;</div><div class="line">        context = context <span class="keyword">instanceof</span> jQuery ? context[<span class="number">0</span>] : context;</div><div class="line"></div><div class="line">        <span class="comment">// Option to run scripts is true for back-compat</span></div><div class="line">        <span class="comment">// Intentionally let the error be thrown if parseHTML is not present</span></div><div class="line">        jQuery.merge(<span class="keyword">this</span>, jQuery.parseHTML(</div><div class="line">          match[<span class="number">1</span>],</div><div class="line">          context &amp;&amp; context.nodeType ? context.ownerDocument || context : <span class="built_in">document</span>,</div><div class="line">          <span class="literal">true</span></div><div class="line">        ));</div><div class="line"></div><div class="line">        <span class="comment">// HANDLE: $(html, props)</span></div><div class="line">        <span class="keyword">if</span> (rsingleTag.test(match[<span class="number">1</span>]) &amp;&amp; jQuery.isPlainObject(context)) &#123;</div><div class="line">          <span class="keyword">for</span> (match <span class="keyword">in</span> context) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Properties of context are called as methods if possible</span></div><div class="line">            <span class="keyword">if</span> (jQuery.isFunction(<span class="keyword">this</span>[match])) &#123;</div><div class="line">              <span class="keyword">this</span>[match](context[match]);</div><div class="line"></div><div class="line">              <span class="comment">// ...and otherwise set as attributes</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">              <span class="keyword">this</span>.attr(match, context[match]);</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line"></div><div class="line">        <span class="comment">// HANDLE: $(#id)</span></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        elem = <span class="built_in">document</span>.getElementById(match[<span class="number">2</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (elem) &#123;</div><div class="line"></div><div class="line">          <span class="comment">// Inject the element directly into the jQuery object</span></div><div class="line">          <span class="keyword">this</span>[<span class="number">0</span>] = elem;</div><div class="line">          <span class="keyword">this</span>.length = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// HANDLE: $(expr, $(...))</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!context || context.jquery) &#123;</div><div class="line">      <span class="keyword">return</span> (context || root).find(selector);</div><div class="line"></div><div class="line">      <span class="comment">// HANDLE: $(expr, context)</span></div><div class="line">      <span class="comment">// (which is just equivalent to: $(context).find(expr)</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.constructor(context).find(selector);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// HANDLE: $(DOMElement)</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selector.nodeType) &#123;</div><div class="line">    <span class="keyword">this</span>[<span class="number">0</span>] = selector;</div><div class="line">    <span class="keyword">this</span>.length = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    <span class="comment">// HANDLE: $(function)</span></div><div class="line">    <span class="comment">// Shortcut for document ready</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jQuery.isFunction(selector)) &#123;</div><div class="line">    <span class="keyword">return</span> root.ready !== <span class="literal">undefined</span> ?</div><div class="line">      root.ready(selector) :</div><div class="line"></div><div class="line">      <span class="comment">// Execute immediately if ready is not present</span></div><div class="line">      selector(jQuery);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> jQuery.makeArray(selector, <span class="keyword">this</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这个不多说，就是根据选择器查找元素。接下来，关键来了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 把jQuery.fn设置为init的原型</span></div><div class="line">init.prototype = jQuery.fn;</div><div class="line"></div><div class="line"><span class="comment">// Initialize central reference</span></div><div class="line"><span class="comment">// 从document开始查找</span></div><div class="line">rootjQuery = jQuery(<span class="built_in">document</span>);</div></pre></td></tr></table></figure>
<h2 id="3、jQuery-extend-jQuery-fn-extend"><a href="#3、jQuery-extend-jQuery-fn-extend" class="headerlink" title="3、jQuery.extend = jQuery.fn.extend"></a>3、jQuery.extend = jQuery.fn.extend</h2><p>有了以上的基础，那么就该扩展 <code>jQuery</code> 的功能了。它的核心就是以下的扩展函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> options, name, src, copy, copyIsArray, clone,</div><div class="line">    target = <span class="built_in">arguments</span>[<span class="number">0</span>] || &#123;&#125;,</div><div class="line">    i = <span class="number">1</span>,</div><div class="line">    length = <span class="built_in">arguments</span>.length,</div><div class="line">    deep = <span class="literal">false</span>;</div><div class="line">  <span class="comment">// Handle a deep copy situation</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">"boolean"</span>) &#123;</div><div class="line">    deep = target;</div><div class="line">    <span class="comment">// Skip the boolean and the target</span></div><div class="line">    target = <span class="built_in">arguments</span>[i] || &#123;&#125;;</div><div class="line">    i++;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Handle case when target is a string or something (possible in deep copy)</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">"object"</span> &amp;&amp; !jQuery.isFunction(target)) &#123;</div><div class="line">    target = &#123;&#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Extend jQuery itself if only one argument is passed</span></div><div class="line">  <span class="keyword">if</span> (i === length) &#123;</div><div class="line">    target = <span class="keyword">this</span>;</div><div class="line">    i--;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 将属性扩展到指定的对象上。</span></div><div class="line">  <span class="keyword">for</span> (; i &lt; length; i++) &#123;</div><div class="line">    <span class="comment">// Only deal with non-null/undefined values</span></div><div class="line">    <span class="keyword">if</span> ((options = <span class="built_in">arguments</span>[i]) != <span class="literal">null</span>) &#123;</div><div class="line">      <span class="comment">// Extend the base object</span></div><div class="line">      <span class="keyword">for</span> (name <span class="keyword">in</span> options) &#123;</div><div class="line">        src = target[name];</div><div class="line">        copy = options[name];</div><div class="line">        <span class="comment">// Prevent never-ending loop</span></div><div class="line">        <span class="keyword">if</span> (target === copy) &#123;</div><div class="line">          <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Recurse if we're merging plain objects or arrays</span></div><div class="line">        <span class="keyword">if</span> (deep &amp;&amp; copy &amp;&amp; (jQuery.isPlainObject(copy) ||</div><div class="line">          (copyIsArray = jQuery.isArray(copy)))) &#123;</div><div class="line">          <span class="keyword">if</span> (copyIsArray) &#123;</div><div class="line">            copyIsArray = <span class="literal">false</span>;</div><div class="line">            clone = src &amp;&amp; jQuery.isArray(src) ? src : [];</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            clone = src &amp;&amp; jQuery.isPlainObject(src) ? src : &#123;&#125;;</div><div class="line">          &#125;</div><div class="line">          <span class="comment">// Never move original objects, clone them</span></div><div class="line">          target[name] = jQuery.extend(deep, clone, copy);</div><div class="line">          <span class="comment">// Don't bring in undefined values</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (copy !== <span class="literal">undefined</span>) &#123;</div><div class="line">          target[name] = copy;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Return the modified object</span></div><div class="line">  <span class="keyword">return</span> target;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>为什么同一个 <code>extend</code> 函数可以扩展 <code>jQuery</code>，也可以扩展 <code>jQuery.fn</code>？这就涉及到另外一个JS的知识点了。</p>
<p><strong>函数中this的指向是谁调用谁就是this</strong>。 </p>
<h2 id="4、小结"><a href="#4、小结" class="headerlink" title="4、小结"></a>4、小结</h2><p>以上就是 <code>jQuery</code> 的核心基础结构，如果我们自己要编写一个 <code>Lib or Framework</code>，也可以参考这样的方式来实现。</p>
<p>之后所有的功能，都是从这里进行扩展。 </p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[那些不常见的JavaScript题目（上）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/JS%E6%9C%AD%E8%AE%B0/%E9%82%A3%E4%BA%9B%E4%B8%8D%E5%B8%B8%E8%A7%81%E7%9A%84JavaScript%E9%A2%98%E7%9B%AE%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>JavaScript超乎寻常的灵活性，让JavaScript可以有很多特殊的用法，让我们来领略一下它们的风采吧。</p>
<p>此为上篇，下篇请查阅：<a href="那些不常见的JavaScript题目（下）.md">下篇</a></p>
<h2 id="1、那些不常见（好玩）的题目"><a href="#1、那些不常见（好玩）的题目" class="headerlink" title="1、那些不常见（好玩）的题目"></a>1、那些不常见（好玩）的题目</h2><hr>
<h3 id="1-1、"><a href="#1-1、" class="headerlink" title="1.1、"></a>1.1、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>)</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 该题考察数组的 <code>Array.map()</code> 函数和 <code>parseInt()</code>的用法。</p>
<p><code>Array.map()</code>，接受两个两个，第一个是回调函数 <code>function(currentValue, index, array)</code>，第二个是可选参数 <code>thisArg</code>，用来指定回调函数的 <code>this</code> 对象，默认是 <code>window</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, index, array</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(currentValue, index, array, <span class="keyword">this</span>);</div><div class="line">  <span class="keyword">return</span> <span class="string">'1'</span>;</div><div class="line">&#125;, &#123;&#125;);</div></pre></td></tr></table></figure>
<p>通过上面的代码可以验证 <code>Array.map()</code> 的用法，想更详细了解，请参考 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external">MDN Array.map</a>。</p>
<p>接着看 <code>parseInt</code>，<code>parseInt</code> 默认接受两个函数，第一个要是要转化的元素，第二个是进制，默认2~36，0的话，就当成10进制处理。如果超过则会返回 <code>NaN</code>。把它作为map的回调函数时，相当于给parseInt传递了三个参数。多余的参数对结果不影响，所以问题可以变形为：<code>[parseInt(&#39;1&#39;, 0), parseInt(&#39;2&#39;, 2), parseInt(&#39;3&#39;,2)]</code>，所以就能得出答案了。</p>
<p><strong>答案：</strong> <code>[1, NaN, NaN]</code></p>
<hr>
<h3 id="1-2、"><a href="#1-2、" class="headerlink" title="1.2、"></a>1.2、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">typeof</span> <span class="literal">null</span>, <span class="literal">null</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>]</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 该题考察了对<code>null</code>的认识。 <code>null</code> 本身是一个类型（并不是Object的实例），但对它进行 <code>typeof</code> 会返回 <code>object</code>。</p>
<p><strong>答案：</strong> <code>[&#39;object&#39;, false]</code></p>
<hr>
<h3 id="1-3、"><a href="#1-3、" class="headerlink" title="1.3、"></a>1.3、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>].reduce(<span class="built_in">Math</span>.pow), [].reduce(<span class="built_in">Math</span>.pow)] ]</div></pre></td></tr></table></figure>
<p><strong>解析：</strong>此题和1.1比较类似，考察 <code>Array.reduce()</code> 和 <code>Math.pow()</code> 方法的使用。</p>
<p><code>Array.reduce()</code> 用于将数组的多个值根据指定的处理函数，合并为一个值。它的回调函数定义为 <code>function(previousValue, currentValue, currentIndex, array){}</code>，其中：</p>
<ol>
<li>previousValue // 上一次的运算结果（注意：该变量的初始值为数组的第一个元素）</li>
<li>currentValue // 当前数组元素</li>
<li>currentIndex // 当前数组索引</li>
<li>array //数组本身</li>
</ol>
<p>另外，需要注意，由于默认 <code>previousValue</code> 的初始值是第一个数组元素，那么实际的回调函数调用次数为：<code>arr.length - 1</code>。如果数组元素小于1，就会因为无法提供初始值，而导致方法异常（报错）。想了解更多，参考：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" target="_blank" rel="external">MDN Array.reduce()</a>。</p>
<p><code>Math.pow()</code> 用于计算指定值的次方，接受两个参数，前者为基数，后者为几次方，如：<code>Math.pow(2, 3) // 8</code>。</p>
<p><strong>答案：</strong> <code>[9, error]</code></p>
<hr>
<h3 id="1-4、"><a href="#1-4、" class="headerlink" title="1.4、"></a>1.4、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> val = <span class="string">'smtg'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Value is '</span> + (val === <span class="string">'smtg'</span>) ? <span class="string">'Something'</span> : <span class="string">'Nothing'</span>);</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题比较简单，考察+号运算符和?号运算符的优先级问题，+优先级大于?。</p>
<p><strong>答案：</strong> <code>&#39;Something&#39;</code></p>
<hr>
<h3 id="1-5、"><a href="#1-5、" class="headerlink" title="1.5、"></a>1.5、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'World!'</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">'Jack'</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Goodbye '</span> + name);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name);</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察函数作用域、变量提前、全局变量和局部变量相关的知识点。JS默认是函数作用域，并且函数申明，变量申明会提前到函数体开头。所以题目代码等价于：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'World!'</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">'undefined'</span>) &#123;</div><div class="line">    name = <span class="string">'Jack'</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Goodbye '</span> + name);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name);</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>再结合局部变量，会隐藏全局变量，所以答案就出来。</p>
<p><strong>答案：</strong> <code>Goodbye Jack</code></p>
<hr>
<h3 id="1-6、"><a href="#1-6、" class="headerlink" title="1.6、"></a>1.6、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> END = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>);</div><div class="line"><span class="keyword">var</span> START = END - <span class="number">100</span>;</div><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = START; i &lt;= END; i++) &#123;</div><div class="line">  count++;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(count);</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察的知识比较偏门，考察了JS中<strong>能正确计算且不失精度的最大整数</strong>，当达到这个数之后，++（自加）操作将不会产生变化了。所以&lt;=将永远满足条件。</p>
<p><strong>答案：</strong> <code>死循环</code></p>
<hr>
<h3 id="1-7、"><a href="#1-7、" class="headerlink" title="1.7、"></a>1.7、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>];</div><div class="line">ary[<span class="number">10</span>] = <span class="number">10</span>;</div><div class="line">ary.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x === <span class="literal">undefined</span>;&#125;);</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察了数组自动补齐元素和 <code>Array.filter()</code> 的用法。</p>
<p>数组自动补齐的元素为 <code>undefined</code>，示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line">arr[<span class="number">9</span>] = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [undefined * 9, 1]</span></div></pre></td></tr></table></figure>
<p><code>Array.filter()</code> 用于筛选满足条件的数组元素，接受回调函数 <code>function(currentValue, currentIndex, array){}</code>。但是一定要注意：<strong>它会忽略自动填充的undefined的元素</strong></p>
<p><strong>再次警告：是仅仅忽略自动填充的undefined元素，如果不是自动填充的undefined，是不会被忽略的。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">'str'</span>, <span class="literal">undefined</span>, <span class="literal">null</span>];</div><div class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="built_in">console</span>.log(item)&#125;); <span class="comment">//执行四次，没有忽略</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line">arr[<span class="number">9</span>] = <span class="number">1</span>;</div><div class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="built_in">console</span>.log(item)&#125;); <span class="comment">//执行1次，忽略了自动填充的9个元素</span></div></pre></td></tr></table></figure>
<p><strong>为什么有这种现象呢？</strong></p>
<p>因为filter在判断的时候，是通过key来进行的，对比一下一下两种方式的key：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">'str'</span>, <span class="literal">undefined</span>, <span class="literal">null</span>];</div><div class="line"><span class="built_in">Object</span>.keys(arr); <span class="comment">//一共有四个。</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line">arr[<span class="number">9</span>] = <span class="number">1</span>;</div><div class="line"><span class="built_in">Object</span>.keys(arr); <span class="comment">//一共只有一个。</span></div></pre></td></tr></table></figure>
<p><strong>引申：该判断逻辑也适合大多数数组方法，如reduce，map等等。</strong></p>
<p><strong>答案：</strong> <code>[]</code></p>
<hr>
<h3 id="1-8、"><a href="#1-8、" class="headerlink" title="1.8、"></a>1.8、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> two   = <span class="number">0.2</span></div><div class="line"><span class="keyword">var</span> one   = <span class="number">0.1</span></div><div class="line"><span class="keyword">var</span> eight = <span class="number">0.8</span></div><div class="line"><span class="keyword">var</span> six   = <span class="number">0.6</span></div><div class="line">[two - one == one, eight - six == two]</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 该题考察了JS中的浮点数运算有误差的知识点。这个到底规则是什么，I don’t know.</p>
<p><strong>答案：</strong> <code>[true, false]</code></p>
<hr>
<h3 id="1-9、"><a href="#1-9、" class="headerlink" title="1.9、"></a>1.9、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCase</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span>(value) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'A'</span>:</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Case A'</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'B'</span>:</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Case B'</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="literal">undefined</span>:</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'undefined'</span>);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'Do not know!'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">showCase(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'A'</span>));</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察 <code>new String(&#39;A&#39;)</code> 产生的结果为 <code>object</code>，另外switch判断分支是使用 <code>===</code>，所以只能到default分支。</p>
<p><strong>答案：</strong> <code>&#39;Do not know!&#39;</code></p>
<hr>
<h3 id="1-10、"><a href="#1-10、" class="headerlink" title="1.10、"></a>1.10、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showCase2</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span>(value) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">'A'</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Case A'</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="string">'B'</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Case B'</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="literal">undefined</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'undefined'</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Do not know!'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">showCase(<span class="built_in">String</span>(<span class="string">'A'</span>));</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题和1.9考察点类似，不过不适用new的 <code>String(&#39;A&#39;)</code>，返回的是字符串的 <code>&#39;A&#39;</code>。</p>
<p><strong>注意，以此类推，Number(1), 也返回数字 1 。</strong></p>
<p><strong>答案：</strong> <code>&#39;Case A&#39;</code></p>
<hr>
<h3 id="1-11、"><a href="#1-11、" class="headerlink" title="1.11、"></a>1.11、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOdd</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num % <span class="number">2</span> == <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEven</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSane</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> isEven(num) || isOdd(num);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> values = [<span class="number">7</span>, <span class="number">4</span>, <span class="string">'13'</span>, <span class="number">-9</span>, <span class="literal">Infinity</span>];</div><div class="line">values.map(isSane);</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题没有什么难点，只需要记得 <code>Infinity % 2 //NaN</code>就可以了。其他直接根据传入的值，运算即可。</p>
<p><strong>答案：</strong> <code>[true, true, true, false, false]</code></p>
<hr>
<h3 id="1-12、"><a href="#1-12、" class="headerlink" title="1.12、"></a>1.12、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="number">3</span>, <span class="number">8</span>)</div><div class="line"><span class="built_in">parseInt</span>(<span class="number">3</span>, <span class="number">2</span>)</div><div class="line"><span class="built_in">parseInt</span>(<span class="number">3</span>, <span class="number">0</span>)</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题的考察点，在1.1就考察过了。</p>
<p><strong>答案：</strong> <code>3, NaN, 3</code></p>
<hr>
<h3 id="1-13、"><a href="#1-13、" class="headerlink" title="1.13、"></a>1.13、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype)</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察Array的原型。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype <span class="comment">// []</span></div></pre></td></tr></table></figure>
<p><strong>答案：</strong> <code>true</code></p>
<hr>
<h3 id="1-14、"><a href="#1-14、" class="headerlink" title="1.14、"></a>1.14、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">0</span>];</div><div class="line"><span class="keyword">if</span> ([<span class="number">0</span>]) &#123; </div><div class="line">  <span class="built_in">console</span>.log(a == <span class="literal">true</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123; </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"wut"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>解析：</strong>  死记硬背吧。<a href="https://dorey.github.io/JavaScript-Equality-Table/" target="_blank" rel="external">参考图</a></p>
<p><strong>答案：</strong> <code>false</code></p>
<hr>
<h3 id="1-15、"><a href="#1-15、" class="headerlink" title="1.15、"></a>1.15、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[]==[]</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题如上，也可以理解没有类型转换，引用不同。</p>
<p><strong>答案：</strong> <code>false</code></p>
<hr>
<h3 id="1-16、"><a href="#1-16、" class="headerlink" title="1.16、"></a>1.16、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'5'</span> + <span class="number">3</span>  </div><div class="line"><span class="string">'5'</span> - <span class="number">3</span></div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察类型转换，和 + 号的作用。当有字符串操作数时，+ 表示字符串连接。</p>
<p><strong>答案：</strong> <code>&#39;53&#39;, 2</code></p>
<hr>
<h3 id="1-17、"><a href="#1-17、" class="headerlink" title="1.17、"></a>1.17、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> + - + + + - + <span class="number">1</span></div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题，个人根据结果归纳了一套规则：</p>
<ol>
<li>首先，忽略所有的+号， 得到： <code>1 - - 1</code></li>
<li>然后 - - 得正，成为 + 号，得到：<code>1 1</code></li>
<li>把最后的操作数相加，即为结果</li>
</ol>
<p>测试代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span> + <span class="number">1</span> - <span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">1</span> <span class="comment">// 11</span></div><div class="line"><span class="number">5</span> - <span class="number">1</span> - <span class="number">1</span> - <span class="number">1</span> - <span class="number">1</span> - <span class="number">10</span> - <span class="number">5</span> - <span class="number">20</span> <span class="comment">// -34</span></div><div class="line"><span class="number">1</span> - - - - - - <span class="number">1</span> <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p><strong>答案：</strong> <code>2</code></p>
<hr>
<h3 id="1-18、"><a href="#1-18、" class="headerlink" title="1.18、"></a>1.18、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary = <span class="built_in">Array</span>(<span class="number">3</span>);</div><div class="line">ary[<span class="number">0</span>]=<span class="number">2</span></div><div class="line">ary.map(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123; <span class="keyword">return</span> <span class="string">'1'</span>; &#125;);</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题的考察点在1.7就考察过了。但是需要注意，map函数，并不改变结果数组的长度。</p>
<p><strong>答案：</strong> <code>[&#39;1&#39;, undefined*2]</code></p>
<hr>
<h3 id="1-19、"><a href="#1-19、" class="headerlink" title="1.19、"></a>1.19、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sidEffecting</span>(<span class="params">ary</span>) </span>&#123; </div><div class="line">  ary[<span class="number">0</span>] = ary[<span class="number">2</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a,b,c</span>) </span>&#123; </div><div class="line">  c = <span class="number">10</span></div><div class="line">  sidEffecting(<span class="built_in">arguments</span>);</div><div class="line">  <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div><div class="line">bar(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察改变 <code>arguments</code>的属性值，会不会影响该对象。由于 <code>arguments</code> 是个对象，实际上是会影响的。<strong>注意：使用 <code>use strict</code> 可以避免此种情况。</strong></p>
<p><strong>答案：</strong> <code>21</code></p>
<p><strong>注意：当使用ES6语法，参数有rest parameters的时候，结果就不在一样了。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sidEffecting</span>(<span class="params">ary</span>) </span>&#123;</div><div class="line">  ary[<span class="number">0</span>] = ary[<span class="number">2</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a, b, c=<span class="number">3</span></span>) </span>&#123;</div><div class="line">  c = <span class="number">10</span>;</div><div class="line">  sidEffecting(<span class="built_in">arguments</span>);</div><div class="line">  <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div><div class="line">bar(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>); <span class="comment">// 12</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="1-20、"><a href="#1-20、" class="headerlink" title="1.20、"></a>1.20、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">111111111111111110000</span>,</div><div class="line">b = <span class="number">1111</span>;</div><div class="line">a + b;</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 当数值超过<strong>JS能正确计算且不失精度的最大整数</strong>时，会产生缺少精度问题。导致结果不太可预料。</p>
<p>基本上，超过16位数的整数都有这个问题了。很多时候，超过16位之后的数字会被补0。如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一共20个2，超过16位之后的，将会为0。</span></div><div class="line"><span class="number">22222222222222222222</span> <span class="comment">// 22222222222222220000</span></div><div class="line"></div><div class="line"><span class="number">98765432109876543210</span> <span class="comment">// 98765432109876540000</span></div><div class="line"></div><div class="line"><span class="comment">//当从1开始时，超过17位才为0。</span></div><div class="line"><span class="number">12345678901234567890</span> <span class="comment">// 12345678901234567000</span></div></pre></td></tr></table></figure>
<p><strong>答案：</strong> <code>111111111111111110000</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript的深拷贝的实现]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/JS%E6%9C%AD%E8%AE%B0/JavaScript%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="JavaScript的数据类型"><a href="#JavaScript的数据类型" class="headerlink" title="JavaScript的数据类型"></a>JavaScript的数据类型</h2><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><ol>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>function</li>
<li>null</li>
<li>undefined</li>
</ol>
<h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><ol>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Function</li>
<li>Date</li>
<li>Array</li>
<li>RegExp </li>
<li>Object </li>
</ol>
<h2 id="各种类型的深复制方式："><a href="#各种类型的深复制方式：" class="headerlink" title="各种类型的深复制方式："></a>各种类型的深复制方式：</h2><p>先来看看简单类型的复制方式：</p>
<pre><code>//string
var s1 = &apos;abc&apos;;
var s2 = s1;
s2 = &apos;ccc&apos;;
console.log(s1);

//number
var n1 = 12.1;
var n2 = n1;
n2 = 7410;
console.log(n1);

//boolean
var b1 = true;
var b2 = b1;
b2 = false;
console.log(b1);

//null
var nu1 = null;
var nu2 = nu1;
nu2 = &apos;abc&apos;;
console.log(nu1);

//undefined
var u1 = undefined;
var u2 = u1;
u2 = &apos;abc&apos;;
console.log(u1);
</code></pre><p>从以上的代码可以看出，简单类型，只需要直接赋值就是深复制了。但是也有一个例外，那就是function。</p>
<p>接着来看看String、Number、Boolean、Date的深复制：</p>
<pre><code>//String
var s1 = new String(&apos;s1&apos;);
var s2 = new String(s1);
console.log(s2);

//Number
var n1 = new Number(&apos;1&apos;);
var n2 = new Number(n1);
console.log(n2);

//Boolean
var b1 = new Boolean(1);
var b2 = new Boolean(b1);
console.log(b2);

//Date
var d1 = new Date();
var d2 = new Date(d1);
console.log(d2);
</code></pre><p>除以上的做法之外，还需要对实例属性进行拷贝。那么剩下的Function、function、RegExp和Array还有Object又该怎么拷贝呢？这几个比较特殊，我们一个一个来：</p>
<p>对于Function和function的深拷贝，我们可以按照如下的方式来做：</p>
<pre><code>var f1 = new Function(&apos;a&apos;, &apos;console.log(&quot;f1&quot; + a);&apos;);
var f2 = function(b){console.log(&apos;f2&apos; + b);};

//通过toString获取源代码(有浏览器兼容问题)
var code = f1.toString();
//利用eval进行复制
var f1_copy = (function(functionCode){
  eval(&apos;var f = &apos; + functionCode);
  return f;
})(code);

f1_copy(&apos;abc&apos;);

//当然f2也可以用同样的方式来复制。
</code></pre><p>接着，我们来看下RegExp，可以同样同时eval来执行拷贝，也可以使用如下方式：</p>
<pre><code>var reg1 = /abc/g;
var reg2 = new RegExp(&apos;abc&apos;, &apos;gmi&apos;);

var reg1_copy = (function(reg){
  var pattern = reg.valueOf();
  var flags = (pattern.global ? &apos;g&apos; : &apos;&apos;) + 
    (pattern.ignorecase ? &apos;i&apos; : &apos;&apos;) + (pattern.multiline ? &apos;m&apos; : &apos;&apos;);
  return new RegExp(pattern.source, flags);
})(reg1);
</code></pre><p>最后，我们来说一说Array的复制，有的人可以说，直接用slice复制一份出来就是了，那我们来看看，是否真的达到效果的呢？</p>
<pre><code>var o = {name: &apos;Jay&apos;};
var arr1 = [o, &apos;22&apos;, 1];
var arr2 = arr1.slice(0);
arr2[0].name = &apos;Arr2&apos;;
console.log(arr1[0].name);
</code></pre><p>很简短的代码，直接就把slice抛弃了，slice只能保证Array是新的，并不意味着内部的元素是深拷贝的，那么如何做呢？就是遍历元素，对每个元素进行深拷贝了。代码如下：</p>
<pre><code>var o = {name: &apos;Jay&apos;};
var arr1 = [o, &apos;22&apos;, 1];

var arr2 = [];
for(var i = 0, len = arr1.length; i &lt; len; i++){
  //注意，deepClone还未实现
  arr2.push(deepClone(arr1[i]));
}
</code></pre><p>以上对针对不同的类型，特殊的代码，那么如何来拷贝实例属性呢？代码如下：</p>
<pre><code>var o = {p1: &apos;1&apos;, p2: 2, p3: function(){}};

var copy = {};
for(var p in o){
  //注意deepClone还未实现
  copy[p] = deepClone(o[p]);
}
</code></pre><p><strong>注意：针对复杂类型，还需要同时copy.constructor = source.constructor来保证构造函数一致。</strong></p>
<h2 id="最终的深复制代码"><a href="#最终的深复制代码" class="headerlink" title="最终的深复制代码"></a>最终的深复制代码</h2><p>通过以上的分析与代码示例，那么我们最终的代码又是怎样的呢？详细代码如下：</p>
<pre><code>//自调用函数，防御性编程
;
(function (window) {
  &apos;use strict&apos;;

  function getCustomType(obj) {
    var type = typeof obj,
      resultType = &apos;object&apos;;
    //简单类型
    if (type !== &apos;object&apos; || obj === null) {
      resultType = &apos;simple&apos;;
    } else if (obj instanceof String || obj instanceof Number || obj instanceof Boolean || obj instanceof Date) {
      resultType = &apos;complex&apos;;
    } else if (obj instanceof Function) {
      resultType = &apos;function&apos;;
    } else if (obj instanceof RegExp) {
      resultType = &apos;regexp&apos;;
    } else if (obj instanceof Array) {
      resultType = &apos;array&apos;;
    }
    return resultType;
  }

  function cloneProperties(dest, source) {
    dest.constructor = source.constructor;
    for (var p in source) {
      dest[p] = deepClone(source[p]);
    }
    return dest;
  }

  function cloneSimple(obj) {
    return obj;
  }

  function cloneComplex(obj) {
    var result = new obj.constructor(obj);
    return cloneProperties(result);
  }

  function cloneFunction(obj) {
    var funCopy = (function (f) {
      eval(&apos;var abcdefg_$$$$ = &apos; + obj.toString());
      return abcdefg_$$$$;
    })(obj);
    return cloneProperties(funCopy);
  }

  function cloneRegExp(obj) {
    var pattern = obj.valueOf();
    var flags = (pattern.global ? &apos;g&apos; : &apos;&apos;) +
      (pattern.ignorecase ? &apos;i&apos; : &apos;&apos;) + (pattern.multiline ? &apos;m&apos; : &apos;&apos;);
    var reg = new RegExp(pattern.source, flags);
    return cloneProperties(reg);
  }

  function cloneArray(obj) {
    var resultArr = [];
    for (var i = 0, len = obj.length; i &lt; len; i++) {
      resultArr.push(deepClone(obj[i]));
    }
    for (var p in obj) {
      if (typeof p === &apos;number&apos; &amp;&amp; p &lt; len) {
        continue;
      }
      resultArr[p] = deepClone(obj[p]);
    }
    return resultArr;
  }

  function cloneObject(obj) {
    var result = {};
    result.constructor = obj.constructor;
    for (var p in obj) {
      result[p] = deepClone(obj[p]);
    }
    return result;
  }

  function deepClone(obj) {
    var f = undefined;
    switch (getCustomType(obj)) {
    case &apos;simple&apos;:
      f = cloneSimple;
      break;
    case &apos;complex&apos;:
      f = cloneComplex;
      break;
    case &apos;function&apos;:
      f = cloneFunction;
      break;
    case &apos;regexp&apos;:
      f = cloneRegExp;
      break;
    case &apos;array&apos;:
      f = cloneArray;
      break;
    case &apos;object&apos;:
      f = cloneObject;
      break;
    }
    return f.call(undefined, obj);
  }

  //挂载到window对象上
  window.deepClone = deepClone;
})(window);
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Go Go]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Other/Go%20Go/</url>
      <content type="html"><![CDATA[<h1 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h1><blockquote>
<p>学习是进步的源泉</p>
</blockquote>
<p>在这个云计算、多核盛行的时代，学习一门与之相配合的语言也就无可厚非了。那么对多核与并行计算原生支持的Go就是我的选择了…</p>
<p>关于GO的好坏，我不会去深究，在每个人眼中，这都是主观的。喜欢就会觉得好，不喜欢好也是坏。当然，它本身的优势与劣势是值得我们关注了，这决定了它的适用性。</p>
<p>工欲善其事必先利其器，本人学习一门语言之前，喜欢先寻找趁手的兵器。搜索之，继而找到了LiteIDE。由于偏爱集成开发环境，那么Sublime也就不是我的首选了。</p>
<p>以上全是废话，下面开始搭建开发环境。</p>
<h1 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h1><ol>
<li>PC + Windows操作系统（我承认我只会玩Windows…）</li>
<li>你得下载Go语言：<a href="https://golang.org/" target="_blank" rel="external">https://golang.org/</a> BTW：我下载的文件名是：go1.4.1.windows-amd64.msi</li>
<li>LiteIDE：<a href="https://github.com/visualfc/liteide" target="_blank" rel="external">https://github.com/visualfc/liteide</a></li>
</ol>
<h1 id="2、搭建环境"><a href="#2、搭建环境" class="headerlink" title="2、搭建环境"></a>2、搭建环境</h1><p><span style="font-size:25px;font-weight:bold;">首</span>先，你需要安装Go语言。什么？你不会？双击msi(或者exe)，Next到手软就可以了。当然，最后应该是Finish。经过这个步骤，go就安装上了，什么环境变量啥的都给你配置好了。当然，安装成功不成功不是你说了算，那么打开cmd，输入一个go试试？如果报错，那么狠抱歉，请重试该步骤，或者检查环境变量。如果提示Go is a tool for managing Go source code ,那么恭喜你，安装已成功！</p>
<p><span style="font-size:25px;font-weight:bold;">接</span>下面，安装LiteIDE，这货的下载地址在<a href="http://sourceforge.net/projects/liteide/files" target="_blank" rel="external">http://sourceforge.net/projects/liteide/files</a>，如果你爱折腾，那么直接下载源码编译也是OK的，请参考<a href="https://github.com/visualfc/liteide/blob/master/liteidex/deploy/welcome/en/install.md" target="_blank" rel="external">https://github.com/visualfc/liteide/blob/master/liteidex/deploy/welcome/en/install.md</a>。此处熊出没！liteide下载下来可不是exe或者msi文件哦。我下载的文件名是：liteidex27-1.windows.7z。既然这样，那么解压缩，找个地儿一扔就搞定，是不是更简单？</p>
<h1 id="3、永远的经典：Hello-World"><a href="#3、永远的经典：Hello-World" class="headerlink" title="3、永远的经典：Hello World"></a>3、永远的经典：Hello World</h1><p>既然到了这里，想必以上两个小玩意已经安装好了。那么就应该开始写代码。据说程序员爱代码不爱妹子，这是真的么？</p>
<p>找到liteIDE的安装目录，进行/bin目录，双击“liteide.exe”（PS：一看到这个丑丑的太极图标，我就在想，这货应该是一个国人开发的吧，呵呵，果真是！）。和一般IDE无异，File-&gt;New-&gt;Go1 Command Project(Not Use GOPATH)，当然其他也是可以选的，惊喜在等着你。输入必要的信息，那么一个项目就创建好了。</p>
<p>打开main.go文件，输入代码（这段代码我是借鉴的，肯定不是copy的）：</p>
<pre><code>// demo1 project main.go
package main

import (
    &quot;fmt&quot;
)

func main() {
    fmt.Println(&quot;Hello World!&quot;)
}
</code></pre><p>然后点击工具栏上的FR(File Run),这坑爹的按钮，简直反人类。。我点了N次Go按钮之后，才发现这货才是运行。。在右下方区域就能看到输出了。。Hello World~</p>
<p><strong>后记：</strong> 至此，一个简单的Go开发环境已经搭建好了。</p>
<h2 id="或许你还有疑问"><a href="#或许你还有疑问" class="headerlink" title="或许你还有疑问"></a>或许你还有疑问</h2><ol>
<li>如果生成可执行文件呢？ <strong>可以利用LiteIDE的Build按钮，或者是控制台命令 <code>go build</code></strong></li>
<li>如果我是64位系统，如何生成32位可执行程序呢？ <strong>我也不知道，只能给你关键字“交叉编译”</strong></li>
<li>更多，就留给你慢慢发掘吧。Over！</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[NPM使用详解（上）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Other/NPM%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="1、NPM是什么？"><a href="#1、NPM是什么？" class="headerlink" title="1、NPM是什么？"></a>1、NPM是什么？</h2><p>NPM是JavaScript的包管理工具，在安装NodeJS（什么？你不知道node？来，我们合计合计：<a href="https://nodejs.org/" target="_blank" rel="external">https://nodejs.org/</a>）的时候,会自动安装上npm。</p>
<p>要查看安装的npm版本，只需要打开cmd控制台，输入<code>npm -v</code></p>
<p>NPM使得JavaScript开发者分享和重用代码非常容易，同时也让你能否非常方便的更新你分享的代码。</p>
<p>NPM能够自己升级自己，使用命令如下： <code>npm install npm -g</code></p>
<h2 id="2、NPM的使用"><a href="#2、NPM的使用" class="headerlink" title="2、NPM的使用"></a>2、NPM的使用</h2><p>以下代码示例中：&lt;&gt;表示必选参数，[]表示可选参数</p>
<h3 id="最常用命令"><a href="#最常用命令" class="headerlink" title="#最常用命令"></a>#最常用命令</h3><h4 id="2-1、-init：用于初始化项目"><a href="#2-1、-init：用于初始化项目" class="headerlink" title="2.1、 init：用于初始化项目"></a>2.1、 init：用于初始化项目</h4><pre><code>/*
 * npm init [-f|--force|-y|--yes]
 */

//在文件夹中打开cmd，然后输入npm init，打开项目初始化向导
npm init 

//如果文件夹名称满足npm的module name,
//那么使用如下方式，可以直接生成一个默认的package.json
//如果文件夹名称不满足要求，那么会出错
npm init -f
npm init --force
npm init --force=true 
npm init -y
npm init --yes
npm init --yes=true
</code></pre><h4 id="2-2、install：用于安装模块"><a href="#2-2、install：用于安装模块" class="headerlink" title="2.2、install：用于安装模块"></a>2.2、install：用于安装模块</h4><pre><code>/*
 * npm install (with no args in a package dir)
 * npm install &lt;tarball file&gt;
 * npm install &lt;tarball url&gt;
 * npm install &lt;folder&gt;
 * npm install [@&lt;scope&gt;/]&lt;name&gt; [--save|--save-dev|--save-optional] [--save-exact]
 * npm install [@&lt;scope&gt;/]&lt;name&gt;@&lt;tag&gt;
 * npm install [@&lt;scope&gt;/]&lt;name&gt;@&lt;version&gt;
 * npm install [@&lt;scope&gt;/]&lt;name&gt;@&lt;version range&gt;
 * npm i (with any of the previous argument usage)
 */

//直接使用npm install 或者是npm i，表示根据package.json，安装所有依赖
npm install
npm i

//如果加上--production参数，那么只会安装dependencies的模块，
//而不会安装devDependencies的内模块
npm install --production
npm i --production

//使用全局上下文来初始化
npm install -g
npm i -g

//安装指定模块
npm install &lt;packageName&gt;
npm install &lt;packageName&gt; -g //全局安装
npm install &lt;packageName&gt;@&lt;version&gt; //指定要安装的模块版本
npm install &lt;packageName&gt;@&lt;version_start-version_end&gt; //指定要安装的模块版本
npm install &lt;packageName&gt; --registry=&lt;url&gt; //指定零食的仓库地址
npm install &lt;packageName&gt; --msvs_version=&lt;vs_version&gt; //指定编译使用的VS版本
npm install &lt;packageName&gt; --save // 安装模块并修改package.json的dependencies
npm install &lt;packageName&gt; --save-dev //安装模块并修改package.json的devDependencies

npm install &lt;tarball url&gt; //从指定的压缩包地址安装，示例如下：
npm install https://github.com/indexzero/forever/tarball/v0.5.6

npm install &lt;tarball file&gt; //从指定的压缩包安装，如下(注意压缩包格式)：
npm install del-1.2.0.tar.gz //使用.tgz和.tar.gz格式

npm install @&lt;scope&gt;/&lt;packageName&gt; //安装私有包
</code></pre><h4 id="2-3、uninstall：用于卸载模块"><a href="#2-3、uninstall：用于卸载模块" class="headerlink" title="2.3、uninstall：用于卸载模块"></a>2.3、uninstall：用于卸载模块</h4><pre><code>/*
 * npm uninstall [@&lt;scope&gt;/]&lt;package&gt; [--save|--save-dev|--save-optional]
 */

//直接卸载模块，加上-g参数，表示卸载全局的模块
npm uninstall &lt;packageName&gt; 
npm uninstall &lt;packageName&gt; -g

//卸载时同时修改package.json文件
npm uninstall &lt;packageName&gt; --save-dev
npm uninstall &lt;packageName&gt; --save
</code></pre><h4 id="2-4、update：用于更新模块"><a href="#2-4、update：用于更新模块" class="headerlink" title="2.4、update：用于更新模块"></a>2.4、update：用于更新模块</h4><pre><code>/*
 * npm update [-g] [&lt;name&gt; [&lt;name&gt; ...]]
 */

//更新一个或多个模块，加上-g参数，表示更新全局的模块
npm update &lt;packageName&gt; [packageName2...]
npm update &lt;packageName&gt; [packageName2...] -g

//更新时同时修改package.json文件
npm update &lt;packageName&gt; [packageName2...] --save-dev
npm update &lt;packageName&gt; [packageName2...] --save
</code></pre><h4 id="2-5、config：用于设置npm参数"><a href="#2-5、config：用于设置npm参数" class="headerlink" title="2.5、config：用于设置npm参数"></a>2.5、config：用于设置npm参数</h4><pre><code>//设置指定参数
npm config set &lt;key&gt; &lt;value&gt; [--global]
npm set &lt;key&gt; &lt;value&gt; [--global] //可以省略config
//获取现有参数值
npm config get &lt;key&gt;
npm get &lt;key&gt; //可以省略config
//删除指定参数，此时参数值会变为默认值
npm config delete &lt;key&gt;
//查看npm信息；注意：此命令不是查看所有参数配置
npm config list
//编辑全量的npm配置文件（.npmrc）
npm config edit
//可以将config使用c代替，执行以上所有命令
npm c [set|get|delete|list]
</code></pre><h4 id="2-6、cache：管理包缓存"><a href="#2-6、cache：管理包缓存" class="headerlink" title="2.6、cache：管理包缓存"></a>2.6、cache：管理包缓存</h4><pre><code>//将指定的包加入npm缓存
npm cache add &lt;tarball file&gt;
npm cache add &lt;folder&gt;
npm cache add &lt;tarball url&gt;
npm cache add &lt;name&gt;@&lt;version&gt;
//查看现有的npm包缓存，如果加上path参数，则查看该路径下的文件
npm cache ls [&lt;path&gt;] 
eg: npm cache ls gulp
//清空缓存。如果加上path，则清理指定路径下的包缓存
npm cache clean [&lt;path&gt;]
eg: npm cache clean gulp
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[01_开始GO]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/GoLang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01_%E5%BC%80%E5%A7%8BGO/</url>
      <content type="html"><![CDATA[<h1 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h1><p>Go是啥？看<a href="https://golang.org" target="_blank" rel="external">这里</a>。简而言之，就是一门系统级的编程语言。</p>
<p>为嘛要学/用它？</p>
<ol>
<li>追个潮流，体验下不同风格的语言设计思想</li>
<li>跨平台部署，单文件部署</li>
<li>强大的功能（系统级）</li>
<li>对分布式的友好支持</li>
</ol>
<p>上手有啥问题？</p>
<ol>
<li>不友好的语法（也有一部分人觉得语法很优雅，对我来说，这语法可算不上友好）</li>
<li>和大多数语言不一样的设计风格（需要慢慢消化）</li>
<li>没有趁手的IDE（LiteIDE, Sublime Text, VsCode这几个可以自己优化得比较好用）</li>
</ol>
<h1 id="1、开干"><a href="#1、开干" class="headerlink" title="1、开干"></a>1、开干</h1><p>虽然比较恶心语法，但是其他优秀的点，也是比较吸引人的，再加上项目需要，那就开干。</p>
<p>因为有其他前/后端语言的经验，就跳过常规学习过程，直接上手做项目。</p>
<p><strong>注意：虽然跳过了不少步骤，但是语法还是要学习的，书还是要看的，先来一本《Go语言编程》</strong></p>
<h3 id="1-1、创建项目基架"><a href="#1-1、创建项目基架" class="headerlink" title="1.1、创建项目基架"></a>1.1、创建项目基架</h3><p><code>Go</code> 是一个有很多规范的语法，就连创建目录结构也有一定的约束。之前的版本略过，我本地安装的是 <code>go1.7.3</code> 版本，通过 <code>go version</code> 可查看。</p>
<p>接下来就为该版本，创建一个相对较为标准的项目结构。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[开发者讨厌你API的十个原因]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Other/%E5%BC%80%E5%8F%91%E8%80%85%E8%AE%A8%E5%8E%8C%E4%BD%A0API%E7%9A%84%E5%8D%81%E4%B8%AA%E5%8E%9F%E5%9B%A0/</url>
      <content type="html"><![CDATA[<p>##1、文档的吸引力太弱##</p>
<p>###解决之道###</p>
<ol>
<li>采用大图片：<a href="https://www.twilio.com/docs" target="_blank" rel="external">示例站点</a></li>
<li>文档清晰度：<a href="https://stripe.com/docs/api" target="_blank" rel="external">示例站点</a></li>
<li>文档易于查找：<a href="https://stripe.com/docs/" target="_blank" rel="external">示例站点</a></li>
<li>生动的文档：<ol>
<li><a href="https://github.com/wordnik/swagger-core" target="_blank" rel="external">Swagger</a></li>
<li><a href="https://github.com/mashery/iodocs" target="_blank" rel="external">I/O Docs</a></li>
<li>采用RAML(RESTful API 模型语言) <a href="raml.org">RAML官网</a></li>
</ol>
</li>
</ol>
<p>##2、您的沟通技能需要工作（你不能保证开发者始终被通知到）</p>
<p>###解决之道###</p>
<ol>
<li>使用变更日志：<a href="http://developer.github.com/changes/" target="_blank" rel="external">http://developer.github.com/changes/</a></li>
<li>使用路线图：<a href="https://developers.facebook.com/roadmap/" target="_blank" rel="external">https://developers.facebook.com/roadmap/</a></li>
<li>采用发布日志：<a href="http://techblog.constantcontact.com/api/release-updates" target="_blank" rel="external">http://techblog.constantcontact.com/api/release-updates</a></li>
<li>使用博客（Blog）：<a href="http://aws.typepad.com/" target="_blank" rel="external">http://aws.typepad.com/</a></li>
<li>使用论坛（Forum）：<a href="http://stackoverflow.com/questions/tagged/soundcloud" target="_blank" rel="external">http://stackoverflow.com/questions/tagged/soundcloud</a></li>
<li>邮件通知</li>
</ol>
<p>##3、你不能使API使用简单##</p>
<p>###解决之道###</p>
<ol>
<li>说明你是做什么的：<a href="https://www.twilio.com/voice/api" target="_blank" rel="external">https://www.twilio.com/voice/api</a></li>
<li>支持快速注册：<a href="https://manage.stripe.com/register" target="_blank" rel="external">https://manage.stripe.com/register</a></li>
<li>使用step1-step2-step3说明使用步骤：<a href="http://developer.constantcontact.com/get-started.html" target="_blank" rel="external">示例站点</a></li>
<li>提供快速入门手册：<a href="https://www.twilio.com/docs/quickstart" target="_blank" rel="external">https://www.twilio.com/docs/quickstart</a></li>
<li>提供免费版或者免费试用版：<a href="https://parse.com/plans" target="_blank" rel="external">https://parse.com/plans</a></li>
<li>提供丰富的SDK（支持多种开发语言）</li>
<li>使用GitHub ：<a href="https://github.com/OneNoteDev" target="_blank" rel="external">https://github.com/OneNoteDev</a></li>
</ol>
<p>##4、没有提供法律申明##</p>
<p>###解决之道###</p>
<ol>
<li>要明确权利与义务：<a href="http://500px.com/terms" target="_blank" rel="external">http://500px.com/terms</a></li>
<li>编写使用协议：<a href="https://www.etsy.com/developers/terms-of-use" target="_blank" rel="external">https://www.etsy.com/developers/terms-of-use</a></li>
<li>申明越短越好：<a href="http://googledevelopers.blogspot.com" target="_blank" rel="external">http://googledevelopers.blogspot.com</a></li>
<li>申明要想长远：<a href="https://developers.google.com/youtube/terms" target="_blank" rel="external">https://developers.google.com/youtube/terms</a></li>
<li>分享你的财富：<a href="http://slideshare.net/jmusser" target="_blank" rel="external">http://slideshare.net/jmusser</a></li>
</ol>
<p>##5、你的API不可靠（慢、错误、不可靠）##<br>API会被停运(Outage)、Bug、速率(Rate limit)、变更(包含有计划的变更和未被文档跟踪的变更)、ToS违规、Provider biz change、网络等原因影响。</p>
<p>不要让API返回未知的错误信息，让用户迷惑。</p>
<p>###解决之道###</p>
<ol>
<li>使用状态页：<a href="http://status.aws.amazon.com/" target="_blank" rel="external">http://status.aws.amazon.com/</a></li>
<li>监控API：<a href="http://www.apiscience.com" target="_blank" rel="external">http://www.apiscience.com</a></li>
<li>不要隐藏API的变化，如停运：<a href="http://blog.akismet.com" target="_blank" rel="external">http://blog.akismet.com</a></li>
</ol>
<p>##6、没有提供能帮助我调用成功的工具##</p>
<p>###解决之道###</p>
<ol>
<li>提供开发者仪表板：<a href="https://manage.stripe.com/test/dashboard" target="_blank" rel="external">https://manage.stripe.com/test/dashboard</a></li>
<li>提供 Debug/Log 等日志：<a href="www.twilio.com/user/account/developer-tools/app-monitor">示例站点</a></li>
<li>提供用于测试的沙盒环境：<a href="https://www.twilio.com/user/account" target="_blank" rel="external">https://www.twilio.com/user/account</a></li>
<li>提供Playground：<a href="https://developers.google.com/oauthplayground" target="_blank" rel="external">https://developers.google.com/oauthplayground</a></li>
<li>提供测试控制台：<a href="https://apigee.com/providers" target="_blank" rel="external">https://apigee.com/providers</a></li>
</ol>
<p>##7、只管销售，但不提供售后服务##</p>
<p>###解决之道###</p>
<ol>
<li>Evangelists：<a href="http://sendgrid.com/developers" target="_blank" rel="external">http://sendgrid.com/developers</a></li>
<li>Events：<a href="https://www.twilio.com/conference" target="_blank" rel="external">https://www.twilio.com/conference</a></li>
<li>Hackathons</li>
<li>PS：不知道如何翻译，so总结一点，就是提供售后支持。</li>
</ol>
<p>##8、API太复杂了（你使用你自己定制的授权、协议、格式）##</p>
<p>###解决之道###</p>
<ol>
<li>使用REST（当前最流行的风格）</li>
<li>使用JSON格式（XML也还好）</li>
<li>保持务实：<a href="http://apigee.com/about/content/web-api-design" target="_blank" rel="external">http://apigee.com/about/content/web-api-design</a></li>
</ol>
<p>##9、你的TTFHW（Time to <em>(your)</em> First Hello World）太长##</p>
<p>###解决之道###</p>
<ol>
<li>极好的开发者体验：<a href="http://developerexperience.org" target="_blank" rel="external">http://developerexperience.org</a></li>
<li>在所有问题修正前，先说“Sorry”</li>
</ol>
<p>##10、你还没有从最好的学习到的##</p>
<ol>
<li>学习榜样的做法（Twilio,Stripe,GitHub.SendGrid）</li>
<li>保持进步</li>
<li>记住一句话：API是旅程，不是目的地</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[浅析12306前端优化点]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Other/%E6%B5%85%E6%9E%9012306%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="关于12306"><a href="#关于12306" class="headerlink" title="关于12306"></a>关于12306</h2><p>中国铁路客户服务中心(<a href="https://kyfw.12306.cn/" target="_blank" rel="external">12306.cn</a>)，相信大家都不陌生。作为一个超大型的类电商网站，具体业务不予置评，但从前端设计来看，却有诸多的不足。</p>
<h2 id="12306订票首页分析"><a href="#12306订票首页分析" class="headerlink" title="12306订票首页分析"></a>12306订票首页分析</h2><p>12306首页(<a href="https://kyfw.12306.cn/otn/" target="_blank" rel="external">https://kyfw.12306.cn/otn/</a>)请求达到32个，累计文件大小近800k。</p>
<p>其中有一半是图片资源，大小达到444kb。</p>
<p><img src="http://images.cnblogs.com/cnblogs_com/humin/771181/o_1.jpg" alt="12306首页图片资源"></p>
<p>另外有6个css文件请求，特别的是有2次css请求完全指向同一个css文件。</p>
<p><img src="http://images.cnblogs.com/cnblogs_com/humin/771181/o_2.jpg" alt="12306首页CSS请求"></p>
<p>还有8个js请求</p>
<p><img src="http://images.cnblogs.com/cnblogs_com/humin/771181/o_3.jpg" alt="12306首页JS请求"></p>
<p>这就是首页初次打开所需要的内容，当然还有两个html页面，就不计算了。可以看到，打开整个页面文件大小达到800k，和taobao，jd之类的比起来，这个大小是很小的，但是为什么给用户的体验就是卡顿、加载中、加载中呢？</p>
<p>接下来，就从前端的角度来看下，有没有可以优化的地方呢？</p>
<h2 id="优化1、使用浏览器缓存"><a href="#优化1、使用浏览器缓存" class="headerlink" title="优化1、使用浏览器缓存"></a>优化1、使用浏览器缓存</h2><p>在页面加载中，12306请求了如此多的资源，很多资源看起来，根本就是不太容易变化的，应在HTTP标头中设置有效期，尽可能多的使用浏览器缓存。</p>
<h2 id="优化2、图片优化"><a href="#优化2、图片优化" class="headerlink" title="优化2、图片优化"></a>优化2、图片优化</h2><p>数据传输时间，在访问网站的过程中，是一个耗时比较大的过程，其中又以图片传输为最，如果网站上有较多的图片，那么就要想办法减少体积，延迟加载等等。在12306的页面上，logo（<a href="https://kyfw.12306.cn/otn/resources/images/logo.png" target="_blank" rel="external">https://kyfw.12306.cn/otn/resources/images/logo.png</a> ），icon（<a href="https://kyfw.12306.cn/otn/resources/images/logo.png" target="_blank" rel="external">https://kyfw.12306.cn/otn/resources/images/logo.png</a> ）等等图片都是可以优化的。</p>
<h2 id="优化3、图片组合为CSS贴图"><a href="#优化3、图片组合为CSS贴图" class="headerlink" title="优化3、图片组合为CSS贴图"></a>优化3、图片组合为CSS贴图</h2><p>浏览器一般都有并发连接数限制，也就是同时请求的资源数量是有效的，前端优化点之一就是减少请求数量，那么12306中的诸多小图片完全可以合并到一个大图之中，采用贴图定位的方式，降低请求数量。</p>
<h2 id="优化4、暂缓JS解析"><a href="#优化4、暂缓JS解析" class="headerlink" title="优化4、暂缓JS解析"></a>优化4、暂缓JS解析</h2><p>由于JS是阻塞加载的，一般来说，把js放在head中会影响页面的渲染速度，很多时候，我们都推荐把js放在body结束标记之前。但12306偏偏没有这么做，把大把的js放在head中。</p>
<h2 id="优化5、使用css而不是图片控制背景"><a href="#优化5、使用css而不是图片控制背景" class="headerlink" title="优化5、使用css而不是图片控制背景"></a>优化5、使用css而不是图片控制背景</h2><p>这个似乎是大家都知道的常识，就算为了兼容老版本的浏览器，也可以考虑做优雅降级。但12306偏偏就大量使用背景图。</p>
<h2 id="优化6、CSS合并"><a href="#优化6、CSS合并" class="headerlink" title="优化6、CSS合并"></a>优化6、CSS合并</h2><p>同样为了减少请求数，应该尽量将CSS压缩合并。分析12306的站点css，发现部分合并了，部分没有，而且有些css连压缩都没做，很难想象是怎么打算的。另外，外部控件的样式（不会变的样式）完全可以打包放到cdn上。</p>
<h2 id="优化7、JS合并"><a href="#优化7、JS合并" class="headerlink" title="优化7、JS合并"></a>优化7、JS合并</h2><p>JS同上，该打包就打包，不要搞一堆js出来，加载还慢。。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>抢票还是每年的一个老大难的问题。12306，你可以推说你的核心逻辑复杂，这个我接受。但你完全可以把前端的一些基本优化点做到吧。就算我买不到票，至少我抢票的时候心情不至于太差。。</p>
<p>以上，抢票之余作为一个伪前端的发泄。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[程序集强签名]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Other/%E7%A8%8B%E5%BA%8F%E9%9B%86%E5%BC%BA%E7%AD%BE%E5%90%8D/</url>
      <content type="html"><![CDATA[<h2 id="1、特点"><a href="#1、特点" class="headerlink" title="1、特点"></a>1、特点</h2><p>1.1、强签名的程序集可以注册到GAC（全局应用程序集缓存）,不同的应用程序可以共享同一个dll。</p>
<p>1.2、强签名的库（应用程序）只能引用强签名的库。非强签名的库（应用程序）没有限制，既可以引用强签名的库，也可以引用非强签名的库。（实际测试，强签名的应用只引用非强签名的程序集但不使用是可以的，只要使用了引入库的东西，那就会报：引用的程序集没有强签名）</p>
<p>1.3、强签名无法保护源代码，但能防止dll被第三方篡改。</p>
<p>1.4、能防止dll冲突。</p>
<h2 id="2、方法"><a href="#2、方法" class="headerlink" title="2、方法"></a>2、方法</h2><p><strong>–如果有源代码</strong></p>
<p>项目 -&gt; 右键 -&gt; 属性 -&gt; 签名：</p>
<p><img src="http://7ximjo.com1.z0.glb.clouddn.com/1.png" alt="Signing panel"></p>
<p>勾选 Sign the assembly（签名程序集）</p>
<p><img src="http://7ximjo.com1.z0.glb.clouddn.com/2.png" alt="Signing panel"></p>
<p>填写 key file name，如果勾选了密码保护key file，那么就输入密码。点击OK就创建好了签名文件。</p>
<p>将属性保存，然后再次编译，程序集就是强签名程序集了。</p>
<p><strong>–如果没有源代码</strong></p>
<p>1、首先创建一个签名key file，可以通过有源代码的方式，创建key file备用；也可以通过VS 控制台执行<code>sn.exe -k D:\sn.snk</code> 生成key。</p>
<p>2、将无源代码的dll，通过 <code>ILDASM.exe MagicOrm.dll /OUTPUT=D:\MagicOrm.il</code>进行反汇编</p>
<p><strong>注意：如果dll有资源文件，同时会生成MagicOrm.res文件</strong></p>
<p>3、带上签名文件重新汇编为dll，如果有资源文件生成，也需要带上，命令：<code>ILASM.exe MagicOrm.il /dll /output=D:\MagicOrm.dll /Key=sn.snk /Resource=MagicOrm.res</code></p>
<h2 id="Over"><a href="#Over" class="headerlink" title="Over"></a>Over</h2>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[NPM使用详解（下）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Other/NPM%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>在浏览本文之前，建议您先浏览《NPM使用详解（上）》</p>
<p>在上一文中，罗列出了最常用的NPM命令，那么本文将继续分解剩下的NPM命令</p>
<hr>
<h4 id="1、access"><a href="#1、access" class="headerlink" title="1、access"></a>1、access</h4><h4 id="2、adduser"><a href="#2、adduser" class="headerlink" title="2、adduser"></a>2、adduser</h4><pre><code>//用于启动在指定的git仓库添加用户的向导
npm adduser [--registry=url] [--scope=@orgname] [--always-auth]
//eg:
npm adduser --registry=http://registry.npmjs.org
</code></pre><h4 id="3、bin"><a href="#3、bin" class="headerlink" title="3、bin"></a>3、bin</h4><pre><code>//打印出npm执行安装的文件夹
npm bin
</code></pre><h4 id="4、bugs"><a href="#4、bugs" class="headerlink" title="4、bugs"></a>4、bugs</h4><pre><code>//查看某个包的issue列表
npm bugs &lt;pkgname&gt;
//eg:（将会用浏览器打开https://github.com/sindresorhus/del/issues）
npm bugs del 
// 可以直接在一个包的文件夹中执行无参数的命令，将自动打开该包的issue列表
//eg:(在del文件夹下执行cmd)
npm bugs
</code></pre><h4 id="5、build"><a href="#5、build" class="headerlink" title="5、build"></a>5、build</h4><h4 id="6、bundle-已过期"><a href="#6、bundle-已过期" class="headerlink" title="6、bundle(已过期)"></a>6、bundle(已过期)</h4><h4 id="7、completion"><a href="#7、completion" class="headerlink" title="7、completion"></a>7、completion</h4><h4 id="8、dedupe"><a href="#8、dedupe" class="headerlink" title="8、dedupe"></a>8、dedupe</h4><pre><code>//
npm dedupe [package names...]
//可简化为如下调用
npm ddp [package names...]
</code></pre><h4 id="9、deprecate"><a href="#9、deprecate" class="headerlink" title="9、deprecate"></a>9、deprecate</h4><pre><code>//为指定版本的包添加过期警告
npm deprecate &lt;name&gt;[@&lt;version&gt;] &lt;message&gt;
// eg:
npm deprecate my-thing@&quot;&lt; 0.2.3&quot; &quot;critical bug fixed in v0.2.3&quot;
</code></pre><h4 id="10、dist-tag"><a href="#10、dist-tag" class="headerlink" title="10、dist-tag"></a>10、dist-tag</h4><pre><code>npm dist-tag add &lt;pkg&gt;@&lt;version&gt; [&lt;tag&gt;]
npm dist-tag rm &lt;pkg&gt; &lt;tag&gt;
npm dist-tag ls [&lt;pkg&gt;]
</code></pre><h4 id="11、docs"><a href="#11、docs" class="headerlink" title="11、docs"></a>11、docs</h4><pre><code>//打开包的文档页面
npm docs [&lt;pkgname&gt; [&lt;pkgname&gt; ...]]
npm docs (with no args in a package dir)
// 打开包的首页readme
npm home [&lt;pkgname&gt; [&lt;pkgname&gt; ...]]
npm home (with no args in a package dir)
</code></pre><h4 id="12、edit"><a href="#12、edit" class="headerlink" title="12、edit"></a>12、edit</h4><pre><code>npm edit &lt;name&gt;[@&lt;version&gt;]
</code></pre><h4 id="13、explore"><a href="#13、explore" class="headerlink" title="13、explore"></a>13、explore</h4><pre><code>npm explore &lt;name&gt; [ -- &lt;cmd&gt;]
</code></pre><h4 id="14、help"><a href="#14、help" class="headerlink" title="14、help"></a>14、help</h4><pre><code>//打开本地npm的帮助文件
npm help &lt;topic&gt;
npm help some search terms
//eg:(打开config的本地帮助)
npm help config
</code></pre><h4 id="15、help-search"><a href="#15、help-search" class="headerlink" title="15、help-search"></a>15、help-search</h4><pre><code>//从npm的markdown文档中查询所有的term，并展示
npm help-search some search terms
</code></pre><h4 id="16、link"><a href="#16、link" class="headerlink" title="16、link"></a>16、link</h4><pre><code>npm link (in package folder)
npm link [@&lt;scope&gt;/]&lt;pkgname&gt;
npm ln (with any of the previous argument usage)
</code></pre><h4 id="17、logout"><a href="#17、logout" class="headerlink" title="17、logout"></a>17、logout</h4><pre><code>//从指定的仓库登出
npm logout [--registry=url] [--scope=@orgname]
</code></pre><h4 id="18、ls"><a href="#18、ls" class="headerlink" title="18、ls"></a>18、ls</h4><pre><code>//列举当前文件夹下的所有包
npm list [[@&lt;scope&gt;/]&lt;pkg&gt; ...]
npm ls [[@&lt;scope&gt;/]&lt;pkg&gt; ...]
npm la [[@&lt;scope&gt;/]&lt;pkg&gt; ...]
npm ll [[@&lt;scope&gt;/]&lt;pkg&gt; ...]
</code></pre><h4 id="19、npm"><a href="#19、npm" class="headerlink" title="19、npm"></a>19、npm</h4><pre><code>npm &lt;command&gt; [args]
</code></pre><h4 id="20、outdated-☆☆☆☆☆"><a href="#20、outdated-☆☆☆☆☆" class="headerlink" title="20、outdated(☆☆☆☆☆)"></a>20、outdated(☆☆☆☆☆)</h4><pre><code>//检查当前文件夹中的包版本（当前，需要，最新）
npm outdated [&lt;name&gt; [&lt;name&gt; ...]]
</code></pre><h4 id="21、owner"><a href="#21、owner" class="headerlink" title="21、owner"></a>21、owner</h4><pre><code>//管理包的拥有者
npm owner ls &lt;package name&gt;
npm owner add &lt;user&gt; &lt;package name&gt;
npm owner rm &lt;user&gt; &lt;package name&gt;
</code></pre><h4 id="22、pack-☆☆☆☆☆"><a href="#22、pack-☆☆☆☆☆" class="headerlink" title="22、pack(☆☆☆☆☆)"></a>22、pack(☆☆☆☆☆)</h4><pre><code>//压缩包文件夹
npm pack [&lt;pkg&gt; [&lt;pkg&gt; ...]]
//eg：在del目录中直接执行
npm pack
//或者在项目目录中，执行
npm pack del
</code></pre><h4 id="23、prefix"><a href="#23、prefix" class="headerlink" title="23、prefix"></a>23、prefix</h4><pre><code>//打印本地前缀到控制台，如果-g，则打印全局的前缀
</code></pre><h4 id="24、prune-☆☆☆☆☆"><a href="#24、prune-☆☆☆☆☆" class="headerlink" title="24、prune(☆☆☆☆☆)"></a>24、prune(☆☆☆☆☆)</h4><pre><code>//删除多余的包(如果指定包名，则删除指定的包)
npm prune [&lt;name&gt; [&lt;name ...]]
npm prune [&lt;name&gt; [&lt;name ...]] [--production]
</code></pre><h4 id="25、publish"><a href="#25、publish" class="headerlink" title="25、publish"></a>25、publish</h4><pre><code>//发布包
npm publish &lt;tarball&gt; [--tag &lt;tag&gt;] [--access &lt;public|restricted&gt;]
npm publish &lt;folder&gt; [--tag &lt;tag&gt;] [--access &lt;public|restricted&gt;]
</code></pre><h4 id="26、rebuild"><a href="#26、rebuild" class="headerlink" title="26、rebuild"></a>26、rebuild</h4><pre><code>//重新编译包
npm rebuild [&lt;name&gt; [&lt;name&gt; ...]]
npm rb [&lt;name&gt; [&lt;name&gt; ...]]
</code></pre><h4 id="27、repo"><a href="#27、repo" class="headerlink" title="27、repo"></a>27、repo</h4><pre><code>//在浏览器中打开包的仓库地址
npm repo &lt;pkgname&gt;
npm repo (with no args in a package dir)
</code></pre><h4 id="28、restart"><a href="#28、restart" class="headerlink" title="28、restart"></a>28、restart</h4><pre><code>//重新启动包
npm restart [-- &lt;args&gt;]
</code></pre><h4 id="29、rm"><a href="#29、rm" class="headerlink" title="29、rm"></a>29、rm</h4><pre><code>//移除包
npm rm &lt;name&gt;
npm r &lt;name&gt;
npm uninstall &lt;name&gt;
npm un &lt;name&gt;
</code></pre><h4 id="30、root"><a href="#30、root" class="headerlink" title="30、root"></a>30、root</h4><pre><code>//打印node_modules文件夹到控制台
npm root
</code></pre><h4 id="31、run-script"><a href="#31、run-script" class="headerlink" title="31、run-script"></a>31、run-script</h4><pre><code>//运行任意的包脚本
npm run-script [command] [-- &lt;args&gt;]
npm run [command] [-- &lt;args&gt;]
</code></pre><h4 id="32、search"><a href="#32、search" class="headerlink" title="32、search"></a>32、search</h4><h4 id="33、shrinkwrap"><a href="#33、shrinkwrap" class="headerlink" title="33、shrinkwrap"></a>33、shrinkwrap</h4><h4 id="34、star"><a href="#34、star" class="headerlink" title="34、star"></a>34、star</h4><pre><code>//给指定的包加star
npm star &lt;pkgname&gt; [&lt;pkg&gt;, ...]
npm unstar &lt;pkgname&gt; [&lt;pkg&gt;, ...]
</code></pre><h4 id="35、stars"><a href="#35、stars" class="headerlink" title="35、stars"></a>35、stars</h4><pre><code>//查看指定用户的stars
npm stars
npm stars [username]
</code></pre><h4 id="36、start"><a href="#36、start" class="headerlink" title="36、start"></a>36、start</h4><h4 id="37、stop"><a href="#37、stop" class="headerlink" title="37、stop"></a>37、stop</h4><h4 id="38、tag"><a href="#38、tag" class="headerlink" title="38、tag"></a>38、tag</h4><h4 id="39、test"><a href="#39、test" class="headerlink" title="39、test"></a>39、test</h4><h4 id="40、unpublish"><a href="#40、unpublish" class="headerlink" title="40、unpublish"></a>40、unpublish</h4><h4 id="41、version"><a href="#41、version" class="headerlink" title="41、version"></a>41、version</h4><pre><code>npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease]

//查看项目相关信息
npm version
npm version major
</code></pre><h4 id="42、view"><a href="#42、view" class="headerlink" title="42、view"></a>42、view</h4><h4 id="43、whoami"><a href="#43、whoami" class="headerlink" title="43、whoami"></a>43、whoami</h4>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[OWIN 中文版]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/OWIN/OWIN%20%E4%B8%AD%E6%96%87%E7%89%88/</url>
      <content type="html"><![CDATA[<h1 id="OWIN：Open-Web-Server-Interface-for-NET"><a href="#OWIN：Open-Web-Server-Interface-for-NET" class="headerlink" title="OWIN：Open Web Server Interface for .NET"></a>OWIN：Open Web Server Interface for .NET</h1><p>Version：1.0</p>
<p>原文地址：<a href="http://owin.org/html/spec/owin-1.0.html" target="_blank" rel="external">http://owin.org/html/spec/owin-1.0.html</a></p>
<h2 id="0、Table-Intro"><a href="#0、Table-Intro" class="headerlink" title="0、Table Intro"></a>0、Table Intro</h2><ol>
<li>Overview</li>
<li>Definitions</li>
<li>Request Execution<ol>
<li></li>
<li>环境</li>
<li>协议头</li>
<li>协议体</li>
<li>响应体</li>
<li>请求生命周期</li>
</ol>
</li>
<li>应用启动</li>
<li>URI Re<ol>
<li>URI 结构</li>
<li>主机名</li>
<li>路径</li>
<li>URI</li>
<li>预编码</li>
</ol>
</li>
<li>错误处理<ol>
<li>应用错误</li>
<li>服务器错误</li>
</ol>
</li>
<li>版本  </li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[02-PHP基础语法（上）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/PHP%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/02-PHP%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h1><p>学习一门语言，首先要了解它能做什么？其次，就应该去学习应该如何做。那这个的前提就是语法的学习。</p>
<p>语法决定了代码应该如何写（仅仅是可运行），接着我们就来看看PHP它的语法吧。</p>
<p><em>注意：本文测试代码全部运行在PHP7上。</em></p>
<h1 id="1、基础中的基础"><a href="#1、基础中的基础" class="headerlink" title="1、基础中的基础"></a>1、基础中的基础</h1><p>1.1、 PHP文件以 <code>.php</code> 结尾，对于渲染HTML的PHP文件，其本质还是一个HTML页面，只要可以嵌入PHP逻辑代码。</p>
<p>1.2、 在前端 <code>.php</code> 文件中，要嵌入PHP代码，需要使用 &lt;?php 你的代码 ?&gt;。</p>
<p>1.3、PHP的每个语句以分号结束（部分场景省略分号也不报错）。</p>
<p>1.4、 PHP中，有两种注释方式。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 我是单行注释</span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">  我是多行注释</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>1.5、PHP的输出，也有两种方式</p>
<p>一是 <code>echo</code> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo &apos;abc&apos;, &apos;aaaa&apos;;</div><div class="line">echo(&apos;abc&apos;, &apos;aaaa&apos;);</div></pre></td></tr></table></figure>
<p>二是 <code>print</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print &apos;abc&apos;;</div><div class="line">print(&apos;abc&apos;);</div><div class="line">$result = print(&apos;abc&apos;);</div></pre></td></tr></table></figure>
<p><strong>注意：<code>echo</code>、<code>print</code>即是语言结构，也算是函数，所以可以不加括号调用，也可加括号调用。</strong></p>
<p><strong>注意2：<code>echo</code> 输出没有返回值，<code>print</code> 有返回值1。</strong></p>
<p><strong>注意3：<code>echo</code> 输出比 <code>print</code> 快！</strong></p>
<p>1.6、数据的格式化输出，在输入时，我们可以用更简单的方法拼接字符串</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$name = <span class="string">'Jay'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'My name is &#123;$name&#125;'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"My name is &#123;$name&#125;"</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">'My name is &#123;$name&#125;'</span>;</div><div class="line"><span class="keyword">print</span> <span class="string">"My name is &#123;$name&#125;"</span>;</div></pre></td></tr></table></figure>
<p>会输出：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">My name is &#123;$name&#125;</div><div class="line">My name is Jay</div><div class="line">My name is &#123;$name&#125;</div><div class="line">My name is Jay</div></pre></td></tr></table></figure>
<p><strong>！！！注意：只有当使用双引号（””）包裹字符串的时候，才可以使用简易字符串拼接。</strong></p>
<h1 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h1><p>PHP有个和大多数语言雷同的类型系统，系统提供了如下类型：</p>
<ol>
<li>String（字符串）</li>
<li>Integer（整型）</li>
<li>Float（浮点型）</li>
<li>Boolean（布尔型）</li>
<li>Array（数组）</li>
<li>Object（对象）</li>
<li>NULL（空值）。</li>
</ol>
<p>PHP中的变量命名以$为标记，之后跟变量名称（变量名字只能包含数字字母和下划线），变量区分大小写。</p>
<p>PHP是弱类型语言，所以同一个变量，可以存储多种类型数据。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$a = <span class="string">'我是字符串'</span>; <span class="comment">//定义字符串（单引号，双引号皆可）</span></div><div class="line"><span class="keyword">echo</span> $a, <span class="string">'&lt;br&gt;'</span>;</div><div class="line">$a = <span class="number">10</span>; <span class="comment">// 我的整数</span></div><div class="line"><span class="keyword">echo</span> $a, <span class="string">'&lt;br&gt;'</span>;</div><div class="line">$a = <span class="number">0x10</span>; <span class="comment">// 定义16进制整数</span></div><div class="line"><span class="keyword">echo</span> $a, <span class="string">'&lt;br&gt;'</span>;</div><div class="line">$a = <span class="number">010</span>; <span class="comment">// 定义8进制整数</span></div><div class="line"><span class="keyword">echo</span> $a, <span class="string">'&lt;br&gt;'</span>;</div><div class="line">$a = <span class="number">0.1</span>; <span class="comment">// 浮点数</span></div><div class="line"><span class="keyword">echo</span> $a, <span class="string">'&lt;br&gt;'</span>;</div><div class="line">$a = <span class="number">8E-5</span>; <span class="comment">// 指数形式定义浮点数</span></div><div class="line"><span class="keyword">echo</span> $a, <span class="string">'&lt;br&gt;'</span>;</div><div class="line">$a = <span class="keyword">true</span>; <span class="comment">// Bool类型，只有true,false，注意不区分大小写，写成True，TrUe都没问题。</span></div><div class="line"><span class="keyword">echo</span> $a, <span class="string">'&lt;br&gt;'</span>;</div><div class="line">$a = <span class="keyword">NuLL</span>; <span class="comment">// NULL类型只有一个null值，同样不区分大小写。</span></div></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">我是字符串<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">10<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">16<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">8<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">0.1<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">8.0E-5<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">1<span class="tag">&lt;<span class="name">br</span>&gt;</span>  // 注意，Bool类型，true会输出1，false会输出0</div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> // NULL类型，无任何输出</div></pre></td></tr></table></figure>
<p>以上演示了PHP中的简单类型，还剩下Array和Object两个复杂类型。</p>
<p><strong>Array 类型</strong></p>
<p>数组又分为以下几种：</p>
<ol>
<li>简单数组（数值数组，下标为数字）</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$arr = [<span class="string">'item1'</span>, <span class="string">'item2'</span>];</div><div class="line"><span class="comment">// 等价于</span></div><div class="line">$arr = <span class="keyword">array</span>(<span class="string">'item1'</span>, <span class="string">'item2'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 仅能通过下标访问元素</span></div><div class="line"><span class="keyword">echo</span> $arr[<span class="number">0</span>];</div></pre></td></tr></table></figure>
<ol>
<li>关联数组</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$arr = [<span class="string">'key1'</span> =&gt; <span class="string">'value1'</span>, <span class="string">'key2'</span> =&gt; <span class="string">'value2'</span>];</div><div class="line"><span class="comment">//等价于</span></div><div class="line">$arr = <span class="keyword">array</span>(<span class="string">'key1'</span> =&gt; <span class="string">'value1'</span>, <span class="string">'key2'</span> =&gt; <span class="string">'value2'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 仅能通过key访问</span></div><div class="line"><span class="keyword">echo</span> $arr[<span class="string">'key1'</span>];</div></pre></td></tr></table></figure>
<ol>
<li>多维数组（数组包含数组）</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$arr = [<span class="string">'key1'</span> =&gt; [<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="string">'key2'</span> =&gt; [<span class="string">'c'</span>, <span class="string">'d'</span>]];</div><div class="line"><span class="comment">//等价于</span></div><div class="line">$arr = <span class="keyword">array</span>(<span class="string">'key1'</span> =&gt; <span class="keyword">array</span>(<span class="string">'a'</span>, <span class="string">'b'</span>), <span class="string">'key2'</span> =&gt; <span class="keyword">array</span>(<span class="string">'c'</span>, <span class="string">'d'</span>));</div><div class="line"></div><div class="line"><span class="comment">// 根据数组类型，通过key或者是下标访问</span></div><div class="line"><span class="keyword">echo</span> $arr[<span class="string">'key1'</span>][<span class="number">0</span>];</div></pre></td></tr></table></figure>
<p>数组Demo合集：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">$arr = [<span class="string">'item1'</span>, <span class="string">'item2'</span>];</div><div class="line">print_r($arr);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>; </div><div class="line">$arr = <span class="keyword">array</span>(<span class="string">'item1'</span>, <span class="string">'item2'</span>);</div><div class="line">print_r($arr);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>; </div><div class="line"><span class="comment">//仅能通过下标访问</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'$arr第一个元素是：'</span>, $arr[<span class="number">0</span>], <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</div><div class="line"></div><div class="line">$arr = [<span class="string">'key1'</span> =&gt; <span class="string">'value1'</span>, <span class="string">'key2'</span> =&gt; <span class="string">'value2'</span>];</div><div class="line">print_r($arr);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line">$arr = <span class="keyword">array</span>(<span class="string">'key1'</span> =&gt; <span class="string">'value1'</span>, <span class="string">'key2'</span> =&gt; <span class="string">'value2'</span>);</div><div class="line">print_r($arr);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line"><span class="comment">// 通过key访问</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'$arr的key1值是：'</span>, $arr[<span class="string">'key1'</span>], <span class="string">'key2值是：'</span>, $arr[<span class="string">'key2'</span>], <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</div><div class="line"></div><div class="line">$arr = [<span class="string">'key1'</span> =&gt; [<span class="string">'a'</span>, <span class="string">'b'</span>], <span class="string">'key2'</span> =&gt; [<span class="string">'c'</span>, <span class="string">'d'</span>]];</div><div class="line">print_r($arr);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line">$arr = <span class="keyword">array</span>(<span class="string">'key1'</span> =&gt; <span class="keyword">array</span>(<span class="string">'a'</span>, <span class="string">'b'</span>), <span class="string">'key2'</span> =&gt; <span class="keyword">array</span>(<span class="string">'c'</span>, <span class="string">'d'</span>));</div><div class="line">print_r($arr);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line"><span class="comment">// 根据数组类型，通过key或者是下标访问</span></div><div class="line"><span class="keyword">echo</span> $arr[<span class="string">'key1'</span>][<span class="number">0</span>], $arr[<span class="string">'key2'</span>][<span class="number">1</span>];</div></pre></td></tr></table></figure>
<p><strong>Object 类型</strong></p>
<p>PHP中的Object类型，和编译性语言比较类似，是通过new class得到的。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</div><div class="line">  <span class="keyword">var</span> $userName;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setName</span><span class="params">($name)</span></span>&#123;</div><div class="line">    <span class="keyword">$this</span>-&gt;userName = $name;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;userName;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">$user = <span class="keyword">new</span> User();</div><div class="line">$user-&gt;setName(<span class="string">'Jay'</span>);</div><div class="line"><span class="keyword">echo</span> $user-&gt;getName();</div></pre></td></tr></table></figure>
<p>以上代码会输出：<code>Jay</code></p>
<h1 id="4、常量与变量"><a href="#4、常量与变量" class="headerlink" title="4、常量与变量"></a>4、常量与变量</h1><h2 id="4-1、常量"><a href="#4-1、常量" class="headerlink" title="4.1、常量"></a>4.1、常量</h2><p>PHP中的常量必须使用 <code>define</code> 函数来定义。语法如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(常量名称:string, 常量值, 是否区分大小写:bool-默认为<span class="keyword">false</span>);</div><div class="line"></div><div class="line"><span class="comment">//定义一个常量</span></div><div class="line">define(<span class="string">'PI'</span>, <span class="number">3.1415926</span>, <span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>常量值被定义后，在脚本的其他任何地方都不能被改变，且常量是全局可用的。</p>
<h2 id="4-2、变量"><a href="#4-2、变量" class="headerlink" title="4.2、变量"></a>4.2、变量</h2><p>PHP的变量有如下几类：</p>
<ol>
<li>local - 局部变量</li>
<li>global - 全局变量</li>
<li>static - 静态变量</li>
<li>parameter - 参数变量</li>
</ol>
<h3 id="4-2-1、局部变量"><a href="#4-2-1、局部变量" class="headerlink" title="4.2.1、局部变量"></a>4.2.1、局部变量</h3><p>定义在函数中的变量，被称之为局部变量，只在当前函数有效。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</div><div class="line">  $funName = <span class="string">'fun1'</span>;</div><div class="line">  <span class="keyword">echo</span> $funName;</div><div class="line">&#125;</div><div class="line">fun();</div><div class="line"><span class="keyword">echo</span> $funName; <span class="comment">// 出现警告：Undefined variable: funName</span></div></pre></td></tr></table></figure>
<h3 id="4-2-2、全局变量"><a href="#4-2-2、全局变量" class="headerlink" title="4.2.2、全局变量"></a>4.2.2、全局变量</h3><p>定义在函数外部的变量则是全局变量，如果要在函数内部使用，则需要使用global关键字。示例如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$appName = <span class="string">'test'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="comment">// 需要指定，当访问$appName时，是访问全局的$appName，否则会出现一个警告，未定义的变量。</span></div><div class="line">  <span class="keyword">global</span> $appName; </div><div class="line">  <span class="keyword">echo</span> $appName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fun1();</div></pre></td></tr></table></figure>
<h3 id="4-2-3、静态变量"><a href="#4-2-3、静态变量" class="headerlink" title="4.2.3、静态变量"></a>4.2.3、静态变量</h3><p>局部变量，一般是执行完函数，即被释放。如果想保留该变量，那么就可以使用静态变量。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funs</span><span class="params">()</span></span>&#123;</div><div class="line">  $id = <span class="number">1</span>;</div><div class="line">  <span class="keyword">static</span> $static_id = <span class="number">1</span>;</div><div class="line">  <span class="keyword">echo</span> <span class="string">'$id = '</span>, $id, <span class="string">', $static_id='</span>, $static_id, <span class="string">'&lt;br&gt;'</span>;</div><div class="line">  $id++;</div><div class="line">  $static_id++;</div><div class="line">&#125;</div><div class="line">funs();</div><div class="line">funs();</div></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$id = 1, $static_id=1</div><div class="line">$id = 1, $static_id=2</div></pre></td></tr></table></figure>
<p>我们可以看到 <code>$static_id</code> 并没有被释放，一直有效。</p>
<p><strong>注意：静态变量本质上还是局部变量。</strong></p>
<h3 id="4-2-4-参数变量"><a href="#4-2-4-参数变量" class="headerlink" title="4.2.4 参数变量"></a>4.2.4 参数变量</h3><p>这个没啥好说的，函数参数中的变量，类似于局部变量。</p>
<h3 id="4-2-5-超级全局变量"><a href="#4-2-5-超级全局变量" class="headerlink" title="4.2.5 超级全局变量"></a>4.2.5 超级全局变量</h3><p>什么是超级全局变量呢？</p>
<p>不需要特别定义，可直接在全局任何地方使用,是PHP预定义的全局变量。它们是：</p>
<ol>
<li>$GLOBALS</li>
<li>$_SERVER</li>
<li>$_REQUEST</li>
<li>$_POST</li>
<li>$_GET</li>
<li>$_FILES</li>
<li>$_ENV</li>
<li>$_COOKIE</li>
<li>$_SESSION</li>
</ol>
<h1 id="5、其他"><a href="#5、其他" class="headerlink" title="5、其他"></a>5、其他</h1><p>完整Demo地址：<a href="https://github.com/hstarorg/HstarDemoProject/blob/master/php_demo/04-grammar/01.php" target="_blank" rel="external">PHP语法演示Demo01</a></p>
<p>更多内容，请看下回分解。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[01_记一次MongoDB裸奔]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/MongoDB%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/01_%E8%AE%B0%E4%B8%80%E6%AC%A1MongoDB%E8%A3%B8%E5%A5%94/</url>
      <content type="html"><![CDATA[<h1 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h1><p>大意失荆州，裸奔的 <code>MongoDB</code> 被黑了。虽然并不是什么非常重要的数据，但也给自己敲响的一个警钟。虽然我们平时不容易接触到数据安全，但我们在开发，部署项目的时候，一定要养成良好的安全意识。</p>
<p>根据木桶原理，整个系统的安全性，取决于整个系统最薄弱的环节。所以，我们要尽可能多的考虑更多组成部分的安全性。</p>
<h1 id="事件发现"><a href="#事件发现" class="headerlink" title="事件发现"></a>事件发现</h1><p>本月初，发生了大家所熟知的 <code>MondoDB赎金事件</code>。当时本人也保持了一定的关注，并去 <a href="https://www.shodan.io/" target="_blank" rel="external">https://www.shodan.io/</a> 溜达了一圈，顺便连了几个裸奔的MongoDB（当然，绝未做任何更改）。</p>
<p>直到昨天下午，发现我应用的管理员账户登录不上了。多次检查密码，发现还是无法解决，此时有点怀疑被黑了。由于应用有新建用户功能，新建一个和管理员账户同名的账户，居然成功了。这个时候，我想多半是遭了，只等晚上回去确认了。</p>
<p>回到家，远程到服务器，一连接，果然遭了（可怜我那几十个代码片段 + 几个Gist），需要赎金0.1BTC。</p>
<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>此时可能就要问了，都知道了裸奔不安全，为嘛还不修复？</p>
<p>我能说我懒么？心大么？</p>
<p>因为当时我部署的版本的3.2，据说3.2默认没有开启外网访问。我心大到直接未经尝试就认为这是对的。</p>
<p>实际这句话也没错，Linux版本的 <code>3.x</code> 确实是默认绑定到 <code>127.0.0.1</code> 上的。可TM我是运行在 <code>Windows</code> 上的，由于安装的时候，默认没有创建配置文件，导致一运行就绑定到所有host上了。</p>
<p><strong>当上，以上都是外因！根本原因还是自己疏忽大意，安全意识薄弱。</strong></p>
<h1 id="解决（重头再来）"><a href="#解决（重头再来）" class="headerlink" title="解决（重头再来）"></a>解决（重头再来）</h1><p>没有备份，直接无法恢复。</p>
<p>另外，0.1个BTC我是拿不出来的（我也不相信他会好心给你恢复），再加上数据也不是太重要，就直接把安全设置配置上，重头开始。</p>
<p>那现在是如何配置安全性的呢？</p>
<p>以下操作，均在未开启授权访问时执行</p>
<p>首先是添加用户并设置角色：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 切换到admin库</span></div><div class="line">use admin</div><div class="line"></div><div class="line"><span class="comment"># 创建User</span></div><div class="line">db.createUser(&#123;user: <span class="string">'&lt;name&gt;'</span>, <span class="built_in">pwd</span>: <span class="string">'&lt;password&gt;'</span>, roles: [</div><div class="line">	&#123;role: <span class="string">'readWrite'</span>, db: <span class="string">'&lt;dbname&gt;'</span>&#125;,</div><div class="line">	&#123;role: <span class="string">'dbAdmin'</span>, db: <span class="string">'&lt;dbname&gt;'</span>&#125;</div><div class="line">]&#125;)</div></pre></td></tr></table></figure>
<p>接下来就是创建一个配置文件（2.6之后，配置文件是yaml格式），内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">systemLog:</div><div class="line">    destination: file</div><div class="line">    path: c:\data\log\mongod.log</div><div class="line">storage:</div><div class="line">    dbPath: c:\data\db</div><div class="line">net:</div><div class="line">    bindIp: 127.0.0.1</div><div class="line">    port: 27017</div></pre></td></tr></table></figure>
<p><strong>注意：配置文件中一定要设定 <code>log path</code> 和 <code>db path</code></strong></p>
<p><strong>注意2：如果要限制外网访问，就可以配置 net -&gt; bindIp，另外也可以调整端口</strong></p>
<p>此时如何运行呢？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config <span class="string">"D:\MongoDB\mongod.conf"</span> --auth</div></pre></td></tr></table></figure>
<p>带上 <code>--auth</code> 就是开启授权访问。</p>
<p>最后客户端访问也需要稍微修改下，只需要修改 <code>mongoAddress</code> 配置即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># MongoDB Connection String Format</span></div><div class="line">mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</div><div class="line"></div><div class="line"><span class="comment"># 实例地址</span></div><div class="line">const mongoAddress = <span class="string">'mongodb://admin:Pwd0603@127.0.0.1:27017/dojo'</span></div></pre></td></tr></table></figure>
<h3 id="就这么一点简单的步骤，就能实现-MongoDB-较高的安全性，可这却是非常容易忽略的点。希望大家引以为戒。"><a href="#就这么一点简单的步骤，就能实现-MongoDB-较高的安全性，可这却是非常容易忽略的点。希望大家引以为戒。" class="headerlink" title="就这么一点简单的步骤，就能实现 MongoDB 较高的安全性，可这却是非常容易忽略的点。希望大家引以为戒。"></a>就这么一点简单的步骤，就能实现 <code>MongoDB</code> 较高的安全性，可这却是非常容易忽略的点。希望大家引以为戒。</h3><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>一定不能疏忽大意，安全意识要加强。</li>
<li>一定要结果实际验证，才能下结论。不能不清楚外置条件，人云亦云。</li>
<li>不要有我的应用小，就不会被黑这种想法。批量攻击，才不会放过你。</li>
<li>定期做好数据备份，被攻击是一回事，能否恢复又是另外一回事了。</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[那些不常见的JavaScript题目（下）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/JS%E6%9C%AD%E8%AE%B0/%E9%82%A3%E4%BA%9B%E4%B8%8D%E5%B8%B8%E8%A7%81%E7%9A%84JavaScript%E9%A2%98%E7%9B%AE%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>JavaScript超乎寻常的灵活性，让JavaScript可以有很多特殊的用法，让我们来领略一下它们的风采吧。</p>
<p>此为下篇，上篇请查阅：<a href="那些不常见的JavaScript题目（上）.md">上篇</a></p>
<h2 id="1、那些不常见（好玩）的题目（下）"><a href="#1、那些不常见（好玩）的题目（下）" class="headerlink" title="1、那些不常见（好玩）的题目（下）"></a>1、那些不常见（好玩）的题目（下）</h2><hr>
<h3 id="1-21、"><a href="#1-21、" class="headerlink" title="1.21、"></a>1.21、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.MIN_VALUE &gt; <span class="number">0</span></div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察数字的最小值，它的最小值是大于0的浮点数。</p>
<p><strong>答案：</strong> <code>true</code></p>
<hr>
<h3 id="1-22、"><a href="#1-22、" class="headerlink" title="1.22、"></a>1.22、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span>, <span class="number">3</span> &lt; <span class="number">2</span> &lt; <span class="number">1</span>]</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察运算顺序。直接从左往右计算，即可。等价于：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="literal">true</span> &lt; <span class="number">3</span>, <span class="literal">false</span> &lt; <span class="number">1</span>]</div><div class="line">=&gt;</div><div class="line">[<span class="number">1</span> &lt; <span class="number">3</span>, <span class="number">0</span> &lt; <span class="number">1</span>]</div></pre></td></tr></table></figure>
<p><strong>答案：</strong> <code>[true, true]</code></p>
<hr>
<h3 id="1-23、"><a href="#1-23、" class="headerlink" title="1.23、"></a>1.23、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span> == [[[<span class="number">2</span>]]]</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察类型转化，全部调用toString(),转换为了<code>&#39;2&#39;</code></p>
<p><strong>答案：</strong> <code>true</code></p>
<hr>
<h3 id="1-24、"><a href="#1-24、" class="headerlink" title="1.24、"></a>1.24、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">3.</span>toString();</div><div class="line"><span class="number">3.</span>.toString();</div><div class="line"><span class="number">3.</span>..toString();</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察.的结合性问题，对于到底属于数字还是函数调用呢，其实只能是数字。三个点是什么语法？</p>
<p><strong>注意：这也导致了整数字面量无法直接调用toString()</strong></p>
<p><strong>答案：</strong> <code>error, &#39;3&#39;, error</code></p>
<hr>
<h3 id="1-25、"><a href="#1-25、" class="headerlink" title="1.25、"></a>1.25、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> x = y = <span class="number">1</span>;</div><div class="line">&#125;)();</div><div class="line"><span class="built_in">console</span>.log(y);</div><div class="line"><span class="built_in">console</span>.log(x);</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察作用域问题和var定义变量问题。当没有用var定义变量时，变量会成为全局变量。</p>
<p><strong>答案：</strong> <code>1, error</code></p>
<hr>
<h3 id="1-26、"><a href="#1-26、" class="headerlink" title="1.26、"></a>1.26、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="regexp">/123/</span>, b = <span class="regexp">/123/</span>;</div><div class="line">a == b</div><div class="line">a === b</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察正则表达式比较，即使字面量相等，它们也不相等。</p>
<p><strong>答案：</strong> <code>false, false</code></p>
<hr>
<h3 id="1-27、"><a href="#1-27、" class="headerlink" title="1.27、"></a>1.27、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">    b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">    c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>];</div><div class="line">a ==  b;</div><div class="line">a === b;</div><div class="line">a &gt; c;</div><div class="line">a &lt; c;</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题同样考察对象比较。当比较相等时，引用不同，所以皆不等。当比较大小时，会按照数组元素，依次比较字典序。</p>
<p><strong>答案：</strong> <code>false, false, false, true</code></p>
<hr>
<h3 id="1-28、"><a href="#1-28、" class="headerlink" title="1.28、"></a>1.28、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;&#125;, b = <span class="built_in">Object</span>.prototype;</div><div class="line">[a.prototype === b, <span class="built_in">Object</span>.getPrototypeOf(a) === b]</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题比较有误导性，对于一个对象实例来说，获取原型的方法是：<code>a.constructor.prototype</code> 或者是 <code>Object.getPrototypeOf(a)</code>，对于 <code>a.prototype</code>，直接当成一个属性访问，由于未定义，所以会产生 <code>undefined</code>。</p>
<p><strong>答案：</strong> <code>false, true</code></p>
<hr>
<h3 id="1-29、"><a href="#1-29、" class="headerlink" title="1.29、"></a>1.29、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> a = f.prototype, b = <span class="built_in">Object</span>.getPrototypeOf(f);</div><div class="line">a === b</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题同样考察原型相关知识，前者是f的原型，后者是f的构造函数（Function）的原型。</p>
<p><strong>答案：</strong> <code>false</code></p>
<hr>
<h3 id="1-30、"><a href="#1-30、" class="headerlink" title="1.30、"></a>1.30、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; &#125;</div><div class="line"><span class="keyword">var</span> oldName = foo.name;</div><div class="line">foo.name = <span class="string">"bar"</span>;</div><div class="line">[oldName, foo.name]</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 函数的名称为常量，但需要注意，赋值不会报错。</p>
<p><strong>答案：</strong> <code>[&#39;foo&#39;, &#39;foo&#39;]</code></p>
<hr>
<h3 id="1-31、"><a href="#1-31、" class="headerlink" title="1.31、"></a>1.31、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"1 2 3"</span>.replace(<span class="regexp">/\d/g</span>, <span class="built_in">parseInt</span>)</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察 <code>String.replace()</code> 的回调函数，它的回调函数定义是 <code>funcation(matchValue, group, valueIndex, sourceStr){}</code>，依次为匹配到的值、正则分组，该值在字符串中的index，字符串本身。由于在该题中，正则没有分组，所以，调用了三次 <code>parseInt</code> 如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">'1'</span>, <span class="number">0</span>, <span class="string">'1 2 3'</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'2'</span>, <span class="number">2</span>, <span class="string">'1 2 3'</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'3'</span>, <span class="number">4</span>, <span class="string">'1 2 3'</span>);</div></pre></td></tr></table></figure>
<p><strong>答案：</strong> <code>&#39;1 NaN 3&#39;</code></p>
<hr>
<h3 id="1-32、"><a href="#1-32、" class="headerlink" title="1.32、"></a>1.32、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> parent = <span class="built_in">Object</span>.getPrototypeOf(f);</div><div class="line">f.name <span class="comment">// ?</span></div><div class="line">parent.name <span class="comment">// ?</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">eval</span>(f.name) <span class="comment">// ?</span></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">eval</span>(parent.name) <span class="comment">//  ?</span></div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 通过 <code>Object.getPrototypeOf()</code> 获取原型，参数是实例，当f为实例的时候，获取实例f的原型就等于 <code>Function.prototype</code>，由于Function的原型还是一个function。所以 <code>parent = Function.prototype 是一个没有名字的function</code>。</p>
<p>因此:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f.name <span class="comment">// f</span></div><div class="line">parent.name <span class="comment">// ''</span></div></pre></td></tr></table></figure></p>
<p>使用 <code>eval</code>，执行f，会返回f这个函数，执行’’,会返回 <code>undefined</code>。</p>
<p><strong>答案：</strong> <code>&#39;f&#39;, &#39;&#39;, &#39;function&#39;, &#39;undefined&#39;</code></p>
<hr>
<h3 id="1-33、"><a href="#1-33、" class="headerlink" title="1.33、"></a>1.33、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lowerCaseOnly =  <span class="regexp">/^[a-z]+$/</span>;</div><div class="line">[lowerCaseOnly.test(<span class="literal">null</span>), lowerCaseOnly.test()]</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 正则 <code>test()</code> 方法，会把参数当成字符串来使用，但要注意，<code>null</code> 会被当成 <code>&#39;null&#39;</code>来使用，无参则为 <code>undefined</code>。 </p>
<p><strong>答案：</strong> <code>[true, true]</code></p>
<hr>
<h3 id="1-34、"><a href="#1-34、" class="headerlink" title="1.34、"></a>1.34、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[,,,].join(<span class="string">", "</span>)</div></pre></td></tr></table></figure>
<p><strong>解析：</strong>  由于JS的Array本质也是对象，所以具有对象的一个特点，会忽略最后一个单引号，<code>[,,,].length // 3</code>。</p>
<p>另外，这种方式定义，实际上是没有产生真正的key的。<code>[,,,] // [undefined * 3]</code></p>
<p><strong>答案：</strong> <code>[, , ]</code></p>
<hr>
<h3 id="1-35、"><a href="#1-35、" class="headerlink" title="1.35、"></a>1.35、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">class</span>: <span class="string">"Animal"</span>, <span class="attr">name</span>: <span class="string">'Fido'</span>&#125;;</div><div class="line">a.class</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题理应考察 <code>class</code> 为JS中的保留字，由于JS版本升级，此种写法已经可以正常返回属性值了。</p>
<p><strong>注意：在IE8-的浏览器中，会有语法错误，使用了保留字</strong> </p>
<p><strong>答案：</strong> <code>&#39;Animal&#39;</code></p>
<hr>
<h3 id="1-36、"><a href="#1-36、" class="headerlink" title="1.36、"></a>1.36、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"epoch"</span>)</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 日期通过new返回的一定是一个Date对象，如果参数格式不合理，则会返回 <code>Invalid Date</code> 的日期对象。</p>
<p><strong>答案：</strong> <code>Invalid Date</code></p>
<hr>
<h3 id="1-37、"><a href="#1-37、" class="headerlink" title="1.37、"></a>1.37、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Function</span>.length,</div><div class="line">    b = <span class="keyword">new</span> <span class="built_in">Function</span>().length</div><div class="line">a === b</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> <code>Function.length</code> 默认为1，<code>Function</code> 实例的 <code>length</code> 属性等于 <code>function</code>的参数个数。</p>
<p><strong>答案：</strong> <code>false</code></p>
<hr>
<h3 id="1-38、"><a href="#1-38、" class="headerlink" title="1.38、"></a>1.38、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="built_in">Date</span>(<span class="number">0</span>);</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>);</div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">[a === b, b === c, a === c]</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 直接函数调用，不关心参数是啥，都会返回当前日期字符串。</p>
<p>通过 <code>new Date()</code>，如果无参数，返回当前日期对象。</p>
<p>通过 <code>new Date(0)</code>，就有一个参数，并且是数字，则参数含义为long类型的UTC时间。</p>
<p><strong>答案：</strong> <code>[false, false, false]</code></p>
<hr>
<h3 id="1-39、"><a href="#1-39、" class="headerlink" title="1.39、"></a>1.39、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min(), max = <span class="built_in">Math</span>.max()</div><div class="line">min &lt; max</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察 <code>Math.min()</code> 和 <code>Math.max()</code> 的用法。</p>
<p>当 <code>Math.min()</code> 无参数时，返回 <code>Infinity</code>，参考：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min" target="_blank" rel="external">MDN Math.min</a></p>
<p>当 <code>Math.max()</code> 无参数时，返回 <code>-Infinity</code>，参考：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max" target="_blank" rel="external">MDN Math.min</a></p>
<p><strong>答案：</strong> <code>false</code></p>
<hr>
<h3 id="1-40、"><a href="#1-40、" class="headerlink" title="1.40、"></a>1.40、</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2014-03-19"</span>),</div><div class="line">    b = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2014</span>, <span class="number">03</span>, <span class="number">19</span>);</div><div class="line">[a.getDay() === b.getDay(), a.getMonth() === b.getMonth()]</div></pre></td></tr></table></figure>
<p><strong>解析：</strong> 此题考察使用年月日构造函数时，月份是从0开始计算的。</p>
<p><strong>答案：</strong> <code>[false, false]</code></p>
<h2 id="2、参考资料"><a href="#2、参考资料" class="headerlink" title="2、参考资料"></a>2、参考资料</h2><p><a href="https://developer.mozilla.org/en-US" target="_blank" rel="external">MDN</a> – Mozilla 开发者网络</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="external">MDN Javascrpt</a> –MDN JavaScript目录</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[02_Mongo权限探索]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/MongoDB%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/02_Mongo%E6%9D%83%E9%99%90%E6%8E%A2%E7%B4%A2/</url>
      <content type="html"><![CDATA[<h1 id="0x0、导言"><a href="#0x0、导言" class="headerlink" title="0x0、导言"></a>0x0、导言</h1><p>经过一次 <code>MongoDB</code> 被黑之后，就想把 <code>MongoDB</code> 的权限仔细的了解一遍。安全第一！安全第一！</p>
<p>为了避免版本不一致导致的差异，特此说明：以下命令均在 <code>Mongo3.4</code> 中测试，理论上支持所有 <code>3.x</code> 版本</p>
<h1 id="0x1、MongoDB权限系统"><a href="#0x1、MongoDB权限系统" class="headerlink" title="0x1、MongoDB权限系统"></a>0x1、MongoDB权限系统</h1><p><code>MongoDB</code> 的权限管理也是符合 <code>RBAC</code> 的权限系统。</p>
<p>既然是 <code>RBAC</code> 的权限管理，那么就一定会有 <code>actions</code> 和 <code>resources</code> 的概念。</p>
<p>在 <code>MongoDB</code> 中，每一种操作都对应一种 <code>action</code>，在 <a href="https://docs.mongodb.com/manual/reference/privilege-actions/" target="_blank" rel="external">Action List</a> 可以查看所有的 <code>Action</code> 列表</p>
<p>同理，<code>Collection/Database/Cluster</code> 都是 <code>Resrouce</code>, <code>resource</code> 列表也可以在 <a href="https://docs.mongodb.com/manual/reference/resource-document/" target="_blank" rel="external">Resource Document</a> 找到。</p>
<h2 id="1-1、如何授权启动"><a href="#1-1、如何授权启动" class="headerlink" title="1.1、如何授权启动"></a>1.1、如何授权启动</h2><p>在 <code>MongoDB</code> 中，默认是无授权启动的。如果我们要开启授权，那么需要在启动 <code>MongoDB</code> 的时候，加上 <code>--auth</code> 参数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config <span class="string">"&lt;config path&gt;"</span> --auth</div></pre></td></tr></table></figure>
<p>如果使用配置文件，那么也可以直接配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">security</div><div class="line">    authorization: enabled</div></pre></td></tr></table></figure>
<p><strong>注意：如果没有添加账户，就算设置 <code>--auth</code> 参数也无效，需要先添加用户，在添加用户的时候，必须要指定用户角色。</strong></p>
<h2 id="1-2、MongoDB角色管理"><a href="#1-2、MongoDB角色管理" class="headerlink" title="1.2、MongoDB角色管理"></a>1.2、MongoDB角色管理</h2><p>在 <code>MongoDB</code> 中，具有两种类型的角色，一类是系统角色，一类是自定义角色。</p>
<p>一般来说，我们只需要关注系统角色。自定义角色需要通过角色相关的Shell来进行CRUD。</p>
<h3 id="1-2-1、系统角色"><a href="#1-2-1、系统角色" class="headerlink" title="1.2.1、系统角色"></a>1.2.1、系统角色</h3><p><code>MongoDB</code> 按照分类，具有较多的角色，列举如下，也可在 <a href="https://docs.mongodb.com/manual/core/security-built-in-roles/" target="_blank" rel="external">security-built-in-roles</a> 查看所有内建角色明细。</p>
<ul>
<li><p>数据库用户相关角色</p>
<ol>
<li>read –只能查看单个数据库</li>
<li>readWrite – 可读写单个数据库</li>
</ol>
</li>
<li><p>数据库管理员相关角色</p>
<ol>
<li>dbAdmin – 数据库管理员，能进行差不多各种操作</li>
<li>dbOwner – 等于dbAdmin、readWrite、userAdmin的并集，数据库拥有者</li>
<li>userAdmin – 能够管理各种用户，角色等（如果是admin集合的，则能管理所有db）</li>
</ol>
</li>
<li><p>集群管理员相关角色</p>
<ol>
<li>clusterAdmin – 是clusterManager，clusterMonitor，clusterMonitor权限的集合，还多了个删除数据库操作。</li>
<li>clusterManager – 主要是配置集群</li>
<li>clusterMonitor – 主要是监控集群</li>
<li>hostManager – 主要是配置主机</li>
</ol>
</li>
<li><p>备份还原相关角色</p>
<ol>
<li>backup – 备份操作</li>
<li>restore – 还原操作</li>
</ol>
</li>
<li><p>针对所有DB的角色</p>
<ol>
<li>readAnyDatabase – 可读取所有的数据库</li>
<li>readWriteAnyDatabase – 可读写所有的数据库</li>
<li>userAdminAnyDatabase – 所有db的用户管理员</li>
<li>dbAdminAnyDatabase – 所有db的DB管理员</li>
</ol>
</li>
<li><p>超级管理员角色</p>
<ol>
<li>root – 超级超级管理员，最大权限了</li>
</ol>
</li>
<li><p>内部角色</p>
<ol>
<li>__system – 既然是内部角色，我们就不要去用了</li>
</ol>
</li>
</ul>
<h3 id="1-2-2、自定义角色"><a href="#1-2-2、自定义角色" class="headerlink" title="1.2.2、自定义角色"></a>1.2.2、自定义角色</h3><p>除了系统角色之外，还可以自定义角色，能够更灵活的控制权限。</p>
<p>详细，请参考：<a href="https://docs.mongodb.com/manual/reference/method/js-role-management/" target="_blank" rel="external">role-management</a></p>
<h2 id="1-2、MongoDB用户管理"><a href="#1-2、MongoDB用户管理" class="headerlink" title="1.2、MongoDB用户管理"></a>1.2、MongoDB用户管理</h2><p>有了Role的知识，我们来看User，就很easy了。</p>
<p>和一般的系统权限类似，MongoDB 也提供了诸多和用户相关的操作</p>
<ol>
<li>db.auth() – 用于登录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.auth( &#123;</div><div class="line">   user: &lt;username&gt;, -- 用户</div><div class="line">   pwd: &lt;password&gt;, -- 密码</div><div class="line">   mechanism: &lt;authentication mechanism&gt;,  -- 可选，认证机制</div><div class="line">   digestPassword: &lt;boolean&gt; </div><div class="line">&#125; )</div></pre></td></tr></table></figure>
<ol>
<li>db.createUser()  – 创建用户</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123; user: &quot;&lt;name&gt;&quot;, -- 用户名</div><div class="line">  pwd: &quot;&lt;cleartext password&gt;&quot;, -- 密码</div><div class="line">  customData: &#123; &lt;any information&gt; &#125;, -- 自定义的数据</div><div class="line">  roles: [ -- 配置角色，db角色，设置数据库， 否则直接写角色名</div><div class="line">    &#123; role: &quot;&lt;role&gt;&quot;, db: &quot;&lt;database&gt;&quot; &#125; | &quot;&lt;role&gt;&quot;,</div><div class="line">    ...</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>db.updateUser() – 更新用户</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">db.updateUser(</div><div class="line">   &quot;&lt;username&gt;&quot;, -- 要更新的用户名</div><div class="line">   &#123; -- 要更新的用户对象</div><div class="line">     customData : &#123; &lt;any information&gt; &#125;,</div><div class="line">     roles : [</div><div class="line">               &#123; role: &quot;&lt;role&gt;&quot;, db: &quot;&lt;database&gt;&quot; &#125; | &quot;&lt;role&gt;&quot;,</div><div class="line">               ...</div><div class="line">             ],</div><div class="line">     pwd: &quot;&lt;cleartext password&gt;&quot;</div><div class="line">    &#125;,</div><div class="line">    writeConcern: &#123; &lt;write concern&gt; &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<p><strong>注：仅仅只需要更新role的话，考虑使用grantRolesToUser，revokeRolesFromUser</strong></p>
<ol>
<li>db.removeUser()</li>
<li>db.dropAllUsers()</li>
<li>db.dropUser()</li>
<li>db.grantRolesToUser()</li>
<li>db.revokeRolesFromUser()</li>
<li>db.getUser()</li>
<li>db.getUsers()</li>
</ol>
<p>其他用户方法都比较类似，查看详细： <a href="https://docs.mongodb.com/manual/reference/method/js-user-management/" target="_blank" rel="external">user-management</a></p>
<h1 id="0x2、使用授权的MongoDB"><a href="#0x2、使用授权的MongoDB" class="headerlink" title="0x2、使用授权的MongoDB"></a>0x2、使用授权的MongoDB</h1><p>如果在 <code>MongoDB</code> 中配置了授权，那么连接到带授权的 <code>MongoDB</code> 也会有些许区别。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 简单的MongoDB Connection String</span></div><div class="line">mongodb://127.0.0.1/testdb</div><div class="line"></div><div class="line"><span class="comment"># 带端口的MongoDB</span></div><div class="line">mongodb://127.0.0.1:27018/testdb</div><div class="line"></div><div class="line"><span class="comment"># 带授权的MongoDB</span></div><div class="line">mongodb://user1:password1@127.0.0.1:27017/testdb</div><div class="line"></div><div class="line"><span class="comment"># 带授权，且User是admin的场景</span></div><div class="line">mongodb://user1:password1@127.0.0.1:27017/testdb/?authSource=admin</div></pre></td></tr></table></figure>
<p>如果是 <code>shell</code>，则需要先执行 <code>db.auth(&#39;name&#39;, &#39;pwd&#39;)</code>，之后才能执行其他命令。</p>
<h1 id="0x3、总结"><a href="#0x3、总结" class="headerlink" title="0x3、总结"></a>0x3、总结</h1><p>加强安全意识，人为预防常规安全风险。</p>
<p><time>2017-1-21 16:09:48</time></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular从0到1：function（上）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular%E7%9B%B8%E5%85%B3/Angular%E4%BB%8E0%E5%88%B01%EF%BC%9Afunction%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>Angular作为最流行的前端MV*框架，在WEB开发中占据了重要的地位。接下来，我们就一步一步从官方api结合实践过程，来学习一下这个强大的框架吧。</p>
<p>Note：每个function描述标题之后的★标明了该function的重要程度（1~5星）。</p>
<h2 id="2、function（上）"><a href="#2、function（上）" class="headerlink" title="2、function（上）"></a>2、function（上）</h2><p>Angular封装了一系列公共方法，帮助我们更简单的使用JS。这些就是Angular的function。</p>
<h3 id="2-1、angular-bind-★"><a href="#2-1、angular-bind-★" class="headerlink" title="2.1、angular.bind(★)"></a>2.1、angular.bind(★)</h3><p>angular.bind类似于Function.prototype.bind，实现函数柯里化，返回一个函数代理。eg:</p>
<pre><code>函数原型
angular.bind(/*this对象*/self, /*要封装的function*/fn, /*参数列表*/args);

//原始函数
function fun(arg1, arg2, arg3) {
  console.log(this);
  console.log(arg1);
  console.log(arg2);
  console.log(arg3);
}
fun(&apos;arg1&apos;, &apos;arg2&apos;, &apos;arg3&apos;);
//如果几个常用参数都是固定的，而且该函数被调用频繁，那么就可以包装一下
var fun2 = angular.bind(window, fun, &apos;arg1&apos;, &apos;arg2&apos;);
//新的调用方式
fun2(&apos;arg3&apos;);
</code></pre><h3 id="2-2、angular-bootstrap-★★★★"><a href="#2-2、angular-bootstrap-★★★★" class="headerlink" title="2.2、angular.bootstrap(★★★★)"></a>2.2、angular.bootstrap(★★★★)</h3><p>用于使用angular执行渲染元素。也是angular的启动方法，如果没有在页面上指定ng-app,必须要手动调用该函数进行启动。</p>
<pre><code>angular.bootstrap(/*Dom元素*/element, /*Array/String/Function*/[modules], /*Object*/[config]);

//常规用法
angular.bootstrap(document, [&apos;app&apos;])
//带配置项
angular.bootstrap(document, [&apos;app&apos;], {strictDi: true/*Defaults: false*/})
</code></pre><h3 id="2-3、angular-copy-★★★★★"><a href="#2-3、angular-copy-★★★★★" class="headerlink" title="2.3、angular.copy(★★★★★)"></a>2.3、angular.copy(★★★★★)</h3><p>Angular.copy用于复制对象，由于angular的双向绑定特点，那么如果直接操作$scope对象，那么很容易就会改变ui的显示，这个时候就需要借助angular.copy来创建一个对象副本，并进行操作。</p>
<pre><code>//原型
angular.copy(source, [destination]);

var obj = {a: 1};
var obj2 = angular.copy(obj);
var obj3;
angular.copy(obj, obj3);
console.log(obj2 === obj) //false
console.log(obj3 === obj) //false
var obj4;
//第二个和参数和返回值是相等的，而且第二个参数不管以前是什么，都会被重新赋值
var obj5 = angular.copy(obj, obj4);
console.log(obj4 === obj5); //true
</code></pre><h3 id="2-4、angular-element-★★★★"><a href="#2-4、angular-element-★★★★" class="headerlink" title="2.4、angular.element(★★★★)"></a>2.4、angular.element(★★★★)</h3><p>等价与jQuery的选择器，如果在angular之前没有引入jQuery，那么就使用jqLite包装.</p>
<pre><code>angular.element(&apos;body&apos;);
//等价于
$(&apos;body&apos;);

//用法
var $body = angular.element(&apos;body&apos;);
</code></pre><h3 id="2-5、angular-equals-★★"><a href="#2-5、angular-equals-★★" class="headerlink" title="2.5、angular.equals(★★)"></a>2.5、angular.equals(★★)</h3><p>用于比较两个对象是否相等，如下示例的规则和JS有区别，注意识别。</p>
<pre><code>var obj1 = {a: 1};
var obj2 = obj1;
//引用一致，则相等
console.log(angular.equals(obj1, obj2)); // true

obj2 = {a: 1};
//引用不一致，对象表现一致，则相等
console.log(angular.equals(obj1, obj2)); // true

obj2 = {a: 1,$a: 2};
//对象比较时，忽略以$开头的属性
console.log(angular.equals(obj1, obj2)); // true

obj1 = /aa/;
obj2 = /aa/;
//正则表达式表现相等，则相等
console.log(angular.equals(obj1, obj2)); // true

//NaN与NaN比较，则相等
console.log(angular.equals(NaN, NaN)); // true
</code></pre><h3 id="2-6、angular-extend-★★"><a href="#2-6、angular-extend-★★" class="headerlink" title="2.6、angular.extend(★★)"></a>2.6、angular.extend(★★)</h3><p>功能上和jQuery.extend没多大差异</p>
<pre><code>//原型-第一个参数为目标，之后的参数为源，同时返回dst
angular.extend(dst, src);

//示例
var obj1 = {a: 1};
var obj2 = angular.extend(obj1, {a: 2}, {b: 3});
console.log(obj1)
console.log(obj1 === obj2); //true
</code></pre><h3 id="2-7、angular-forEach-★★★★★"><a href="#2-7、angular-forEach-★★★★★" class="headerlink" title="2.7、angular.forEach(★★★★★)"></a>2.7、angular.forEach(★★★★★)</h3><p>angular.forEach用于遍历对象或者数组，类似于ES5的Array.prototype.forEach</p>
<pre><code>//原型
angular.forEach(obj, iterator, [context]);

var values = {name: &apos;misko&apos;, gender: &apos;male&apos;};
var arr = [&apos;misko&apos;, &apos;male&apos;];
angular.forEach(values, function (value, key) {
  console.log(key + &apos; = &apos; + value);
});
angular.forEach(arr, function (value, i) {
  console.log(i + &apos; = &apos; + value);
});
//还可以传递this
var obj = {};
angular.forEach(values, function (value, key) {
  obj[key] = value;
}, obj);
console.log(obj);
</code></pre><h3 id="2-8、angular-fromJson-★★★"><a href="#2-8、angular-fromJson-★★★" class="headerlink" title="2.8、angular.fromJson(★★★)"></a>2.8、angular.fromJson(★★★)</h3><p>angular.fromJson将JSON字符串转换为JSON对象，注意，必须严格满足JSON格式，比如属性必须双引号，该函数内部实现是利用JSON.parse()。</p>
<pre><code>//原型
angular.fromJson(/*string*/ jsonString)

var jsonString = &apos;{&quot;p1&quot;: &quot;xx&quot;, &quot;p2&quot;: 1, &quot;p3&quot;: true}&apos;;
var jsonObj = angular.fromJson(jsonString);
console.log(jsonObj);
</code></pre><h3 id="2-9、angular-toJson-★★★"><a href="#2-9、angular-toJson-★★★" class="headerlink" title="2.9、angular.toJson(★★★)"></a>2.9、angular.toJson(★★★)</h3><p>angular.toJson可以将对象，数组，日期，字符串，数字转换为json字符串</p>
<pre><code>//原型
angular.toJson(obj, pretty);

var obj = {p1: 1, p2: true, p3: &apos;2&apos;};
var jsonString = angular.toJson(obj);
console.log(jsonString);
//美化输出格式（设置为true，默认采用2个字符缩进）
jsonString = angular.toJson(obj, true);
console.log(jsonString);
//还可以设置缩进字符数
jsonString = angular.toJson(obj, 10);
console.log(jsonString);
</code></pre><h3 id="2-10、angular-identity-★"><a href="#2-10、angular-identity-★" class="headerlink" title="2.10、angular.identity(★)"></a>2.10、angular.identity(★)</h3><p>angular.identity返回该函数参数的第一个值。编写函数式代码时，非常有用（待使用）。</p>
<pre><code>//官方示例
function transformer(transformationFn, value) {
  return (transformationFn || angular.identity)(value);
};
//简单演示
var value = angular.identity(&apos;a&apos;, 1, true);
console.log(value); // &apos;a&apos;
</code></pre><h3 id="2-11、angular-injector-★★"><a href="#2-11、angular-injector-★★" class="headerlink" title="2.11、angular.injector(★★)"></a>2.11、angular.injector(★★)</h3><p>angular.injector能够创建一个injector对象，可以用于检索services以及用于依赖注入。</p>
<pre><code>//原型，[strictDi]默认false，如果true，表示执行严格依赖模式，
//angular则不会根据参数名称自动推断类型，必须使用[&apos;xx&apos;, function(xx){}]这种形式。
angular.injector(modules, [strictDi]); 

//定义模块A
var moduleA = angular.module(&apos;moduleA&apos;, [])
  .factory(&apos;F1&apos;, [function () {
    return {
      print: function () {
        console.log(&apos;I\&apos;m F1 factory&apos;);
      }
    }
  }]);
var $injector = angular.injector([&apos;moduleA&apos;])
$injector.invoke(function (F1) {
  console.log(F1.print());
});
//此种写法会报错，因为是严格模式
var $injector2 = angular.injector([&apos;moduleA&apos;], true)
$injector2.invoke(function (F1) {
  console.log(F1.print());
});
//可以采用如下写法
$injector2.invoke([&apos;F1&apos;, function (F1) {
  console.log(F1.print());
}]);
</code></pre><h3 id="2-12、angular-module-★★★★★"><a href="#2-12、angular-module-★★★★★" class="headerlink" title="2.12、angular.module(★★★★★)"></a>2.12、angular.module(★★★★★)</h3><p>angular.module可以说是最常用的function了。通过它，可以实现模块的定义，模块的获取。</p>
<pre><code>//定义模块A
var moduleA = angular.module(&apos;moduleA&apos;, []);
//定义模块B，模块B依赖moduleA
var moduleB = angular.module(&apos;moduleB&apos;, [&apos;moduleB&apos;]);

//可以在第三个参数上设置配置函数
var moduleB = angular.module(&apos;moduleB&apos;, [&apos;moduleB&apos;], [&apos;$locationProvider&apos;, function ($locationProvider) {
  console.log($locationProvider);
}]);
//等价于
var moduleB = angular.module(&apos;moduleB&apos;, [&apos;moduleB&apos;])
.config([&apos;$locationProvider&apos;, function ($locationProvider) {
  console.log($locationProvider);
}]);

//获取模块
angular.bootstrap(document, [&apos;moduleB&apos;]);
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[说说你所熟知的MSSQL中的substring函数]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/SQL%20SERVER/%E8%AF%B4%E8%AF%B4%E4%BD%A0%E6%89%80%E7%86%9F%E7%9F%A5%E7%9A%84MSSQL%E4%B8%AD%E7%9A%84substring%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>说说你所熟知的MSSQL中的substring函数</p>
<p>###函数签名：</p>
<pre><code>substring
    --expression (varchar,nvarchar,text,ntext,varbinary,or image)
    --Starting position (bigint)
    --Length (bigint)

从函数名称来看，是截取字符串内容。
从函数签名来看，不仅能截取字符串内容，还能截取二进制内容
</code></pre><p>###那么，你觉得如下应该sql语句应该是什么结果呢？</p>
<pre><code>select subString(&apos;123456&apos;,0,1)
select subString(&apos;123456&apos;,1,1)
select subString(&apos;123456&apos;,-1,2)
select subString(&apos;123456&apos;,-1,3) 
</code></pre><p>###如果想好了，但不确定，那赶紧打开工具执行看看吧</p>
<pre><code>你答对了吗？为什么会是那些结果，能解释吗？
</code></pre><p>###三大知识点：</p>
<pre><code>1. MSSQL中，下标从1开始，注意：不是大多数编程语言采用的1。
2. substring函数的调用substring(str,startIndex,length)
   效果上是转换为substring(str,startIndex,endIndex)来运算的，
   endIndex=startIndex+length。
3. 对于区间取值，采取的是前闭后开的策略，也有是说包含开始下标，但是不包含结束下标。
</code></pre><h3 id="那么能解释上面的代码了吗？"><a href="#那么能解释上面的代码了吗？" class="headerlink" title="那么能解释上面的代码了吗？"></a>那么能解释上面的代码了吗？</h3>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Thrift简单实践]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Other/Thrift%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h2 id="0、什么是RPC"><a href="#0、什么是RPC" class="headerlink" title="0、什么是RPC"></a>0、什么是RPC</h2><p><strong>RPC</strong>（Remote Procedure Call - 远程过程调用）,是通过网络从远程计算机上请求服务，而不需要了解底层网路技术的细节。简单点说，就是<strong>像调用本地服务（方法）一样调用远端的服务（方法）。</strong></p>
<h3 id="RPC与REST的区别"><a href="#RPC与REST的区别" class="headerlink" title="RPC与REST的区别"></a>RPC与REST的区别</h3><p>RPC是一种协议，REST是一种架构风格。</p>
<p>RPC以行为为中心，REST以资源为中心。当加入新功能时，RPC需要增加更多的行为，并进行调用。REST的话，调用方法基本不变。</p>
<p>RPC可以不基于HTTP协议，因此在后端语言调用中，可以采用RPC获得更好的性能。REST一般是基于HTTP协议。</p>
<h2 id="1、RPC框架Thrift（0-9-3）"><a href="#1、RPC框架Thrift（0-9-3）" class="headerlink" title="1、RPC框架Thrift（0.9.3）"></a>1、RPC框架Thrift（0.9.3）</h2><p>Thrift是一种开源的高效的、支持多种编程语言的远程服务调用框架。支持C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, OCaml 和 Delphi等诸多语言，能够很好的进行跨语言调用。</p>
<p>Thrift官网： <a href="https://thrift.apache.org/" target="_blank" rel="external">https://thrift.apache.org/</a></p>
<h2 id="2、Thrift的简单实践（Windows）"><a href="#2、Thrift的简单实践（Windows）" class="headerlink" title="2、Thrift的简单实践（Windows）"></a>2、Thrift的简单实践（Windows）</h2><h3 id="2-1-安装Thrift"><a href="#2-1-安装Thrift" class="headerlink" title="2.1 安装Thrift"></a>2.1 安装Thrift</h3><p>在<a href="http://www.apache.org/dyn/closer.cgi?path=/thrift/0.9.3/thrift-0.9.3.exe" target="_blank" rel="external">http://www.apache.org/dyn/closer.cgi?path=/thrift/0.9.3/thrift-0.9.3.exe</a>这里可以下载Thrift的windows系统编译版本。</p>
<p>该文件是一个绿色文件，可以放置在目录中，进入该目录的cmd，就可以直接使用thrift。输入<code>thrift -version</code>可以查看当前Thrift的版本。</p>
<p><img src="http://7xit2j.com1.z0.glb.clouddn.com/abc1.png" alt="img1"></p>
<p>至此，Thrift已完成安装</p>
<h3 id="2-2-编写接口定义文件"><a href="#2-2-编写接口定义文件" class="headerlink" title="2.2 编写接口定义文件"></a>2.2 编写接口定义文件</h3><p>在安装好Thrift之后，需要我们编写接口定义文件，用来约定服务和thrift类型的接口定义。</p>
<p>Thrift主要有一下这些类型：</p>
<ol>
<li>bool     –简单类型，true or false</li>
<li>byte     –简单类型，单字符</li>
<li>i16      –简单类型，16位整数</li>
<li>i32      –简单类型，32位整数</li>
<li>i64      –简单类型，64位整数</li>
<li>double   –简单类型，双精度浮点型</li>
<li>string   –简单类型，utf-8编码字符串</li>
<li>binary   –二进制，未编码的字符序列</li>
<li>struct    –结构体，对应结构体、类等对象类型</li>
<li>list    –list容器</li>
<li>set     –set容器</li>
<li>map     –map容器</li>
<li>enum    –枚举类型</li>
</ol>
<p>接下来，利用这些类型，编写一个简单的.thrift接口定义文件。</p>
<pre><code>/* 1.thrift file content */
namespace js ThriftTest
namespace csharp ThriftTest

service ThriftTest{
  double plus(1:double num1, 2:double num2)
}
</code></pre><p>更复杂的案例： <a href="https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=test/ThriftTest.thrift;hb=HEAD" target="_blank" rel="external">https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=test/ThriftTest.thrift;hb=HEAD</a></p>
<p>在利用<code>thrift --gen js:node --gen js 1.thrift</code>来生成好客户端代码和服务端代码。可以跟多个–gen <language>参数，来实现一次性生成多个语言的代码。</language></p>
<h3 id="2-3-利用Thrift实现nodeJS服务端"><a href="#2-3-利用Thrift实现nodeJS服务端" class="headerlink" title="2.3 利用Thrift实现nodeJS服务端"></a>2.3 利用Thrift实现nodeJS服务端</h3><pre><code>var thrift = require(&apos;thrift&apos;);

var ThriftTest = require(&quot;./gen-nodejs/ThriftTest&quot;);
var ttypes = require(&quot;./gen-nodejs/1_types&quot;);


var nodeServer = thrift.createServer(ThriftTest, {
  //完成具体的事情
  plus: function(n1, n2, callback){
    console.log(`server request, n1 = ${n1}, n2 = ${n2}.`);
    callback(null, n1 + n2);
  }
});

//处理错误，假设不处理，如果客户端强制断开连接，会导致后端程序挂掉
nodeServer.on(&apos;error&apos;, function(err){
  console.log(err);
});

nodeServer.listen(7410);
console.log(&apos;node server started... port: 7410&apos;);

//如果client的浏览器，通信采用http的时候，需要创建http server
var httpServer = thrift.createWebServer({
  cors: {&apos;*&apos;: true}, //配置跨域访问
  services: {
    &apos;/thrift&apos;: { //配置路径映射
      transport: thrift.TBufferedTransport,
      protocol: thrift.TJSONProtocol,
      processor: ThriftTest,
      handler: { //具体的处理对象
        plus: function(n1, n2, callback) {
          console.log(`http request, n1 = ${n1}, n2 = ${n2}.`);
          callback(null, n1 + n2);
        }
      }
    }
  }
});

httpServer.on(&apos;error&apos;, function(err) {
  console.log(err);
});

httpServer.listen(7411);
console.log(&apos;http server started... port: 7411&apos;);
</code></pre><h3 id="2-4-Node-Client-调用"><a href="#2-4-Node-Client-调用" class="headerlink" title="2.4 Node Client 调用"></a>2.4 Node Client 调用</h3><pre><code>var thrift = require(&apos;thrift&apos;);
var ThriftTest = require(&apos;./gen-nodejs/ThriftTest&apos;);
var ttypes = require(&apos;./gen-nodejs/1_types&apos;);

transport = thrift.TBufferedTransport()
protocol = thrift.TBinaryProtocol()

var connection = thrift.createConnection(&quot;localhost&quot;, 7410, {
  transport : transport,
  protocol : protocol
});

connection.on(&apos;error&apos;, function(err) {
  console.log(false, err);
});

var client = thrift.createClient(ThriftTest, connection);

var sum = client.plus(1, 1, function(err, result){
  //connection.end(); //如果不关闭连接，那么强制断开连接，将会导致后端出现error
  if(err){
    console.log(err);
    return;
  }
  console.log(result);
});
</code></pre><h3 id="2-5、Http-Client-调用"><a href="#2-5、Http-Client-调用" class="headerlink" title="2.5、Http Client 调用"></a>2.5、Http Client 调用</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;Thrift Test Client&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;input type=&quot;text&quot; id=&quot;num1&quot;&gt; + &lt;input type=&quot;text&quot; id=&quot;num2&quot;&gt; &lt;button onclick=&quot;call()&quot;&gt;=&lt;/button&gt; &lt;span id=&quot;result&quot;&gt;?&lt;/span&gt;
 &lt;!--  &lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt; --&gt;
  &lt;script src=&quot;thrift.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;gen-js/1_types.js&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;gen-js/ThriftTest.js&quot;&gt;&lt;/script&gt;
  &lt;script&gt;
    var transport = new Thrift.Transport(&quot;http://127.0.0.1:7411/thrift&quot;);
    var protocol = new Thrift.TJSONProtocol(transport);
    var client = new ThriftTest.ThriftTestClient(protocol);
    var el_result = document.getElementById(&apos;result&apos;);
    function call(){
      var num1 = +document.getElementById(&apos;num1&apos;).value,
      num2 = +document.getElementById(&apos;num2&apos;).value;
      client.plus(num1, num2, function(result) {
        el_result.innerText = result;
        alert(&apos;调用成功！&apos;);
      });
    }
  &lt;/script&gt;
  &lt;script&gt;
  &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><strong>注意：如果在thrift生成代码时，使用了–gen js:jquery参数，那么在浏览器调用的时候，就必须依赖jquery。</strong></p>
<h2 id="3、demo地址"><a href="#3、demo地址" class="headerlink" title="3、demo地址"></a>3、demo地址</h2><p><a href="https://github.com/hstarorg/HstarDemoProject/tree/master/thrift_demo" target="_blank" rel="external">https://github.com/hstarorg/HstarDemoProject/tree/master/thrift_demo</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[01_PHP简易安装环境]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/PHP%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/01_PHP%E7%AE%80%E6%98%93%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p><strong>PHP</strong> 是啥，我想应该不用解释了吧。</p>
<p>最近发布的最新版本 <code>PHP7</code> ，提供之前版本的2倍速度提升，感觉很有吸引力哈。在看到2016年编程语言趋势和想到之前也想体验一下 <code>PHP</code> 的情况下，就说干就干，直接来简单学习下这门语言。</p>
<h2 id="1、PHP简易环境搭建"><a href="#1、PHP简易环境搭建" class="headerlink" title="1、PHP简易环境搭建"></a>1、PHP简易环境搭建</h2><h3 id="1-1、PHP安装"><a href="#1-1、PHP安装" class="headerlink" title="1.1、PHP安装"></a>1.1、PHP安装</h3><p><code>PHP</code> 的安装相当简单，打开 <code>PHP</code> 的下载地址：<a href="http://php.net/downloads.php" target="_blank" rel="external">http://php.net/downloads.php</a>，可以看到它的版本下载。</p>
<p>我这里是 Windows 环境，就点击 【Windows downloads】 进入Windows版本的PHP下载地址： <a href="http://windows.php.net/download#php-7.0" target="_blank" rel="external">http://windows.php.net/download#php-7.0</a> 。在这里找到对应的版本下载即可。</p>
<p><strong>注意：请下载对应x86,x64的zip包，不要下载Debug Pack包。至于Non Thread Safe 与 Thread Safe，由于本人刚接触，不知道有什么区别，随意下载一个就行。</strong> </p>
<p>我是Win10 x64版本，所以直接下载的：【VC14 x64 Non Thread Safe (2016-May-25 23:02:13)】（有最新版本下载最新版本即可）。</p>
<p>下载好之后，是一个压缩包。解压到目录中，在环境变量中配置 <code>Path</code> 为该目录。</p>
<p>打开 <code>cmd</code> 窗口，执行 <code>php -v</code> ，如果输出 <code>PHP</code> 的版本号，则表示安装成功！</p>
<h3 id="1-2、IDE的选择"><a href="#1-2、IDE的选择" class="headerlink" title="1.2、IDE的选择"></a>1.2、IDE的选择</h3><p>PHP有比较多IDE，这里推荐 <a href="https://www.jetbrains.com/phpstorm/" target="_blank" rel="external">PhpStorm</a> 和 <a href="https://code.visualstudio.com/" target="_blank" rel="external">VsCode</a>。</p>
<p>本人使用的 <code>VsCode</code>，足够轻量。</p>
<h3 id="1-3、依赖管理工具"><a href="#1-3、依赖管理工具" class="headerlink" title="1.3、依赖管理工具"></a>1.3、依赖管理工具</h3><p>一个成熟的语言，一定会有很多现成的包，如C#的Nuget，Node的npm。在PHP中，也有同样的工具：Composer。</p>
<p><em>如何在Windows下使用：Composer？</em></p>
<p>首先，进入Composer下载地址：<a href="https://getcomposer.org/download/" target="_blank" rel="external">https://getcomposer.org/download/</a>，找到【Composer-Setup.exe】，然后下载安装。</p>
<p>安装成功之后在控制台执行：<code>composer</code> 会输出一系列命令，则证明安装成功。</p>
<p>然后就可以通过 <code>composer install &lt;package&gt;</code> 来安装依赖包了。 想了解更多 <code>composer</code> 命令，请查询：<a href="https://getcomposer.org/doc/" target="_blank" rel="external">https://getcomposer.org/doc/</a>。</p>
<p><strong>注意，我在Windows中使用composer安装时，先使用了 <code>composer config disable-tls true</code> 和 <code>composer config secure-http false</code> 才得以成功安装依赖。</strong></p>
<h3 id="1-4、Server程序"><a href="#1-4、Server程序" class="headerlink" title="1.4、Server程序"></a>1.4、Server程序</h3><p>PHP自带有一个命令行的Server，用于开发测试已经足够使用了。所以，我直接使用了该Server。</p>
<p>只需要在php项目的根目录，打开cmd，执行 <code>php -S localhost:9999</code> 就可以启动一个PHP Server了。</p>
<p>想了解更多关于PHP自带的Web Server，请参考 <a href="http://php.net/features.commandline.webserver" target="_blank" rel="external">http://php.net/features.commandline.webserver</a></p>
<h2 id="2、Hello-PHP"><a href="#2、Hello-PHP" class="headerlink" title="2、Hello PHP"></a>2、Hello PHP</h2><p>新建一个目录，创建 <code>index.php</code>，输入以下内容：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  mb_internal_encoding(<span class="string">'UTF-8'</span>);</div><div class="line"></div><div class="line">  mb_http_output(<span class="string">'UTF-8'</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;Php Info&lt;/title&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    <span class="meta">&lt;?php</span></div><div class="line">      phpinfo();</div><div class="line">    <span class="meta">?&gt;</span></div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>打开控制台，使用 <code>php -S localhost:9999</code> 启动WebServer。</p>
<p>用浏览器访问 <a href="http://localhost:9999" target="_blank" rel="external">http://localhost:9999</a>，就可以看到当前服务器的PHP环境信息了。</p>
<h2 id="3、Other"><a href="#3、Other" class="headerlink" title="3、Other"></a>3、Other</h2><p>3.1、推荐资料： <a href="http://laravel-china.github.io/php-the-right-way/" target="_blank" rel="external">PHP之道</a></p>
<p>3.2、PHP的编码问题，一般在php的页面上，我们都需要设置：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">  mb_internal_encoding(<span class="string">'UTF-8'</span>); <span class="comment">//内部编码为UTF-8</span></div><div class="line"></div><div class="line">  mb_http_output(<span class="string">'UTF-8'</span>); <span class="comment">//服务器输出内容编码为UTF-8</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>要想用Server运行含有该代码的PHP页面。需要特别配置一下 <code>php.ini</code> 文件。</p>
<p>在PHP的解压目录，找到 <code>php.ini-development</code>，复制一份为 <code>php.ini</code>，然后找到 <code>extension_dir</code>，设置为：<code>extension_dir = &quot;你的PHP解压目录\ext&quot;</code>，然后找到 <code>;extension=php_mbstring.dll</code> 去掉前面的注释。</p>
<p>3.3、PHP框架推荐</p>
<ul>
<li>Yaf 官方框架，超高性能</li>
</ul>
<p><a href="http://www.laruence.com/manual/index.html" target="_blank" rel="external">http://www.laruence.com/manual/index.html</a></p>
<p><a href="http://php.net/manual/zh/yaf.installation.php" target="_blank" rel="external">http://php.net/manual/zh/yaf.installation.php</a></p>
<ul>
<li>LazyPHP 超级简单的框架，建议读源码</li>
</ul>
<p><a href="https://github.com/easychen/LazyPHP" target="_blank" rel="external">https://github.com/easychen/LazyPHP</a></p>
<ul>
<li>Slim 据说还不错</li>
</ul>
<p><a href="http://www.slimframework.com/" target="_blank" rel="external">http://www.slimframework.com/</a></p>
<ul>
<li>Laravel 高人气框架</li>
</ul>
<p><a href="https://laravel.com/" target="_blank" rel="external">https://laravel.com/</a></p>
<p><a href="https://lumen.laravel.com/" target="_blank" rel="external">https://lumen.laravel.com/</a>  专注API开发的PHP。</p>
<ul>
<li>ThinkPHP 中文</li>
</ul>
<p><a href="http://www.thinkphp.cn/" target="_blank" rel="external">http://www.thinkphp.cn/</a></p>
<ul>
<li>InitPHP (A PHP Framework) - (from github)</li>
</ul>
<p><a href="http://www.initphp.com/" target="_blank" rel="external">http://www.initphp.com/</a></p>
<ul>
<li>TinyMVC (from github)</li>
</ul>
<p><a href="https://github.com/mohrt/tinymvc-php" target="_blank" rel="external">https://github.com/mohrt/tinymvc-php</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[02_Sass学习之路：注释、变量以及导入]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Sass%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/02_Sass%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%9A%E6%B3%A8%E9%87%8A%E3%80%81%E5%8F%98%E9%87%8F%E4%BB%A5%E5%8F%8A%E5%AF%BC%E5%85%A5/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于.sass不兼容CSS代码，所以以下内容完全使用.scss的语法。</p>
<h2 id="Sass注释"><a href="#Sass注释" class="headerlink" title="Sass注释"></a>Sass注释</h2><p>Sass中除了提供CSS中的标准注释之外，还提供了一种静默注释：</p>
<pre><code>/* 我是标准注释 */
// 我是静默注释
</code></pre><p>标准注释大多数情况下（<strong>一种例外：设置输出风格为compressed</strong>）是会生成到最终的CSS中的，而静默注释的话，只是Sass的注释，是不会被生成到CSS文件中的。</p>
<p>如果想，就算设置输出风格为compressed也要加入特定注释呢？那么可以采用<strong>重要注释</strong>写法，如下：</p>
<pre><code>/*! 我的重要注释 */
</code></pre><p>也就是在标准注释的基础上，将注释的第一个字符设置为感叹号。</p>
<h2 id="Sass变量"><a href="#Sass变量" class="headerlink" title="Sass变量"></a>Sass变量</h2><p>Sass作为一个CSS预处理器，那么最基本的编程语言特性<strong>变量</strong>自然也是必不可少的。Sass中变量系统相对比较丰富，包含局部变量，全局变量，默认变量，特殊变量（变量作用在属性上），多值变量。</p>
<p><strong>Sass变量以$开头，用:分割变量名与变量值，以;结尾。如： $color: red;</strong></p>
<p><strong>Sass变量，不区分中横线和下划线，比如定义变量为$bg-color，那么使用$bg_color也能访问到哦！</strong></p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>同大多数编程语言一样，变量的作用域是它本身的这个块，以及所有的子集。如:</p>
<pre><code>body{
  $color: blue;
  color: $color;
  .container{
    background-color: $color;    
  }
}
</code></pre><p>将被编译为：</p>
<pre><code>body {
  color: blue;
}

body .container {
  background-color: blue;
}
</code></pre><p>同时，需要注意：针对以上代码，如果内部修改了$color的值，也会同时影响到外部的变量值。</p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>如果定义在局部的变量，与它同级的选择器中是无法使用的：</p>
<pre><code>body{
  $color: blue;
  color: $color;
  .container{
    background-color: $color;    
  }
}

// 会出现错误，未定义的变量
footer{
  color: $color;
}
</code></pre><p>这个时候，就需要提升$color为全局变量，<strong>在变量值之后，加上!global</strong>,示例如下：</p>
<pre><code>body{
  $color: blue !global;
  color: $color;
  .container{
    background-color: $color;    
  }
}

// 会出现错误，未定义的变量
footer{
  color: $color;
}
</code></pre><p>这个的话，就能够正常编译了，因为$color被提升为全局变量了。</p>
<h3 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h3><p>在Sass中，可以通过在<strong>变量值之后加入!default</strong>来让变量称为默认变量，如果有对该变量的赋值，不管前后，那么变量的默认值都会被替换掉，示例如下：</p>
<pre><code>$color: red;
body{
  $color: blue !default;
  color: $color;
  .container{
    background-color: $color;    
  }
}
footer{
  color: $color;
}
</code></pre><p>可以通过注释掉!default来查看生成的CSS的异同。</p>
<h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><p>Sass的变量，还可以用在属性中，此时需要使用#{变量名}来引用，示例如下：</p>
<pre><code>$containerId: c1;

##{$containerId}{
  color: red;
}
</code></pre><p>此时，生成的CSS为：</p>
<pre><code>#c1 {
  color: red;
}
</code></pre><h3 id="多值变量"><a href="#多值变量" class="headerlink" title="多值变量"></a>多值变量</h3><p>强大的Sass，还提供了一种特殊的变量，即为多值变量，在一个变量中，可以定义多个值，然后通过制定的函数访问，示例如下：</p>
<pre><code>// List类型的多值变量 
$px: 5px 10px 15px 20px;

// Map类型的多值变量 
$map: (id1: test, id2: testGrid, color: red);

body{
  // 此处需要注意，索引是从1开始，不是从0哦。
  margin-left: nth($px, 1);

  // 使用map-get访问，当心key的使用，指定了不存在的key会导致生成的css异常 
  #{map-get($map, id2)}{
    color: red;
  }

  #id{
    color: map-get($map, color);
  }
}
</code></pre><p>生成的CSS如下：</p>
<pre><code>body {
  margin-left: 5px;
}

body testGrid {
  color: red;
}

body #id {
  color: red;
}
</code></pre><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>体现可维护性的重要指标就是文件似乎可以单一职责，那么在Sass中，主要体现在导入上。由于Sass中的导入指令和CSS的导入指令是同样的关键字，那么就需要按照一定的规则来判别了，满足以下任意一条规则的导入，使用CSS的原生导入：</p>
<ol>
<li>被导入的文件名以.css结尾</li>
<li>被导入的文件是一个在线的url地址</li>
<li>以@import url(…)方式去导入文件</li>
</ol>
<p>同时，编写局部的sass文件，建议使用下划线开头,如： _a.scss，这样就不会生成多余的_a.css了。</p>
<pre><code>//_a.scss
#id2{
  color: red;
}

//1.scss
@import &quot;a.scss&quot;;
#id1{
  color: blue;
}

body{
    @import &quot;a.scss&quot;;
}
</code></pre><p>最终生成的结果为:</p>
<pre><code>#id2 {
  color: red;
}

#id1 {
  color: blue;
}

body #id2 {
  color: red;
}
</code></pre><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>欲知后事如何，请听下回分解！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[TypeScript札记：初体验]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/TypeScript%E6%9C%AD%E8%AE%B0/TypeScript%E6%9C%AD%E8%AE%B0%EF%BC%9A%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。</p>
<p>TypeScript是一种Compile-to-JavaScript的语言</p>
<p>TypeScript扩展了JavaScript的句法，所以现有的JavaScript程序可以不加修改，直接在TypeScript下工作。同时，TypeScript编译产生JavaScript以确保兼容性。</p>
<h2 id="2、特点-amp-优势"><a href="#2、特点-amp-优势" class="headerlink" title="2、特点&amp;优势"></a>2、特点&amp;优势</h2><p>2.1、兼容现有JS代码</p>
<p>2.2、类型系统，面向对象设计，保证程序的健壮性（编译检查）</p>
<p>2.3、良好的语法，良好的工具支持</p>
<p>2.4、良好的社区支持</p>
<h2 id="3、快速开始"><a href="#3、快速开始" class="headerlink" title="3、快速开始"></a>3、快速开始</h2><p>3.1、 <strong>工具</strong></p>
<p>如果是VS开发，安装 <a href="https://portal.qiniu.com/signup?code=3lo24xqrim8gi" target="_blank" rel="external">TypeScript 1.4 for Visual Studio 2013</a>，版本随时变化，建议下载最新版本。</p>
<p>如果是NPM用户，那么直接 <code>npm install -g typescript</code></p>
<p>3.2、 <strong>Hello Jay</strong></p>
<p>使用VS的用户，直接新建项（TypeScript File即可）；使用其他IDE的用户，如果IDE支持TypeScript，那么直接新建TypeScript；其他则新建文本文件，后缀名为ts。如果是不能在IDE中编译，那么可以直接通过npm安装typescript之后，使用tsc fileName.ts，进行编译。</p>
<p>打开1.ts文件，输入：</p>
<pre><code>function hello(name: string){
  return &apos;Hello,&apos; + name;
}

var res = hello(&apos;Jay&apos;);
console.log(res);
</code></pre><p>执行<code>tsc 1.ts</code>之后，生成一个1.js文件（具有可读性的标准js文件）：</p>
<pre><code>function hello(name) {
    return &apos;Hello,&apos; + name;
}
var res = hello(&apos;Jay&apos;);
console.log(res);
</code></pre><h2 id="4、参考资料"><a href="#4、参考资料" class="headerlink" title="4、参考资料"></a>4、参考资料</h2><p>1、 <a href="http://www.typescriptlang.org/" target="_blank" rel="external">官网：http://www.typescriptlang.org/</a></p>
<p>2、 <a href="https://github.com/vilic/typescript-guide" target="_blank" rel="external">入门指南： https://github.com/vilic/typescript-guide</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[02_Vue组件（上）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Vue%E5%AE%9E%E8%B7%B5%E4%B9%8B%E8%B7%AF/02_Vue%E7%BB%84%E4%BB%B6%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="0、关于Vue组件"><a href="#0、关于Vue组件" class="headerlink" title="0、关于Vue组件"></a>0、关于Vue组件</h1><p>组件是 <code>Vue</code> 中最强大的功能之一，Vue组件也和angular的组件比较类似，可以扩展HTML元素。在较高层面上，也是自定义元素。</p>
<p>在原生HTML元素上附加功能，<code>Vue</code> 的做法是通过 <code>is</code> 特性扩展， <code>ng2</code> 中则称之为属性指令。</p>
<h1 id="1、定义组件"><a href="#1、定义组件" class="headerlink" title="1、定义组件"></a>1、定义组件</h1><p>在 <code>Vue</code> 中定义组件是一个很轻松的方式，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义组件构造器</span></div><div class="line"><span class="keyword">var</span> Component1 = Vue.extend(&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 全局注册组件</span></div><div class="line">Vue.component(<span class="string">'component-1'</span>, Component1);</div><div class="line"></div><div class="line"><span class="comment">// 也可局部注册组件</span></div><div class="line"><span class="comment">// 局部注册意味着该组件仅能在包含它的组件中运行，如示例的Parent组件</span></div><div class="line"><span class="keyword">var</span> Parent = Vue.extend(&#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">''</span>,</div><div class="line">  <span class="attr">components</span>: &#123;</div><div class="line">    <span class="string">'component-1'</span>: Component1</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>为了足够简单，<code>Vue</code> 还提供了一个语法糖写法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 直接注册组件（不在需要组件构造器）</span></div><div class="line">Vue.component(<span class="string">'component1'</span>, &#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 局部注册同理</span></div><div class="line"><span class="keyword">var</span> Parent = Vue.extend(&#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">''</span>,</div><div class="line">  <span class="attr">components</span>: &#123;</div><div class="line">    <span class="string">'component-1'</span>: &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>该语法实际上是 <code>Vue</code> 在背后自动调用 <code>Vue.extend()</code>。</p>
<p>除此之外，如果使用 <code>.vue</code> 格式的组件，我们定义组件的方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="comment">// 定义一个组件</span></div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line"></div><div class="line">  &#125;;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="组件选项"><a href="#组件选项" class="headerlink" title="组件选项"></a>组件选项</h2><p>所谓组件选项，就是在定义组件时，传递给 <code>Vue.extend()</code> 的参数。</p>
<p>定义组件是相当简单的事情，我们更多的需要去关注组件选项！</p>
<p>先来一个完整的组件选项压压惊：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component1 = Vue.extend(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;&#125; or fn <span class="comment">// 数据对象</span></div><div class="line">  props: [] or &#123;&#125; <span class="comment">// 组件可配置的属性</span></div><div class="line">  propsData: &#123;&#125; <span class="comment">// 在创建实例时，给属性赋值（用于测试）</span></div><div class="line">  computed: &#123;&#125; <span class="comment">// 实例计算属性</span></div><div class="line">  methods: &#123;&#125; <span class="comment">// 实例方法</span></div><div class="line">  watch: &#123;&#125; <span class="comment">// 监控属性</span></div><div class="line"></div><div class="line">  el: string or HtmlElement or fn <span class="comment">//挂载元素，将组件实例挂载到那儿</span></div><div class="line">  template: string <span class="comment">// 组件模板</span></div><div class="line">  replace: boolean <span class="comment">// 是否替换挂载元素，和template一起使用，默认true</span></div><div class="line"></div><div class="line">  init: fn <span class="comment">// 生命周期钩子，初始化时调用，此时数据观察、事件和watcher都没初始化</span></div><div class="line">  created: fn <span class="comment">// 组件参数已经解析完毕，但还未开始DOM编译</span></div><div class="line">  beforeCompile: fn <span class="comment">//开始编译DOM</span></div><div class="line">  compiled: fn <span class="comment">// DOM编译完成，数据辩护已经可以触发DOM更新了，但不保证$el已经插入文档</span></div><div class="line">  ready: fn <span class="comment">// 编译结束和 $el 第一次插入文档之后调用</span></div><div class="line">  attached: fn <span class="comment">// 在$el插入DOM时调用 </span></div><div class="line">  detached: fn <span class="comment">// 在$el从DOM元素中删除时调用</span></div><div class="line">  beforeDestroy: fn <span class="comment">// 在开始销毁实例时调用</span></div><div class="line">  destroyed: fn <span class="comment">// 实例销毁后调用，如果有离开过渡，将会在过渡完成之后调用</span></div><div class="line"></div><div class="line">  directives: &#123;&#125; <span class="comment">// 组件局部注册的指令</span></div><div class="line">  elementDirectives: &#123;&#125; <span class="comment">// 组件局部注册的元素指令</span></div><div class="line">  filters: &#123;&#125; <span class="comment">// 组件局部注册的过滤器</span></div><div class="line">  components: &#123;&#125; <span class="comment">// 组件局部注册的子组件</span></div><div class="line">  transitions: &#123;&#125; <span class="comment">// 组件局部注册的动画</span></div><div class="line">  partials: &#123;&#125; <span class="comment">// 组件局部注册的分部元素</span></div><div class="line"></div><div class="line">  parent: Vue实例 <span class="comment">// 指定实例的父实例</span></div><div class="line">  events: &#123;&#125; <span class="comment">// 事件监听列表对象</span></div><div class="line">  mixins: [] <span class="comment">// 组件的混合器</span></div><div class="line">  name: string <span class="comment">//组件的名称，允许在自己的模板中调用自己（递归组件非常有效）</span></div><div class="line">  extends: &#123;&#125; or fn <span class="comment">// 声明式的扩展组件</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>虽然全量的属性比较多，但实际上常用的并不很太多，下面我列一下我比较常用的属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Component1 = Vue.extend(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'component-1'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">firstName</span>: <span class="string">'Hu'</span>,</div><div class="line">    <span class="attr">lastName</span>: <span class="string">'Jay'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">props</span>: [<span class="string">'height'</span>, <span class="string">'width'</span>],</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;h1&gt;&#123;&#123;fullName&#125;&#125;&lt;/h1&gt;'</span>,</div><div class="line">  <span class="attr">replace</span>: <span class="literal">true</span>,</div><div class="line">  </div><div class="line">  <span class="attr">filters</span>: &#123;&#125;,</div><div class="line">  <span class="attr">components</span>: &#123;&#125;,</div><div class="line">  <span class="attr">transitions</span>: &#123;&#125;,</div><div class="line"></div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="attr">doSomething</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      alert(<span class="keyword">this</span>.fullName);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">events</span>: &#123;</div><div class="line">    <span class="string">'do'</span>: <span class="string">'doSomething'</span>, <span class="comment">//方法名字</span></div><div class="line">    <span class="string">'do1'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">//当捕获 do1 事件时执行</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">watch</span>:&#123;&#125;,</div><div class="line">  <span class="attr">computed</span>: &#123;</div><div class="line">    <span class="attr">fullName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="keyword">this</span>.lastName;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  created: funciton()&#123;</div><div class="line">    <span class="comment">// 初始化操作</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">ready</span>: funciton()&#123;</div><div class="line">    <span class="comment">// 如果有DOM操作，那么放在这里</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">beforeDestroy</span>: funciton()&#123;</div><div class="line">    <span class="comment">// 如果某些东西需要手动释放，那么放在这里</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果是在 <code>.vue</code> 格式中，我们的用法稍微有点变化，主要是使用ES6的新特性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">  <span class="xml"><span class="comment">&lt;!-- 放置样式 --&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">&lt;template&gt;</div><div class="line">  <span class="xml"><span class="comment">&lt;!-- 此处放置模板，建议都用一个根元素包裹起来 --&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app-component-1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是模板内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">&lt;script&gt;</div><div class="line">  <span class="comment">//放置组件代码</span></div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">props</span>: [],</div><div class="line">    data() &#123; </div><div class="line">      <span class="keyword">return</span> &#123;&#125;;</div><div class="line">    &#125;,</div><div class="line">    created() &#123;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      fun1() &#123;</div><div class="line"></div><div class="line">      &#125;,</div><div class="line">      fun2() &#123;</div><div class="line"></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">events</span>: &#123;</div><div class="line">      <span class="string">'do'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">watch</span>: &#123;</div><div class="line">      firstName(newVal, oldVal)&#123;</div><div class="line"></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p><strong>注意：为什么data在.vue中data是一个方法呢？因为.vue下是使用的ES6的特性，如果是属性的话，就是原型属性，当多个组件时，就会共享同一份原型，导致数据错乱，所以通过function返回一个对象，保证每个组件实例隔离。</strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[02-模块化加载&防冲突处理]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/jQuery%E6%8B%86%E8%A7%A3/02-%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8A%A0%E8%BD%BD&amp;%E9%98%B2%E5%86%B2%E7%AA%81%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="0、模块化加载"><a href="#0、模块化加载" class="headerlink" title="0、模块化加载"></a>0、模块化加载</h2><p><code>jQuery</code> 在之前的版本（具体不记得是哪个版本以前了）中，是不支持模块化加载的。</p>
<p>当前，模块化作为一个趋势，<code>jQuery</code> 也增加了对模块化的支持，当今最流行的的模块规范是 <code>UMD</code>，简单点说就是判断各种环境，然后选择合适的方式加载。</p>
<p>来看下具体的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//首先是一个IIFE，避免污染全局变量</span></div><div class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"> global, factory </span>) </span>&#123;</div><div class="line"><span class="meta">  "use strict"</span>;</div><div class="line">  <span class="comment">// 判断是否是模块化加载</span></div><div class="line">  <span class="comment">// 如果是CMD加载器，那么会有 module 和 module.exports 属性</span></div><div class="line">  <span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span> ) &#123;</div><div class="line">    <span class="comment">// 如果有document，那就算是浏览器环境，那么直接导出jQuery</span></div><div class="line">    <span class="built_in">module</span>.exports = global.document ?</div><div class="line">    <span class="comment">// 注意， factory第二个参数是true，也就是说不会挂载到全局变量上（模块化加载不需要挂载到window上）</span></div><div class="line">      factory( global, <span class="literal">true</span> ) :</div><div class="line">      <span class="comment">// 虽然看起来是模块化加载，但是没有找到window对象，这个时候就导出一个factory,需要手动传入window对象。</span></div><div class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"> w </span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ( !w.document ) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"jQuery requires a window with a document"</span> );</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> factory( w );</div><div class="line">      &#125;;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 如果不是加载器加载，那么就直接把window或者this传递给 jQuery factory</span></div><div class="line">    factory( global );</div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">// Pass this if window is not defined yet</span></div><div class="line">&#125; )( <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> window, noGlobal </span>) </span>&#123;</div><div class="line">  <span class="comment">// jQuery本身的逻辑代码</span></div><div class="line"></div><div class="line">  <span class="comment">// 注意，jQuery也支持了AMD方式加载。</span></div><div class="line">  <span class="keyword">if</span> ( <span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.amd ) &#123;</div><div class="line">    define( <span class="string">"jquery"</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> jQuery;</div><div class="line">    &#125; );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>通过以上代码实现，<code>jQuery</code> 就实现了模块化加载。</p>
<h2 id="1、防冲突处理"><a href="#1、防冲突处理" class="headerlink" title="1、防冲突处理"></a>1、防冲突处理</h2><p>当一个库可能会挂载属性到全局变量的时候，那么就要考虑全局变量覆盖这个问题。</p>
<p>比如说 <code>jQuery</code> 会挂载到 <code>window.jQuery</code> 和 <code>window.$</code> 上，那万一这两个属性已经被其他库使用了，那我们引入 <code>jQuery</code> 不就把别人的库覆盖了么。</p>
<p>作为一个完备的库，<code>jQuery</code> 也处理了这种场景。那就是防冲突方法。</p>
<p>看一下具体的实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在实现防冲突时，要注意代码的顺序</span></div><div class="line"></div><div class="line"><span class="comment">// 首先先用局部变量，把要挂载的属性备份一次。</span></div><div class="line"><span class="keyword">var</span></div><div class="line"><span class="comment">// Map over jQuery in case of overwrite</span></div><div class="line">  _jQuery = <span class="built_in">window</span>.jQuery,</div><div class="line"></div><div class="line">  <span class="comment">// Map over the $ in case of overwrite</span></div><div class="line">  _$ = <span class="built_in">window</span>.$;</div><div class="line"></div><div class="line"><span class="comment">// 实现一个冲突方法，当调用该方法时，就会把之前保存的全局变量进行还原。</span></div><div class="line"><span class="comment">// deep的意思就是是否要还原jQuery这个属性，因为jQuery并不是一个常用的属性，所以一般不会被其他库占用。</span></div><div class="line">jQuery.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params">deep</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.$ === jQuery) &#123;</div><div class="line">    <span class="built_in">window</span>.$ = _$;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (deep &amp;&amp; <span class="built_in">window</span>.jQuery === jQuery) &#123;</div><div class="line">    <span class="built_in">window</span>.jQuery = _jQuery;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 冲突之后，总要挂载吧，通过return jQuery，就能返回jQuery，这个时候可以任意挂载到你想要的属性。</span></div><div class="line">	<span class="comment">// 实例代码： window.abcde = jQuery.noConflict();</span></div><div class="line">  <span class="keyword">return</span> jQuery;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Expose jQuery and $ identifiers, even in AMD</span></div><div class="line"><span class="comment">// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)</span></div><div class="line"><span class="comment">// and CommonJS for browser emulators (#13566)</span></div><div class="line"><span class="comment">// 如果不是非全局（如果是双重否定，实际就是如果是全局）</span></div><div class="line"><span class="keyword">if</span> (!noGlobal) &#123;</div><div class="line">	<span class="comment">// 那么就设置到全局变量，这个时候已经把全局属性覆盖了。</span></div><div class="line">  <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> jQuery;</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[01_Sass学习之路：Sass、Compass安装与命令行]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Sass%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/01_Sass%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%9ASass%E3%80%81Compass%E5%AE%89%E8%A3%85%E4%B8%8E%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>CSS不是一门真正意义上的编程语言，很多编程语言理所当然的特性（比如变量），都不被支持。同时再开发模块化的web项目的时候，也要避免相互干扰。为了弥补CSS的这些不足，就产生了<strong><a href="">CSS预处理器</a></strong>，Sass则是其中的佼佼者。</p>
<h2 id="什么是Sass"><a href="#什么是Sass" class="headerlink" title="什么是Sass"></a>什么是Sass</h2><p><strong><a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a></strong>是最成熟、稳定、强大、专业的CSS扩展语言（官方解释）。直白点，Sass就是一个非常好用的CSS预处理器，为css引入部分编程语言的特性。</p>
<p>Sass在现阶段，有两种编码的语法，一个是兼容CSS语法的Scss格式文件，一个是Haml、Ruby类似语法的Sass格式文件。一般情况下，我们选用第一种兼容Css语法的Scss文件格式</p>
<h2 id="什么是Compass"><a href="#什么是Compass" class="headerlink" title="什么是Compass"></a>什么是Compass</h2><p><strong><a href="http://compass-style.org/" target="_blank" rel="external">Compass</a></strong>是基于Sass的一个css创作框架，其实就是基于Sass提供了很多非常实用的函数，有点类库的概念。</p>
<h2 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h2><p>Sass是基于Ruby写的，安装Sass需要先安装Ruby：<a href="https://www.ruby-lang.org/zh_cn/downloads/" target="_blank" rel="external">https://www.ruby-lang.org/zh_cn/downloads/</a>。</p>
<p>在Windows上安装Ruby，需要借助RubyInstall工具：<a href="http://rubyinstaller.org/" target="_blank" rel="external">http://rubyinstaller.org/</a></p>
<p>安装好Ruby只有，可以使用cmd：ruby -v 查看ruby的版本，如果有输出，表示ruby安装成功。这个时候，则可以使用<code>ruby gem sass</code>来安装Sass，<code>ruby gem compass</code>来安装Compass。</p>
<p><strong>*注意事项</strong>：由于gem仓库被墙了，如果想使用的话，需要切换镜像地址，国内可以采用淘宝的ruby镜像：<code>http://ruby.taobao.org</code>。可以通过如下命令实现：*</p>
<pre><code>//移除官方gems
gem sources --remove https://rubygems.org/
//添加淘宝的gems   
gem sources -a https://ruby.taobao.org/
//查看现有的gems
gem sources -l
</code></pre><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><pre><code>//编译Sass
sass &lt;sass file&gt; &lt;css file&gt;

//Sass与Scss相互转换
sass-convert &lt;.sass file&gt; &lt;.scss file&gt;
sass-convert &lt;.scss file&gt; &lt;.sass file&gt;

//监视Sass文件变更，自动编译(可选输出css的风格，参数为style)
sass --watch &lt;sass file&gt;:&lt;css file&gt; [--style [nested|expanded|compact|compressed]]

//监视文件夹中Sass文件变更，自动编译
sass --watch &lt;sass folder&gt;:&lt;ouput css folder&gt;

//----------------------Compass--------------

//创建Sass工程
compass create

//编译sass文件
compass compile

//监视Sass工程下sass文件变更(可选输出css的风格，参数为output-style)
compass --watch [--output-style [nested|expaned|compact|compressed]]
</code></pre><h2 id="更简单的使用方式"><a href="#更简单的使用方式" class="headerlink" title="更简单的使用方式"></a>更简单的使用方式</h2><p>看了以上这么多的步骤，是不是感觉头疼？</p>
<p><strong>老夫看你天资聪慧，将来必成大器，特为你带来一本秘籍，祝你早日功成！</strong></p>
<p>在真正的开发环境中，我们一般这么用，结果node+gulp等构建工具。</p>
<p>首先，需要安装node,然后使用npm安装gulp和gulp-sass。</p>
<p>接着，编写一个基于gulp的构建脚本，如果是其他构建工具，那么编写对应的脚本即可，gulpfile.js代码如下：</p>
<pre><code>var gulp = require(&apos;gulp&apos;),
  sass = require(&apos;gulp-sass&apos;);

gulp.task(&apos;default&apos;, [&apos;sass&apos;, &apos;watch&apos;], function () {
  console.log(&apos;Begin watching...&apos;);
});

gulp.task(&apos;sass&apos;, function () {
  return gulp.src(&apos;./*.scss&apos;)
    .pipe(sass({
      outputStyle: &apos;expanded&apos;
    }).on(&apos;error&apos;, sass.logError))
    .pipe(gulp.dest(&apos;./css/&apos;));
});

gulp.task(&apos;watch&apos;, function () {
  return gulp.watch(&apos;./*.scss&apos;, [&apos;sass&apos;]);
});
</code></pre><p>最后，使用控制台，启动gulp，然后畅快的编写sass代码吧。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[01_Stylus简介&基本使用]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E4%BB%8E0%E5%BC%80%E5%A7%8BStylus/01_Stylus%E7%AE%80%E4%BB%8B&amp;%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p><strong>关于Stylus</strong></p>
<p>Stylus是一个CSS预处理器，也就是利用编程的方式编写css代码，然后stylus会自动帮我们编译为标准的css，并能附加更多的功能。</p>
<p>Stylus开始于2010年，来自于Node.js社区。</p>
<p>Stylus的文件后缀是<code>.styl</code></p>
<p><strong>常用预处理器之间的简单比较</strong></p>
<p>常用的CSS预处理还有Sass和LESS。Sass提供了非常多的特性，也非常成熟。Less使用起来更为简单。<br>Stylus在功能上更为健壮，和JS的联系更加紧密。</p>
<p><strong>此文产生的缘由</strong></p>
<ol>
<li>由于亲近Node.js，所以想系统的学习下和js更紧密的Stylus预处理器</li>
<li>最近在实现nk-style的时候，采用了Stylus来编写CSS，用文章的方式来加深理解</li>
</ol>
<h2 id="1、配套工具"><a href="#1、配套工具" class="headerlink" title="1、配套工具"></a>1、配套工具</h2><p><strong>如何安装Stylus</strong></p>
<p>既然是Node.js社区的产出，那么很明显，安装方式也带有浓浓的Node风格。使用<code>npm install stylus -g</code>就可以在系统中安装Stylus了，当然，前提是你得先安装node和npm。</p>
<p><strong>如何使用</strong></p>
<p>安装好Stylus之后，我们就可以在控制台输入特定命令，来转换Stylus文件。</p>
<p><code>stylus css</code> –编译css目录的.styl文件，并输出同名的.css文件</p>
<p><code>stylus index.styl abc.styl</code> –编译index.styl、abc.styl文件</p>
<p>更多命令请参考 <a href="http://stylus-lang.com/docs/executable.html" target="_blank" rel="external">http://stylus-lang.com/docs/executable.html</a></p>
<p><strong>更常规的用法</strong></p>
<p>一般使用stylus的话，是会结合构建工具来一起使用的。比如结合gulp来使用的方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stylus = <span class="built_in">require</span>(<span class="string">'gulp-stylus'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'css'</span>, _ =&gt;</div><div class="line">  gulp.src(<span class="string">'./src/index.styl'</span>)</div><div class="line">    .pipe(stylus())</div><div class="line">    .pipe(gulp.dest(<span class="string">'./dist/'</span>))</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="2、Stylus语法"><a href="#2、Stylus语法" class="headerlink" title="2、Stylus语法"></a>2、Stylus语法</h2><p>Stylus在语法支持上是比较强大的。既支持标准CSS，也支持缩进格式，最厉害的还能在同一个styl文件中混用。</p>
<figure class="highlight styl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">body&#123;</div><div class="line">  <span class="attribute">background</span>: white;</div><div class="line">&#125;</div><div class="line"></div><div class="line">body&#123;</div><div class="line">  <span class="attribute">background</span> blue</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span></div><div class="line">  <span class="attribute">background</span> green</div></pre></td></tr></table></figure>
<p>编译生成的CSS如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  background: #fff;</div><div class="line">&#125;</div><div class="line">body &#123;</div><div class="line">  background: #00f;</div><div class="line">&#125;</div><div class="line">body &#123;</div><div class="line">  background: #008000;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-1、注释"><a href="#2-1、注释" class="headerlink" title="2.1、注释"></a>2.1、注释</h3><p>在学习一门编程语言（或者类编程语言时），我都胡优先去了解它的注释用法。因为刚学，意味着陌生，意味着需要些一些备注，那么这个时候注释就是个好东西。</p>
<p>在Stylus中，注释有三种方式：</p>
<ol>
<li>单行注释 –仅在styl文件中可见</li>
<li>多行注释 –常规模式下，输出到css文件中</li>
<li>重点注释 –在compress模式下，也会输出到css文件中</li>
</ol>
<p>test.styl文件内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 单行注释</div><div class="line">body&#123;</div><div class="line">  background: white;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* 多行注释 */</div><div class="line">body&#123;</div><div class="line">  background blue</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*! 多行注释 */</div><div class="line">body</div><div class="line">  background green</div></pre></td></tr></table></figure>
<p>常规模式下输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  background: #fff;</div><div class="line">&#125;</div><div class="line">/* 多行注释 */</div><div class="line">body &#123;</div><div class="line">  background: #00f;</div><div class="line">&#125;</div><div class="line">/* 多行注释 */</div><div class="line">body &#123;</div><div class="line">  background: #008000;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>压缩模式下输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">body&#123;background:#fff&#125;body&#123;background:#00f&#125;/* 多行注释 */</div><div class="line">body&#123;background:#008000&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2、变量"><a href="#2-2、变量" class="headerlink" title="2.2、变量"></a>2.2、变量</h3><p>变量在任何一个编程语言中，都是必不可少的。Stylus中也不例外。</p>
<p>Stylus的变量比较灵活，支持较多的变量名命名方式，如$abc、abc、_abc、-abc等等，但是从易读性上来说，<br>建议大家使用abc或者是$abc（推荐）其一来作为变量名规则。</p>
<p>test.styl内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/*! 变量 */</div><div class="line">/* 常规的表达式做变量名，用等号连接变量值 */</div><div class="line">//在Stylus中，可以使用$，_等前缀，但建议使用特定字符开头，来标识变量</div><div class="line">font-size = 14px;</div><div class="line">$font-size = 20px </div><div class="line"></div><div class="line">// 单行注释</div><div class="line">body&#123;</div><div class="line">  background: white;</div><div class="line">  font-size font-size</div><div class="line">  font-size: $font-size</div><div class="line">  </div><div class="line">  width w = 100px</div><div class="line">  height h = 100px</div><div class="line">  //注意，此处表达式的括号不能少</div><div class="line">  margin-left -(w/2)</div><div class="line">  margin-top -(h/2)</div><div class="line">  //使用@符号引用同级的属性</div><div class="line">  margin-left -(@width/2)</div><div class="line">  margin-top -(@height/2)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成的CSS内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/* 变量 */</div><div class="line">/* 常规的表达式做变量名，用等号连接变量值 */</div><div class="line">body &#123;</div><div class="line">  background: #fff;</div><div class="line">  font-size: 14px;</div><div class="line">  font-size: 20px;</div><div class="line">  width: 100px;</div><div class="line">  height: 100px;</div><div class="line">  margin-left: -50px;</div><div class="line">  margin-top: -50px;</div><div class="line">  margin-left: -50px;</div><div class="line">  margin-top: -50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多变量使用，请查阅<a href="http://stylus-lang.com/docs/variables.html" target="_blank" rel="external">http://stylus-lang.com/docs/variables.html</a></p>
<h3 id="2-3、选择器"><a href="#2-3、选择器" class="headerlink" title="2.3、选择器"></a>2.3、选择器</h3><p>在编写CSS的过程中，我们用得最多的无非就是选择器了。我们来看看Stylus对选择器做了哪些扩展。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">/*! 选择器 */</div><div class="line">/* 1、选择器嵌套 */</div><div class="line">body</div><div class="line">  background white</div><div class="line">  .container</div><div class="line">    background blue</div><div class="line">/* 2、引用直接父级别节点 */</div><div class="line">li</div><div class="line">  &amp;:hover</div><div class="line">    color blue</div><div class="line">/* 3、引用指定级别上层节点,个人觉得稍显复杂，不易懂，尽量少使用 */</div><div class="line">body</div><div class="line">  color white</div><div class="line">  li</div><div class="line">    a</div><div class="line">      color green</div><div class="line">    ^[1]:hover</div><div class="line">        color yellow</div><div class="line">/* 4、根节点引用，使用/将当前样式提升到第一层级 */</div><div class="line">body</div><div class="line">  li</div><div class="line">    / .test</div><div class="line">      color white</div><div class="line">/* 5、使用../来回到上一层级 */</div><div class="line">body</div><div class="line">  li</div><div class="line">    ../ .test</div><div class="line">      color yellow</div><div class="line">/* 6、使用selector()来构造选择器 */</div><div class="line">&#123;selector(&apos;.a&apos;, &apos;.b, .c&apos;)&#125;</div><div class="line">  color white</div><div class="line">/* 7、选择器为变量，那么用&#123;&#125;包裹，属性也是 */</div><div class="line">$selector = &quot;.text-danger&quot;</div><div class="line">$font = font-family</div><div class="line"></div><div class="line">&#123;$selector&#125;</div><div class="line">  &#123;$font&#125; &quot;微软雅黑&quot;</div><div class="line"></div><div class="line">/* 8、使用表达式 */</div><div class="line">exp_margin_pad(n)</div><div class="line">  margin (- n)px</div><div class="line">  </div><div class="line">body</div><div class="line">  exp_margin_pad(10)</div></pre></td></tr></table></figure>
<p>编译为CSS如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">/* 选择器 */</div><div class="line">/* 1、选择器嵌套 */</div><div class="line">body &#123;</div><div class="line">  background: #fff;</div><div class="line">&#125;</div><div class="line">body .container &#123;</div><div class="line">  background: #00f;</div><div class="line">&#125;</div><div class="line">/* 2、引用直接父级别节点 */</div><div class="line">li:hover &#123;</div><div class="line">  color: #00f;</div><div class="line">&#125;</div><div class="line">/* 3、引用指定级别上层节点,个人觉得稍显复杂，不易懂，尽量少使用 */</div><div class="line">body &#123;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div><div class="line">body li a &#123;</div><div class="line">  color: #008000;</div><div class="line">&#125;</div><div class="line">body li:hover &#123;</div><div class="line">  color: #ff0;</div><div class="line">&#125;</div><div class="line">/* 4、根节点引用，使用/将当前样式提升到第一层级 */</div><div class="line">.test &#123;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div><div class="line">/* 5、使用../来回到上一层级 */</div><div class="line">body .test &#123;</div><div class="line">  color: #ff0;</div><div class="line">&#125;</div><div class="line">/* 6、使用selector()来构造选择器 */</div><div class="line">.a .b,</div><div class="line">.a .c &#123;</div><div class="line">  color: #fff;</div><div class="line">&#125;</div><div class="line">/* 7、选择器为变量，那么用&#123;&#125;包裹，属性也是 */</div><div class="line">.text-danger &#123;</div><div class="line">  font-family: &quot;微软雅黑&quot;;</div><div class="line">&#125;</div><div class="line">/* 8、使用表达式 */</div><div class="line">body &#123;</div><div class="line">  margin: -10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>花样太多，就不一一例举了。不过，常用的没几个。个人最常用的仅仅是嵌套。</p>
<p>想了解更多，请参考： <a href="http://stylus-lang.com/docs/selectors.html" target="_blank" rel="external">http://stylus-lang.com/docs/selectors.html</a></p>
<h3 id="2-5、样式块"><a href="#2-5、样式块" class="headerlink" title="2.5、样式块"></a>2.5、样式块</h3><p>Stylus的变量没有集合的概念，那么如果有一组样式要复用的时候，变量就有点捉襟见肘了。这个时候，我们可以采用block来实现一组样式的复用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/*! 样式块，两种定义方式，推荐第二种，为了易读性 */</div><div class="line">font = </div><div class="line">  font-family &quot;微软雅黑&quot;</div><div class="line">  font-size 1rem</div><div class="line"></div><div class="line">font1 = @block&#123;</div><div class="line">  font-family &quot;宋体&quot;</div><div class="line">  font-size 14px;</div><div class="line">&#125;</div><div class="line">  </div><div class="line">body</div><div class="line">  &#123;font&#125;</div><div class="line">  &#123;font1&#125;</div></pre></td></tr></table></figure>
<p>编译结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/* 样式块，两种定义方式，推荐第二种，为了易读性 */</div><div class="line">body &#123;</div><div class="line">  font-family: &quot;微软雅黑&quot;;</div><div class="line">  font-size: 1rem;</div><div class="line">  font-family: &quot;宋体&quot;;</div><div class="line">  font-size: 14px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-6-样式继承"><a href="#2-6-样式继承" class="headerlink" title="2.6 样式继承"></a>2.6 样式继承</h3><p>在编写CSS的过程中，我们往往会发现新加的样式和之前已有的样式类有重复的部分，如果是原生CSS，那么我们又得拷贝一份样式出来。在Stylus中，大可不必如此麻烦。使用@extend很方便的就能解决这个问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/*! 样式继承 */</div><div class="line"></div><div class="line">.btn</div><div class="line">  border 1px solid red;</div><div class="line">  border-radius 5px</div><div class="line"></div><div class="line">.btn-danger</div><div class="line">  @extend .btn //继承.btn的样式</div><div class="line">  color red</div><div class="line"></div><div class="line">//如果不嫌输出.btn，我们只需要将btn做成占位选择器，如下</div><div class="line">$btn</div><div class="line">  border 1px solid red;</div><div class="line">  border-radius 5px</div><div class="line">  </div><div class="line">.btn-info</div><div class="line">  @extend $btn</div><div class="line">  color purple</div></pre></td></tr></table></figure>
<p>编译后为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/* 样式继承 */</div><div class="line">.btn,</div><div class="line">.btn-danger &#123;</div><div class="line">  border: 1px solid #f00;</div><div class="line">  border-radius: 5px;</div><div class="line">&#125;</div><div class="line">.btn-danger &#123;</div><div class="line">  color: #f00;</div><div class="line">&#125;</div><div class="line">.btn-info &#123;</div><div class="line">  border: 1px solid #f00;</div><div class="line">  border-radius: 5px;</div><div class="line">&#125;</div><div class="line">.btn-info &#123;</div><div class="line">  color: #800080;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意1：@extend和@extends完全相等，两者可以混用</strong></p>
<p><strong>注意2：@extend与Sass不同的地方，在于Stylus的@extend支持继承嵌套选择器</strong></p>
<h3 id="2-7、方法"><a href="#2-7、方法" class="headerlink" title="2.7、方法"></a>2.7、方法</h3><p>编程语言重要的一个特征就是函数，在Stylus中，也有函数的概念，函数的概念和Mixins比较类似，但是，函数还可以有返回值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">/*! 函数 */</div><div class="line">// 个人建议在定义函数时，以f_为前缀，方便识别</div><div class="line">f_plus(a, b) //简单函数</div><div class="line">  a + b</div><div class="line">  </div><div class="line">f_plus2(a, b = a) //带默认值的函数</div><div class="line">  a + b + 0px</div><div class="line"></div><div class="line">f_multireturn() //多返回值函数</div><div class="line">  5px 10px 15px 20px</div><div class="line">  </div><div class="line">f_margin() //想要作为整体返回,为了消除歧义，建议使用rerurn和括号包裹返回值</div><div class="line">  return (5px 10px 5px 10px)</div><div class="line"></div><div class="line">f_test = f_margin //函数可以指定别名</div><div class="line"></div><div class="line">//和js雷同，函数可以作为参数传递</div><div class="line">f_fun1(a, b)</div><div class="line">  a + b + 0px</div><div class="line">f_fun2(a, b)</div><div class="line">  a - b + 0px</div><div class="line">f_invork(a, b, fn)</div><div class="line">  fn(a, b)  </div><div class="line"></div><div class="line">body</div><div class="line">  margin-top f_plus(5, 10)</div><div class="line">  margin-top f_plus(5px, 10)</div><div class="line">  margin-top f_plus2(5)</div><div class="line">  margin-top f_plus2(b: 10, a: 5) //命名参数传递</div><div class="line">  margin-bottom f_multireturn()[3] //取第四个值，下标从0开始</div><div class="line">  margin f_margin()</div><div class="line">  width f_invork(100, 50, f_fun1)</div><div class="line">  height f_invork(100, 50, f_fun2)</div></pre></td></tr></table></figure>
<p>编译之后为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/* 函数 */</div><div class="line">body &#123;</div><div class="line">  margin-top: 15;</div><div class="line">  margin-top: 15px;</div><div class="line">  margin-top: 10px;</div><div class="line">  margin-top: 15px;</div><div class="line">  margin-bottom: 20px;</div><div class="line">  margin: 5px 10px 5px 10px;</div><div class="line">  width: 150px;</div><div class="line">  height: 50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、未完，待续"><a href="#3、未完，待续" class="headerlink" title="3、未完，待续"></a>3、未完，待续</h2>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[01_认识Vue]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Vue%E5%AE%9E%E8%B7%B5%E4%B9%8B%E8%B7%AF/01_%E8%AE%A4%E8%AF%86Vue/</url>
      <content type="html"><![CDATA[<h1 id="0、关于Vue"><a href="#0、关于Vue" class="headerlink" title="0、关于Vue"></a>0、关于Vue</h1><p><a href="https://vuejs.org.cn/" target="_blank" rel="external">Vue</a> 是当前非常流行的一款前端 MV<em> 库（国人开发），结合 vue-router, vue-resource, vuex 等等，就形成了一套比较完善的前端 MV</em> 开发框架。</p>
<p>与它非常相似的框架是 <a href="http://avalonjs.coding.me/" target="_blank" rel="external">Avalon</a> ，都借鉴了当前流行的前端 MV* 库、框架，都是基于 ES5 getter setter 实现双向绑定。</p>
<p>与 <code>Avalon</code> 相比， <code>Vue</code> 在稳定性和文档方面更胜一筹。</p>
<p>但 <code>Avalon</code> 利用 <code>VBScript</code> 在IE6+上实现了双向绑定，不过文档和稳定性稍微有些欠缺。</p>
<p>那么如果没有IE9-的兼容性要求，有需要产线环境，那么Vue就是非常合适的一个东西了。</p>
<h1 id="1、配套工具"><a href="#1、配套工具" class="headerlink" title="1、配套工具"></a>1、配套工具</h1><p><code>Vue</code> 本身仅仅是一个双向绑定，组件化的库，要实现一个完整的应用，那么还需要其他的一些配套工具。</p>
<p>实际上，在 <code>Vue</code> 发布到流行的这几年间，它的配套工具已经相当完善了。特别是 <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="external">vue-cli</a>，更是极大的减少了环境搭建的成本。</p>
<p>其他的路由，Ajax，数据流， <a href="https://github.com/vuejs" target="_blank" rel="external">vuejs组织</a> 也都提供了相应的package来支撑。</p>
<ol>
<li>路由  vue-router</li>
<li>Ajax/HTTP vue-resource</li>
<li>数据流 vuex</li>
</ol>
<h1 id="2、开始一个项目"><a href="#2、开始一个项目" class="headerlink" title="2、开始一个项目"></a>2、开始一个项目</h1><p>如果有Angular等前端框架使用经验，那么可以很轻松的切入vue的使用，因为有太多的似曾相识。</p>
<p>另外，通过vue-cli，我们可以不用自己去搭建开发环境，几条命令就足以让我们能够看到一个能跑起来的完整项目。特别是还自带热更新，自动编译，自动刷新等强大的构建功能。</p>
<p>来领略一下vue的魅力吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 全局安装vue-cli命令行工具</div><div class="line">$ npm install -g vue-cli  </div><div class="line"></div><div class="line">// 在当前目录中创建一个demo1目录，并创建一个基于webpack的开发环境。</div><div class="line">//（该命令是向导式方式，可以设置一些属性）</div><div class="line">$ vue init webpack demo1 // vue-init &lt;template-name&gt; [project-name]</div><div class="line"></div><div class="line">// 进入真正的项目目录</div><div class="line">$ cd demo1 </div><div class="line"></div><div class="line">// 安装依赖，你懂的~</div><div class="line">$ npm install </div><div class="line"></div><div class="line">// 运行开发环境（注意：默认端口是8080，执行该命令后不会自动打开页面，</div><div class="line">// 需要打开浏览器手动输入 http://localhost:8080 ）</div><div class="line">$ npm run dev</div></pre></td></tr></table></figure>
<p>仅仅有开发环境，你满足了么？反正我是不满足的，<code>vue-cli</code> 还提供了完善的命令，能够直接打包产线所需要的资源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run build // 生产环境打包</div></pre></td></tr></table></figure>
<h1 id="3、认识-vue"><a href="#3、认识-vue" class="headerlink" title="3、认识.vue"></a>3、认识.vue</h1><p><code>.vue</code> 是vue特有的一种文件格式，一个 <code>.vue</code> 文件也是一个独立的组件。</p>
<p>它把内部内容分为三块，样式，模板和逻辑（JS），逻辑部分原生支持 <code>ES2015</code>，简单的示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">  &lt;!-- 用于放置组件样式 --&gt;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;template&gt;</div><div class="line">  &lt;!-- 用于放置组件模板 --&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  // 用于放置组件逻辑代码</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>其中的 style 标记，还可以使用 <code>scoped</code> 标记来生成模块化CSS，也可以使用 <code>lang=&quot;&lt;lang&gt;&quot;</code> 来选择使用一个CSS预处理器。</p>
<p>我喜欢的方式如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意：如果选择了使用预处理器，那么需要安装特定的预处理器loader，如使用 <code>npm install stylus-loader</code> 来增加对 <code>stylus</code> 的支持。 </strong></p>
<h1 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h1><p>主流MVVM框架性能比较</p>
<p><img src="http://avalonjs.coding.me/styles/performance.jpg" alt="主流MVVM框架性能比较"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular再回首(2)-那些容易忽略的Component细节]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular%E7%9B%B8%E5%85%B3/Angular%E5%86%8D%E5%9B%9E%E9%A6%96(2)-%E9%82%A3%E4%BA%9B%E5%AE%B9%E6%98%93%E5%BF%BD%E7%95%A5%E7%9A%84Component%E7%BB%86%E8%8A%82/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>在 <code>Angular 1.5.x</code> 中，增加的组件方法，相当实用和易用。但也有许多小细节问题值得注意，<br>以下为本人在组件实践过程中遇到的问题，或者是需要注意的小细节。</p>
<h2 id="1、问题-小细节（需要注意的点）"><a href="#1、问题-小细节（需要注意的点）" class="headerlink" title="1、问题/小细节（需要注意的点）"></a>1、问题/小细节（需要注意的点）</h2><h3 id="1-1、如何判断是否添加了可选的-transclude-元素？"><a href="#1-1、如何判断是否添加了可选的-transclude-元素？" class="headerlink" title="1.1、如何判断是否添加了可选的 transclude 元素？"></a>1.1、如何判断是否添加了可选的 <code>transclude</code> 元素？</h3><p>在很多时候，我们会给一个组件设定多个 <code>transclude</code>，可能其中有一部分是可选的，那如何判断可选的 <code>transclude</code> 被用户设置了值呢？</p>
<p>此时，我们可以依靠 <code>$transclude</code> 来进行判断：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXXComponent</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>($transclude)&#123;</div><div class="line">    <span class="keyword">this</span>.$transclude = $transclude;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  $onInit()&#123;</div><div class="line">    <span class="comment">// 判断transclude是否存在</span></div><div class="line">    <span class="keyword">let</span> transcludeName = <span class="string">'xxx'</span>;</div><div class="line">    <span class="keyword">let</span> hasXXX = <span class="keyword">this</span>.$transclude.isSlotFilled(transcludeName);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">XXXComponent.$inject = [<span class="string">'$transclude'</span>];</div></pre></td></tr></table></figure>
<h3 id="1-2、如何监控绑定属性的变更？"><a href="#1-2、如何监控绑定属性的变更？" class="headerlink" title="1.2、如何监控绑定属性的变更？"></a>1.2、如何监控绑定属性的变更？</h3><p>属性绑定，分为一次性绑定(@)（也算是单向绑定），单向绑定(&lt;)，双向绑定(=)。</p>
<p><strong># 监控单向绑定属性</strong></p>
<p>对于单向绑定的属性，可以通过生命周期钩子 <code>$onChanges(changesObj)</code> 来进行监控。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXXController</span></span>&#123;</div><div class="line">  $onChanges(changesObj)&#123;</div><div class="line">    <span class="built_in">console</span>.log(changesObj);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中参数 <code>changesObj</code> 是所有变更属性的一个汇总，数据结构如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">changesObj = &#123;</div><div class="line">  key1: &#123; // 有变更的绑定属性</div><div class="line">    currentValue: any // 当前值 （变化后的值）</div><div class="line">    previousValue: any // 上一次的值 （变化前的值）</div><div class="line">    isFirstChange(): fn // 方法，用于判断是否是第一次变更。 </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：<code>$onChanges</code> 无法监控双向绑定属性，切记！</strong></p>
<p><strong># 监控双向绑定</strong></p>
<p>由于 <code>$onChanges</code> 无法监控双向绑定属性，那么我们就必须另外想办法来进行监控，可以有以下几种方案：</p>
<p><em>方案一：利用 <code>$interval</code></em></p>
<p>既然是双向绑定，那么肯定变化是直接生效的，关键就在于我们无法监视到，这个时候我们可以利用 <code>$interval</code> 来实现定时监控。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXXController</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>($interval)&#123;</div><div class="line">    <span class="keyword">this</span>.$interval = $interval;</div><div class="line">    <span class="keyword">this</span>.init();</div><div class="line">  &#125;</div><div class="line">  init()&#123;</div><div class="line">    <span class="keyword">let</span> previousValue = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">this</span>.$interval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span>(previousValue !== <span class="keyword">this</span>.value)&#123;</div><div class="line">        previousValue = <span class="keyword">this</span>.value;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'value changed'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;, <span class="number">200</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">XXXController.$inject = [<span class="string">'$interval'</span>];</div><div class="line"></div><div class="line">angular.module(<span class="string">'xxx'</span>).component(<span class="string">'xxx'</span>, &#123;</div><div class="line">  <span class="attr">bindings</span>: &#123;</div><div class="line">    <span class="attr">value</span>: <span class="string">'='</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">controller</span>: XXXController,</div><div class="line">  <span class="attr">controllerAs</span>: <span class="string">'vm'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>优点：</p>
<ol>
<li>易于理解</li>
</ol>
<p>缺点：</p>
<ol>
<li>浪费资源</li>
<li>需要自己书写逻辑</li>
</ol>
<p>推荐指数： ☆</p>
<p><em>方案二：利用 <code>$scope.$watch(keyString)</code></em></p>
<p>组件也有独立的 <code>$scope</code>，那么借助 <code>$scope.$watch</code> 也可以实现监听属性变化，代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class XXXController&#123;</div><div class="line">  constructor($scope)&#123;</div><div class="line">    this.$scope = $scope;</div><div class="line">    this.init();</div><div class="line">  &#125;</div><div class="line">  init()&#123;</div><div class="line">    this.$scope.$watch('vm.value', (newVal, oldVal) =&gt; &#123;</div><div class="line">      console.log('value changed);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">XXXController.$inject = ['$scope'];</div><div class="line"></div><div class="line">angular.module('xxx').component('xxx', &#123;</div><div class="line">  bindings: &#123;</div><div class="line">    value: '=' // 双向绑定属性</div><div class="line">  &#125;,</div><div class="line">  controller: XXXController,</div><div class="line">  controllerAs: 'vm'</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>优点：</p>
<ol>
<li>使用简单</li>
</ol>
<p>缺点：</p>
<ol>
<li>字符串形式的 <code>$watch</code>,依赖 <code>controllerAs</code>,不易理解 </li>
<li>实质仍然是定时器，只不过是使用的 <code>angular</code> 自身的 <code>$diget</code> 循环</li>
</ol>
<p>推荐指数： ☆☆</p>
<p><em>方案三：利用 <code>$scope.$watch(fn)</code></em></p>
<p><code>$scope.$watch</code> 也接受函数类型的参数，相对于字符串形式，没有 <code>controllerAs</code> 的相关性，而且更灵活，代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class XXXController&#123;</div><div class="line">  constructor($scope)&#123;</div><div class="line">    this.$scope = $scope;</div><div class="line">    this.init();</div><div class="line">  &#125;</div><div class="line">  init()&#123;</div><div class="line">    this.$scope.$watch(() =&gt; this.value, (newVal, oldVal) =&gt; &#123;</div><div class="line">      console.log('value changed);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">XXXController.$inject = ['$scope'];</div><div class="line"></div><div class="line">angular.module('xxx').component('xxx', &#123;</div><div class="line">  bindings: &#123;</div><div class="line">    value: '=' // 双向绑定属性</div><div class="line">  &#125;,</div><div class="line">  controller: XXXController,</div><div class="line">  controllerAs: 'vm'</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>优点：</p>
<ol>
<li>使用简单</li>
</ol>
<p>缺点：</p>
<ol>
<li>实质仍然是定时器，只不过是使用的 <code>angular</code> 自身的 <code>$diget</code> 循环</li>
</ol>
<p>推荐指数： ☆☆☆☆</p>
<p><em>方案四：利用 <code>getter &amp; setter</code></em></p>
<p>因为我们使用了 <code>ES6 Class</code>，那么 <code>ES6</code> 的 <code>getter setter</code> 特性，我们也是能够使用的，方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">XXXController</span></span>&#123;</div><div class="line"></div><div class="line">  set value(val)&#123;</div><div class="line">    <span class="keyword">this</span>._value = val;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'value changed'</span>);</div><div class="line">  &#125;</div><div class="line">  get value()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._value;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">XXXController.$inject = [];</div><div class="line"></div><div class="line">angular.module(<span class="string">'xxx'</span>).component(<span class="string">'xxx'</span>, &#123;</div><div class="line">  <span class="attr">bindings</span>: &#123;</div><div class="line">    <span class="attr">value</span>: <span class="string">'='</span> <span class="comment">// 双向绑定属性</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">controller</span>: XXXController,</div><div class="line">  <span class="attr">controllerAs</span>: <span class="string">'vm'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>优点：</p>
<ol>
<li>没有额外的开销，性能高</li>
</ol>
<p>缺点：</p>
<ol>
<li>使用相对较为复杂</li>
</ol>
<p>推荐指数： ☆☆☆☆</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular开发Tips]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular%E7%9B%B8%E5%85%B3/Angular%E5%BC%80%E5%8F%91Tips/</url>
      <content type="html"><![CDATA[<p>1、在使用$routeProvider的时候，需要让模块依赖ngRoute，否则会提示找不到服务，示例：</p>
<pre><code>angular.module(&apos;module1&apos;, [&apos;ngRoute&apos;])
.config([&apos;$routeProvider&apos;, function($routeProvider){
  //do something...
}]);
</code></pre><p>2、在页面中需要绑定有风险的html的时候，可以使用 <code>ng-bind-html=&quot;html&quot;（version&gt;=1.3）</code>,如果遇到错误，控制器中可以使用<code>html = $sce.trustHtml(unsafeHtml)</code>。</p>
<p>3、 如何动态的向页面添加带指令的HTML？通入如下代码：</p>
<pre><code>$compile(html)($scope);
</code></pre><p>4、如果阻止事件冒泡？示例如下：</p>
<pre><code>//方式一，利用一个自定义指令实现
.directive(&apos;stopEventPropagation&apos;, function(){
  return {
    restrict: &apos;A&apos;,
    link: function(scope, iElement, iAttrs){
      //通过获取事件对象，来阻止调用
      iElement.bind(&apos;click&apos;, function(e){
        e.stopPropagation();
      });
    }
  }
});

&lt;a stop-event-propagation ng-click=&quot;doSomething();&quot;&gt;Click me&lt;/a&gt;

//方式二，直接引用$event对象

&lt;a ng-click=&quot;doSomething(); $event.stopPropagation();&quot;&gt;Click me&lt;/a&gt;
</code></pre><p>5、关于$route和$location的事件顺序，如下：</p>
<pre><code>$routeChangeStart -&gt; $locationChangeStart -&gt; $locationChangeSuccess -&gt; $routeChangeSuccess
</code></pre><p>6、有关select标签的使用，当options的来源是ajax时，那么如果指定选中项呢？如下：</p>
<pre><code>&lt;select ng-options=&quot;sysOptions&quot; ng-model=&quot;selectSystem&quot;&gt;&lt;/select&gt;
//如上HTML代码，如果sysOptions来自ajax请求，而selectSystem又不是的话，往往会选中一个空值。
//可以使用如下方式避免：
</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.controller(<span class="string">'TestCtrl'</span>, [<span class="string">'$scope'</span>, <span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $http</span>)</span>&#123;</div><div class="line">  $http.get(url).success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    $scope.sysOptions = data;</div><div class="line">    <span class="comment">//在异步回调函数中，对ng-model赋值。</span></div><div class="line">    $scope.selectSystem = <span class="string">'Test'</span>;</div><div class="line">  &#125;);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>7、在编写指令时，属性的匹配大小写需要注意：如果在html中使用 <code>showName=&quot;xx&quot;</code>,那么在指令的iAttrs中，应该使用 <code>showname</code> 获取。如果要在指令中使用showName获取的话，那么必须在html中使用 <code>show-name=&quot;xx&quot;</code>。</p>
<p>8、要生成安全链接时，需要修改配置，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">需要将如下代码： ng-href=<span class="string">"&#123;&#123;true: 'javascript:void(0);' : 'url'&#125;&#125;"</span> </div><div class="line">生成为： href=<span class="string">"javascript:void(0);"</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.config([<span class="string">'$compileProvider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$compileProvider</span>)</span>&#123;</div><div class="line">    $compileProvider.aHrefSanitizationWhitelist(<span class="regexp">/^\s*(https?|ftp|mailto|file|javascript):/</span>)</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>9、在ng-click等ng事件中，如果拿到事件源对象？如下：</p>
<pre><code class="javascript">&lt;a ng-click=<span class="string">"click($event);"</span> /&gt;

$scope.click = <span class="function"><span class="keyword">function</span>(<span class="params">$event</span>)</span>{
  <span class="keyword">var</span> target = $event.target;
};
<span class="comment">//注意，如果使用ng-click="click($event.target)"，将会导致angular解析错误。</span>
</code></pre>
<p>10、判断angular的模块是否存在，可以使用如下代码：</p>
<pre><code>var isAngularModuleExists = function(moduleName){
  try{
    angular.module(moduleName)
  }catch{
    return false
  }
  return true;
};
</code></pre><p>11、在使用coffee编写使用provider方式编写服务时，当心写在最后的this.$get，coffee会将最后一句编译为return this.$get，而这刚好不符合provider的要求，所以应该在末尾手动加上return或者放置一个undefined在最后，放置编译出return this.$get这样的代码。</p>
<p>12、如果要动态控制是否启用非空验证，可以使用ng-required=”true|false”指令。</p>
<p>13、当心ng-if指令，在使用ng-if指令时，会创建独立的作用域，如果要在$scope监视ng-if包含的变量，那么是无法成功的。如果一定要监视，可以考虑使用ng-show。</p>
<p>14、注意.value()与.constant的区别，前者只能注入和用于服务或者控制器中，后则可以被注入到配置(.config([‘xx’]))中。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular再回首(3)-我们来实现一个组件]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular%E7%9B%B8%E5%85%B3/Angular%E5%86%8D%E5%9B%9E%E9%A6%96(3)-%E6%88%91%E4%BB%AC%E6%9D%A5%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>前两文写了 <code>Component</code> 的一些方面，但没有一个比较线性的串联关系，本文，就来从一个实例出发，来尝试概括一个组件的方方面面。</p>
<h2 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h2><h2 id="2、组件实现"><a href="#2、组件实现" class="headerlink" title="2、组件实现"></a>2、组件实现</h2><h3 id="2-1、先整一个组件"><a href="#2-1、先整一个组件" class="headerlink" title="2.1、先整一个组件"></a>2.1、先整一个组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>, [])</div><div class="line">  .component(<span class="string">'finalComponent'</span>, &#123;&#125;);</div></pre></td></tr></table></figure>
<p>这个组件啥都不干，就提供了一个新的标签，显得毫无意义，但是我们可以从这里看到如何定义一个组件。</p>
<p><strong>注意：组件名称，请使用小驼峰命名法，在HTML中，请使用连字符+小写字母，这种实现是为了处理js和html大小写敏感的差异(js区分大小写，html不区分)</strong></p>
<p><strong>注意2：如果在组件标签中，嵌入有效的标签，是会显示出来的，如下：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">final-component</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">final-component</span>&gt;</span></div></pre></td></tr></table></figure>
<p>会显示出大号的 “Hello”。</p>
<h3 id="2-2、带模板的组件"><a href="#2-2、带模板的组件" class="headerlink" title="2.2、带模板的组件"></a>2.2、带模板的组件</h3><p>接着，来实现一个有意义的组件，比如我要渲染一个特定的字符串，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>, [])</div><div class="line">  .component(<span class="string">'finalComponent'</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">'&lt;h1&gt;Hello World.&lt;/h1&gt;'</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>现在我们再使用：<code>&lt;final-component&gt;ABC&lt;/final-component&gt;</code>，则会显示 “Hello World” 内容了。</p>
<p><strong>注意：当组件指定了模板属性后，其内部的标签，将不会生效（transclude除外，）</strong></p>
<h3 id="2-3、复杂模板的组件"><a href="#2-3、复杂模板的组件" class="headerlink" title="2.3、复杂模板的组件"></a>2.3、复杂模板的组件</h3><p>以上，我们已经实现了带模板的组件，可是我们的模板可能会比较复杂，这个时候直接写 <code>template</code> 就不太好用了,此时，我们会考虑把模板拆分到一个独立的 <code>.html</code> 文件中，代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件模板内容(文件名为:template.html) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后，使用 <code>templateUrl</code> 属性进行关联</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>, [])</div><div class="line">  .component(<span class="string">'finalComponent'</span>, &#123;</div><div class="line">    <span class="attr">templateUrl</span>: <span class="string">'/app/template.html'</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>该代码可以达到 2.2 同样的效果，只是把模板内容拆分到独立文件中了。</p>
<p><strong>注意：模板路径可以是相对路径，也可以是绝对路径，需要注意路径的写法，否则会出现找不到模板</strong></p>
<p><strong>注意2：如果使用 <code>gulp</code> 构建，可以考虑使用 <code>gulp-angular-embed-templates</code> 将独立的模板文件，打包到组件中。</strong></p>
<h3 id="2-4、组件属性绑定"><a href="#2-4、组件属性绑定" class="headerlink" title="2.4、组件属性绑定"></a>2.4、组件属性绑定</h3><p>之前实现的组件，感觉太死板了，我想改下文字，都不好实现（你非要用js强制操作dom，我拿你也没办法，不过后果自负），这个时候，我们迫切的需要能给组件传递参数。</p>
<p><code>Angular</code> 组件中，有多个参数传递方式，如下：</p>
<ul>
<li>@ 单向绑定字符串（原值绑定） - 传什么就是什么，不做任何处理</li>
<li>&lt; 单向绑定变量（取scope的值绑定） - 传的值会先用 <code>$scope</code> 转换，把结果传递给组件</li>
<li>= 双向绑定 - 组件内外变化都会通知另一方</li>
</ul>
<h4 id="2-4-1-直接传递字符串参数"><a href="#2-4-1-直接传递字符串参数" class="headerlink" title="2.4.1 直接传递字符串参数"></a>2.4.1 直接传递字符串参数</h4><p>使用 <code>@</code> 进行单向字符串绑定</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>, [])</div><div class="line">  .component(<span class="string">'finalComponent'</span>, &#123;</div><div class="line">    <span class="attr">templateUrl</span>: <span class="string">'/app/template.html'</span></div><div class="line">    bindings: &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'@'</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 模板内容 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;$ctrl.name&#125;&#125;.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 使用组件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">final-component</span> <span class="attr">name</span>=<span class="string">"Jay"</span>&gt;</span><span class="tag">&lt;/<span class="name">final-component</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此时，将会显示“Hello Jay”，可以看到，设定的参数值会原样显示了。</p>
<p><strong>注意：在模板中，要使用变量，需要加$ctrl前缀，先这样用着，后面会提到</strong></p>
<h4 id="2-4-2-使用单向绑定变量"><a href="#2-4-2-使用单向绑定变量" class="headerlink" title="2.4.2 使用单向绑定变量"></a>2.4.2 使用单向绑定变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'Jay'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">TestController.$inject = []; <span class="comment">// 依赖</span></div><div class="line">angular.module(<span class="string">'app'</span>, [])</div><div class="line">  .component(<span class="string">'finalComponent'</span>, &#123;</div><div class="line">    <span class="attr">templateUrl</span>: <span class="string">'/app/template.html'</span></div><div class="line">    bindings: &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'&lt;'</span></div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  .controller(<span class="string">'TestController'</span>, TestController);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 模板内容 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;$ctrl.name&#125;&#125;.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 使用组件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"TestController as t"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">final-component</span> <span class="attr">name</span>=<span class="string">"t.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">final-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此时，也将会显示“Hello Jay”，可以看到，此时 <code>t.name</code> 会拿到 <code>$scope</code> 中进行解析。</p>
<p><strong>注意：推荐使用 <code>controller as</code> 写法</strong></p>
<h4 id="2-4-3-双向绑定"><a href="#2-4-3-双向绑定" class="headerlink" title="2.4.3 双向绑定"></a>2.4.3 双向绑定</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'Jay'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">TestController.$inject = []; <span class="comment">// 依赖</span></div><div class="line">angular.module(<span class="string">'app'</span>, [])</div><div class="line">  .component(<span class="string">'finalComponent'</span>, &#123;</div><div class="line">    <span class="attr">templateUrl</span>: <span class="string">'/app/template.html'</span></div><div class="line">    bindings: &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'='</span></div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  .controller(<span class="string">'TestController'</span>, TestController);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 模板内容 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello &#123;&#123;$ctrl.name&#125;&#125;.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"$ctrl.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 使用组件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"TestController as t"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">final-component</span> <span class="attr">name</span>=<span class="string">"t.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">final-component</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123;t.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此时，在文本框输入值之后，可以看到组件内外都会及时变更。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5探索一（那些新增的标签和属性）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8BH5/HTML5%E6%8E%A2%E7%B4%A2%E4%B8%80%EF%BC%88%E9%82%A3%E4%BA%9B%E6%96%B0%E5%A2%9E%E7%9A%84%E6%A0%87%E7%AD%BE%E5%92%8C%E5%B1%9E%E6%80%A7%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>html5相比html4，添加了部分语义化的标签和属性，现在我们就从这些标签和属性开始，学习html5吧。</p>
<p>首先，认识下HTML5新的文档类型：</p>
<pre><code>&lt;!DOCTYPE html&gt;
</code></pre><h2 id="那些新标签"><a href="#那些新标签" class="headerlink" title="那些新标签"></a>那些新标签</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ol>
<li>&lt;bdi&gt; 定义文本的文本方向，使其脱离其周围文本的方向设置</li>
<li>&lt;mark&gt; 定义有记号的文本</li>
<li>&lt;meter&gt; 定义预定义范围内的度量</li>
<li>&lt;progress&gt; 定义任何类型的任务的进度</li>
<li>&lt;rp&gt; 定义若浏览器不支持ruby元素显示的内容</li>
<li>&lt;rt&gt; 定义ruby注释的解释</li>
<li>&lt;ruby&gt; 定义ruby注释</li>
<li>&lt;time&gt; 定义日期/时间</li>
<li>&lt;wbr&gt; 强制定义换行点</li>
</ol>
<p>HTML：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;HTML5 Test Page 1&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;&lt;bdi&gt;BDI:在发布用户评论或其他您无法完全控制的内容时，该标签很有用 test&lt;/bdi&gt;&lt;/div&gt;
    &lt;hr /&gt;
    &lt;div&gt;&lt;mark&gt;Mark:定义带有记号的文本&lt;/mark&gt;&lt;/div&gt;
    &lt;hr /&gt;
    &lt;div style=&quot;width:200px;border:1px solid red;&quot;&gt;&lt;meter value=&quot;10&quot; /&gt;Meter&lt;/div&gt;
    &lt;hr /&gt;
    &lt;div&gt;&lt;progress value=&quot;10&quot; max=&quot;100&quot;&gt;&lt;/progress&gt;Progress: 用于显示进度，结合JS一同使用&lt;/div&gt;
    &lt;hr /&gt;
    &lt;div&gt;我在 &lt;time datetime=&quot;2008-02-14&quot;&gt;情人节&lt;/time&gt; 有个约会
    &lt;mark&gt;该标签不会再在任何浏览器中呈现任何特殊效果，仅仅方便搜索引擎生成更智能的结果&lt;/mark&gt;
    &lt;/div&gt;
    &lt;hr /&gt;
    &lt;div&gt;
      &lt;p&gt;如果想学习 AJAX，那么您必须熟悉 XML&lt;wbr&gt;Http&lt;wbr&gt;Request 对象。&lt;/p&gt;
      &lt;mark&gt;wbr可强制设置换行点&lt;/mark&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><ol>
<li>&lt;datalist&gt; 定义下拉列表</li>
<li>&lt;keygen&gt; 定义生成密钥</li>
<li>&lt;output&gt; 定义输出的一些类型</li>
</ol>
<p>HTML：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;HTML5 Test Page 2&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;form method=&quot;post&quot;&gt;
      &lt;p&gt;datalist:和input元素配合，用于定义input可能的值&lt;/p&gt;
      &lt;input id=&quot;lang&quot; list=&quot;dl&quot; /&gt;
      &lt;datalist id=&quot;dl&quot;&gt;
        &lt;option value=&quot;C#&quot; /&gt;
        &lt;option value=&quot;Java&quot; /&gt;
        &lt;option value=&quot;PHP&quot; /&gt;
      &lt;/datalist&gt;
      &lt;hr /&gt;
      &lt;p&gt;keygen:提交密钥串到服务器&lt;/p&gt;
      Username: &lt;input type=&quot;text&quot; name=&quot;usr_name&quot; /&gt;
      Encryption: &lt;keygen name=&quot;security&quot; /&gt;
      &lt;input type=&quot;submit&quot; /&gt;
      &lt;hr /&gt;
    &lt;/form&gt;
    &lt;p&gt;output:定义不同类型的输出&lt;/p&gt;
    &lt;form oninput=&quot;x.value=parseInt(a.value)+parseInt(b.value)&quot;&gt;
      0
      &lt;input type=&quot;range&quot; id=&quot;a&quot; value=&quot;50&quot;&gt;100
      +&lt;input type=&quot;number&quot; id=&quot;b&quot; value=&quot;50&quot;&gt;
      =&lt;output name=&quot;x&quot; for=&quot;a&quot;&gt;&lt;/output&gt;
    &lt;/form&gt; 
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><ol>
<li>&lt;canvas&gt; 定义图形</li>
<li>&lt;figcaption&gt; 定义figure元素的标题</li>
<li>&lt;figure&gt; 定义媒介内容的分组，以及它们的标题</li>
</ol>
<p>HTML：</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;HTML5 Test Page 3&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;
      &lt;p&gt;canvas:你懂的，画布，各种绚丽效果就靠它了。&lt;/p&gt;
      &lt;canvas id=&quot;c&quot;&gt;&lt;/canvas&gt;
      &lt;script&gt;
        var canvas=document.getElementById(&apos;c&apos;);
        var ctx=canvas.getContext(&apos;2d&apos;);
        ctx.fillStyle=&apos;#FF0000&apos;;
        ctx.fillRect(0,0,80,100);
      &lt;/script&gt;
    &lt;/div&gt;
    &lt;hr /&gt;
    &lt;div&gt;
      &lt;p&gt;
      figure: 规定独立的流内容（图像、图表、照片、代码等等），figure 元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响。
      &lt;br /&gt;
      figcaption:定义 figure 元素的标题，语义化&lt;/p&gt;
      &lt;figure&gt;
        &lt;figcaption&gt;黄浦江上的的卢浦大桥&lt;/figcaption&gt;
        &lt;img src=&quot;https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcSehM_6Bfd79RwCCy1wNj_K6YGEkMsdt0Gekn10Dc6xJ8nxDcS7rg&quot; width=&quot;350&quot; height=&quot;234&quot; /&gt;
      &lt;/figure&gt;
    &lt;/div&gt;   
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><h3 id="音频-视频"><a href="#音频-视频" class="headerlink" title="音频/视频"></a>音频/视频</h3><ol>
<li>&lt;audio&gt; 定义声音内容</li>
<li>&lt;source&gt; 定义媒介源</li>
<li>&lt;track&gt; 定义用在媒体播放器中的文本轨道</li>
<li>&lt;video&gt; 定义视频</li>
</ol>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ol>
<li>&lt;nav&gt; 定义导航链接</li>
</ol>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ol>
<li>&lt;command&gt; 定义命令按钮 –<strong>注：现在浏览器暂时都不支持</strong></li>
</ol>
<h3 id="样式-节-–-语义化标签"><a href="#样式-节-–-语义化标签" class="headerlink" title="样式/节 – 语义化标签"></a>样式/节 – 语义化标签</h3><ol>
<li>&lt;header&gt; 定义section或page的页眉</li>
<li>&lt;footer&gt; 定义section或page的页脚</li>
<li>&lt;section&gt; 定义section</li>
<li>&lt;article&gt; 定义文章</li>
<li>&lt;aside&gt; 定义页面内容之外的内容</li>
<li>&lt;details&gt; 定义元素细节</li>
<li>&lt;dialog&gt; 定义对话框或窗口</li>
<li>&lt;summary&gt; 为&lt;details&gt;元素定义可见的标题</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><p>&lt;embed&gt; 为外部应用程序（非HTML）定义容器</p>
<h2 id="那些新属性"><a href="#那些新属性" class="headerlink" title="那些新属性"></a>那些新属性</h2><ol>
<li>contenteditable 规定元素内容是否可编辑</li>
<li>contextmenu 规定元素的上下文菜单。上下文菜单在用户点击元素时显示</li>
<li>data-* 用于存储页面或应用程序的私有定制数据</li>
<li>draggable 规定元素是否可拖动</li>
<li>dropzone 规定在拖动被多动数据时是否进行复制、移动或链接</li>
<li>hidden 规定元素仍未或不再相关</li>
<li>spellcheck 规定是否对元素进行拼写和语法检查</li>
<li>translate 规定是否应该翻译元素内容</li>
</ol>
<p><strong>以上全局属性可用于任何HTML元素</strong></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://www.w3schools.com/tags/" target="_blank" rel="external">http://www.w3schools.com/tags/</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular1.x升级指南]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular%E7%9B%B8%E5%85%B3/Angular1.x%E5%8D%87%E7%BA%A7%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>Angular从1.2.x到1.3.x是一个大的跳跃。在1.3.x之后，也有1.4.x，1.5.x这么两个大版本。</p>
<p>Newkit从1.2.x跳跃到1.3.x经历过一次大的变化，在之后的较大版本升级中，基本上没有大多大改动。但是其中的差异点，我们也需要去了解。</p>
<p>1.3.x以前的版本，我们就不去深究了，毕竟现在不是主流，我们就从1.3.x开始，来看看Angular到底有了哪些变化。</p>
<h2 id="1、从1-3-x到1-4-x"><a href="#1、从1-3-x到1-4-x" class="headerlink" title="1、从1.3.x到1.4.x"></a>1、从1.3.x到1.4.x</h2><p>从1.3到1.4，Angular的变化涉及到很多个方面，一一列举如下。</p>
<h3 id="1-1、动画"><a href="#1-1、动画" class="headerlink" title="1.1、动画"></a>1.1、动画</h3><p>在1.4中，动画功能进行了很大的重构，但是API基本保持一致。在新的版本中，我们通过注入 <code>$animationCss</code> 来实现用JS创建CSS动画。</p>
<p><strong>1.1.1、定义CSS动画如下：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>, [<span class="string">'ngAnimate'</span>])</div><div class="line">  .animation(<span class="string">'.slide-animation'</span>, [<span class="string">'$animateCss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$animateCss</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">enter</span>: <span class="function"><span class="keyword">function</span> (<span class="params">element, doneFn</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> animation =  $animateCss(element, &#123;</div><div class="line">          <span class="attr">from</span>: &#123; <span class="attr">background</span>: <span class="string">'black'</span> &#125;,</div><div class="line">          <span class="attr">to</span>: &#123; <span class="attr">background</span>: <span class="string">'blue'</span> &#125;,</div><div class="line">          <span class="attr">duration</span>: <span class="number">10</span> <span class="comment">// one second</span></div><div class="line">        &#125;);</div><div class="line">        animation.start().done(doneFn);</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">leave</span>: <span class="function"><span class="keyword">function</span>(<span class="params">element, doneFn</span>)</span>&#123;</div><div class="line">         <span class="keyword">var</span> animation =  $animateCss(element, &#123;</div><div class="line">          <span class="attr">from</span>: &#123; <span class="attr">fontSize</span>: <span class="string">'12px'</span> &#125;,</div><div class="line">          <span class="attr">to</span>: &#123; <span class="attr">fontSize</span>: <span class="string">'25px'</span> &#125;,</div><div class="line">          <span class="attr">duration</span>: <span class="number">10</span> <span class="comment">// one second</span></div><div class="line">        &#125;);</div><div class="line">        animation.start().done(doneFn);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;]);</div></pre></td></tr></table></figure>
<p>如何使用？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test slide-animation"</span> <span class="attr">ng-if</span>=<span class="string">"vm.ck1"</span>&gt;</span> AAAAAAAAAAA<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>只需要在元素上设置一个class，然后当元素从隐藏到显示，则会执行 <code>enter</code> 动画，从显示到隐藏，则会执行 <code>leave</code> 动画。</p>
<p><strong>1.1.2、监听动画事件</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// &lt; 1.4</span></div><div class="line">element.on(<span class="string">'$animate:before'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (data.event === <span class="string">'enter'</span>) &#123; ... &#125;</div><div class="line">&#125;);</div><div class="line">element.off(<span class="string">'$animate:before'</span>, fn);</div><div class="line"></div><div class="line"><span class="comment">// 1.4+</span></div><div class="line">$animate.on(<span class="string">'enter'</span>, element, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;);</div><div class="line">$animate.off(<span class="string">'enter'</span>, element, fn);</div></pre></td></tr></table></figure>
<p>在1.4版本之前，我们需要通过在element上去监听动画开始和结束，另外还必须要通过 <code>data.event</code> 来判断动画类型。</p>
<p>在1.4及以后，我们可以直接通过 <code>$animate</code> 来监控了。</p>
<p><strong>1.1.3、触发动画</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $el = $(<span class="string">'.slide-animation'</span>);</div><div class="line">$animate.enter($el, $el.parent()).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'enter'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们需要使用如上的方式，来手动启动动画，此时会触发元素的对应动画事件。</p>
<p><strong>注意：触发动画的回调中，如果要操作$scope,在&lt;1.4中会失败，需要借助$apply，但在1.4+，就不需要了。示例如下：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$animate.enter(element, elementParent).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $scope.$apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $scope.explode = <span class="literal">true</span>;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 1.4+</span></div><div class="line">$animate.enter(element, elementParent).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $scope.explode = <span class="literal">true</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>1.1.4、启用/禁用动画</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// &lt; 1.4</span></div><div class="line">$animate.enabled(<span class="literal">false</span>, element);</div><div class="line"></div><div class="line"><span class="comment">// 1.4+</span></div><div class="line">$animate.enabled(element, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>实现该操作的方法参数1.4+刚好和小于1.4相反。</p>
<h3 id="1-2、表单"><a href="#1-2、表单" class="headerlink" title="1.2、表单"></a>1.2、表单</h3><p><strong>1.2.1、ngMessages</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!-- AngularJS <span class="number">1.3</span>.x --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-messages</span>=<span class="string">"model.$error"</span> <span class="attr">ng-messages-include</span>=<span class="string">"remote.html"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-message</span>=<span class="string">"required"</span>&gt;</span>Your message is required<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">&lt;!-- AngularJS <span class="number">1.4</span>.x --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-messages</span>=<span class="string">"model.$error"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-message</span>=<span class="string">"required"</span>&gt;</span>Your message is required<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-messages-include</span>=<span class="string">"remote.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在1.3版本中，<code>ng-messages-include</code> 跟随在 <code>ng-messages</code> 元素上，这样并不灵活。</p>
<p>在1.4+中，<code>ng-messages-include</code> 不允许更随在 <code>ng-messages</code> 元素上，必须放在内部，这样使得使用远程模板非常灵活。</p>
<p>另外，当存在多个form时，我们在使用ng-messages获取指定form的方法也有变化，如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// &lt; 1.4</div><div class="line">&lt;div ng-messages="ctrl.form['field_&#123;&#123;$index&#125;&#125;'].$error"&gt;...&lt;/div&gt;</div><div class="line"></div><div class="line">// 1.4 + </div><div class="line">&lt;div ng-messages="ctrl.getMessages($index)"&gt;...&lt;/div&gt;</div><div class="line">ctrl.getMessages = function($index) &#123;</div><div class="line">  return ctrl.form['field_' + $index].$error;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>1.2.2、ngOptions</strong></p>
<p>ngOptions仅仅只是内部实现变化，在使用上并没有多大差异。其中当遍历Object时，之前的版本是用的 <code>for in</code>，导致输出的key是字符序的。新版本采用 <code>Object.keys</code>，输出的key是定义时候的顺序。</p>
<p>另外当ngOptions表达式执行之后，将不会再触发ngOptions了。</p>
<p><strong>1.2.3、select</strong></p>
<p>在 <strong>select</strong> 元素中，这是一个非常大的变更。简单理解，如下：在1.3中，ngModel和&lt;option&gt;的value比较仅仅是 <code>==</code>，所以 <code>200 == &#39;200&#39; //true</code>。在1.4+中，比较方式成了 <code>===</code>,所以 <code>200 === &#39;200&#39; //false</code>。</p>
<p>这个时候我们可以通过如下方式处理：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ngModelCtrl.$parsers.push(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(value, <span class="number">10</span>); <span class="comment">// Convert option value to number</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">ngModelCtrl.$formatters.push(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> value.toString(); <span class="comment">// Convert scope value to string</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>实现指令如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">app.directive(<span class="string">'convertNumber'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">require</span>: <span class="string">'ngModel'</span>,</div><div class="line">    <span class="attr">link</span>: <span class="function"><span class="keyword">function</span>(<span class="params">scope, el, attr, ctrl</span>) </span>&#123;</div><div class="line">      ctrl.$parsers.push(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>(value, <span class="number">10</span>);</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      ctrl.$formatters.push(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> value.toString();</div><div class="line">      &#125;);      </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当然，如果我们保证ngModel的值为string类型，那就没啥问题了（在不使用ng-value的情况下）。</p>
<p><strong>1.2.4、Form</strong></p>
<p>表单的变化，主要是name属性，在 &lt; 1.4 的版本中，我们可以设置name为 “my:form1”，在1.4+版本中，不在允许这种特殊的用法。</p>
<h3 id="1-3、模板相关"><a href="#1-3、模板相关" class="headerlink" title="1.3、模板相关"></a>1.3、模板相关</h3><p><strong>1.3.1、ngRepeat</strong></p>
<p>&lt; 1.4 版本中，ng-repeat的遍历顺序是字母序。</p>
<p>1.4+版本中，顺序是有浏览器的 <code>for in</code> 来返回的。</p>
<p><strong>1.3.2、ngInclude</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// &lt; 1.4</span></div><div class="line"></div><div class="line">&lt;div ng-include=<span class="string">"findTemplate('https://example.com/templates/myTemplate.html')"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">$scope.findTemplate = <span class="function"><span class="keyword">function</span>(<span class="params">templateName</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> $sce.trustAsResourceUrl(templateName);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 1.4+</span></div><div class="line"><span class="keyword">var</span> templateCache = &#123;&#125;;</div><div class="line">$scope.findTemplate = <span class="function"><span class="keyword">function</span>(<span class="params">templateName</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!templateCache[templateName]) &#123;</div><div class="line">    templateCache[templateName] = $sce.trustAsResourceUrl(templateName);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> templateCache[templateName];</div><div class="line">&#125;;</div><div class="line"><span class="comment">// Or</span></div><div class="line">angular.module(<span class="string">'myApp'</span>, []).config(<span class="function"><span class="keyword">function</span>(<span class="params">$sceDelegateProvider</span>) </span>&#123;</div><div class="line">  $sceDelegateProvider.resourceUrlWhitelist([<span class="string">'self'</span>, <span class="string">'https://example.com/templates/**'</span>])</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="1-4、Cookie"><a href="#1-4、Cookie" class="headerlink" title="1.4、Cookie"></a>1.4、Cookie</h3><p>在1.4+中，cookie增加了新的API：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">get</div><div class="line">put</div><div class="line">getObject</div><div class="line">putObject</div><div class="line">getAll</div><div class="line">remove</div></pre></td></tr></table></figure>
<p>另外，<code>$cookieStore</code> 将不推荐使用。</p>
<h3 id="1-5、HTTP"><a href="#1-5、HTTP" class="headerlink" title="1.5、HTTP"></a>1.5、HTTP</h3><p>在1.4+中，$http的 <code>transformRequest</code> 将不允许修改请求header。但是我们可以使用如下方式进行动态的header设置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$http.get(url, &#123;</div><div class="line">  <span class="attr">headers</span>: &#123;</div><div class="line">    <span class="string">'X-MY_HEADER'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'abcd'</span>; <span class="comment">//you've got access to a request config object to specify header value dynamically</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="1-6、Filter"><a href="#1-6、Filter" class="headerlink" title="1.6、Filter"></a>1.6、Filter</h3><p><code>fliter</code>如果作用在非数组上，将会抛出一个异常，之前则是返回一个空数组。</p>
<p><code>limitTo</code>作用在不合法的value上，现在将会原样返回，之前是返回空对象，空数组。</p>
<h2 id="2、从1-4-x到1-5-x"><a href="#2、从1-4-x到1-5-x" class="headerlink" title="2、从1.4.x到1.5.x"></a>2、从1.4.x到1.5.x</h2><p>从 1.4.x 到 1.5.x 是一个为升级ng2做准备的变更版本。</p>
<p>该版本主要是增加了一些功能，所以从1.4.x升级到1.5.x基本不需要太大的改动。</p>
<p>在 1.5.x 版本中，增加了一些接近ng2的新特性，如：</p>
<ol>
<li>angular.component() //一种偏向于angular2风格的组件（特殊的指令）</li>
<li>$onInit //生命周期钩子</li>
<li>ngAnimateSwap // ngAnimate中一个新的指令</li>
</ol>
<p>接着，我们来看下它的一些具体变更。</p>
<h3 id="2-1、Core"><a href="#2-1、Core" class="headerlink" title="2.1、Core"></a>2.1、Core</h3><p><strong>2.1.1、$parse</strong></p>
<p><code>$parse</code> 增加新特性，可以使用locals来覆盖原本的context。用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> context = &#123; <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">'Jay'</span> &#125; &#125;;</div><div class="line"><span class="keyword">var</span> locals = &#123; <span class="attr">user</span>: &#123; <span class="attr">name1</span>: <span class="string">'Local Jay'</span> &#125; &#125;;</div><div class="line"><span class="keyword">var</span> getter = <span class="keyword">this</span>.$parse(<span class="string">'user.name'</span>);</div><div class="line"><span class="built_in">console</span>.log(getter(context)); <span class="comment">// 'Jay'</span></div><div class="line"><span class="built_in">console</span>.log(getter(context, locals)); <span class="comment">// 'Local Jay'</span></div></pre></td></tr></table></figure>
<p><strong>2.1.2、ngOptions</strong></p>
<p>如果元素上有 <code>ngOptions</code> 指令，那么 <code>ngModel</code> 指令也必须存在，否则就会抛出错误。</p>
<p>另外 <code>ngOptions</code> 接受假值（’’, 0, false, null）</p>
<p><strong>2.1.3、orderBy</strong></p>
<p>对 <code>undefined</code> 或者 <code>null</code> 进行 <code>orderBy</code> 将会抛出错误。</p>
<h3 id="2-2、ngAria"><a href="#2-2、ngAria" class="headerlink" title="2.2、ngAria"></a>2.2、ngAria</h3><p>取消了部分元素的可访问性设置。</p>
<h3 id="2-3-ngMessages"><a href="#2-3-ngMessages" class="headerlink" title="2.3 ngMessages"></a>2.3 ngMessages</h3><p>将 <code>ngMessages</code> 指令的优先级设置为1，如果有优先级低于1的指令有transclude功能，那么需要设置为更高的优先级。</p>
<h3 id="2-4、ngResource"><a href="#2-4、ngResource" class="headerlink" title="2.4、ngResource"></a>2.4、ngResource</h3><p><code>$resource</code> 增加了 <code>$cancelRequest()</code> 方法。</p>
<h3 id="2-5、ngRoute"><a href="#2-5、ngRoute" class="headerlink" title="2.5、ngRoute"></a>2.5、ngRoute</h3><p>增加了 <code>$resolveAs</code> 配置属性，允许对 <code>$resolve</code> 指定别名。</p>
<h3 id="2-6、ngTouch"><a href="#2-6、ngTouch" class="headerlink" title="2.6、ngTouch"></a>2.6、ngTouch</h3><p>默认禁用了 <code>ngClickOverrideEnabled</code>，在触摸屏上，可能还有300ms的延迟。</p>
<p>如果要启用，那么可以使用如下方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'myApp'</span>).config(<span class="function"><span class="keyword">function</span>(<span class="params">$touchProvider</span>) </span>&#123;</div><div class="line">  $touchProvider.ngClickOverrideEnabled(<span class="literal">true</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>另外，建议使用FastClick来实现该功能。</p>
<p>需要注意，某些现代浏览器在某些场景下已经删除了300ms延迟：</p>
<p>Chrome 和 Firefox for Android 发现设置了 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code> 将会删除300ms延迟。</p>
<p>IE当设置 <code>touch-action</code> 为 <code>none</code> 或者 <code>manipulation</code> 移除延迟。</p>
<p><strong>注意：这些变化并不影响ngSwipe指令</strong>。</p>
<h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p>Angular1.x基本已经进入维护期了，很少会有新特性加入了。现在的重心在angular2，所以我们也可以优先对angular2做一些技术储备。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular从0到1：function（下）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular%E7%9B%B8%E5%85%B3/Angular%E4%BB%8E0%E5%88%B01%EF%BC%9Afunction%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><h2 id="2、function（下）"><a href="#2、function（下）" class="headerlink" title="2、function（下）"></a>2、function（下）</h2><h3 id="2-13、angular-isArray-★★"><a href="#2-13、angular-isArray-★★" class="headerlink" title="2.13、angular.isArray(★★)"></a>2.13、angular.isArray(★★)</h3><p><code>angular.isArray</code>用于判断对象是不是数组，等价于<code>Array.isArray</code></p>
<pre><code>console.log(angular.isArray([])); // true
console.log(angular.isArray({0: &apos;1&apos;, 1: &apos;2&apos;, length: 2})); // false
</code></pre><h3 id="2-14、angular-isDate-★★"><a href="#2-14、angular-isDate-★★" class="headerlink" title="2.14、angular.isDate(★★)"></a>2.14、angular.isDate(★★)</h3><p>通过判断toString.call(value)是不是等于’[object Date]’ 来判断对象是个是一个Date对象.</p>
<pre><code>console.log(angular.isDate(new Date())); // true
console.log(angular.isDate(223)); // false
</code></pre><h3 id="2-15、angular-isDefined-★★"><a href="#2-15、angular-isDefined-★★" class="headerlink" title="2.15、angular.isDefined(★★)"></a>2.15、angular.isDefined(★★)</h3><p>判断对象或者属性是否定义</p>
<pre><code>var obj = {a: 1, b: null, c: undefined};
console.log(angular.isDefined(obj.a)); // true
console.log(angular.isDefined(obj.b)); // true
console.log(angular.isDefined(obj.c)); // false
console.log(angular.isDefined(obj.d)); // false
</code></pre><h3 id="2-16、angular-isElement-★★"><a href="#2-16、angular-isElement-★★" class="headerlink" title="2.16、angular.isElement(★★)"></a>2.16、angular.isElement(★★)</h3><p>此方法判断元素是不是一个元素（包含dom元素，或者jquery元素）</p>
<pre><code>console.log(angular.isElement(document.getElementsByTagName(&apos;body&apos;)[0])); // true
console.log(angular.isElement($(&apos;body&apos;))); // true
</code></pre><h3 id="2-17、angular-isFunction-★★"><a href="#2-17、angular-isFunction-★★" class="headerlink" title="2.17、angular.isFunction(★★)"></a>2.17、angular.isFunction(★★)</h3><p>此方法判断对象是不是一个function ，等价于 typeof fn === ‘function’</p>
<pre><code>console.log(angular.isFunction(new Function(&apos;a&apos;, &apos;return a&apos;))); // true
console.log(angular.isFunction(function(){})); // true
console.log(angular.isFunction({})); // false
</code></pre><h3 id="2-18、angular-isNumber-★★"><a href="#2-18、angular-isNumber-★★" class="headerlink" title="2.18、angular.isNumber(★★)"></a>2.18、angular.isNumber(★★)</h3><p>判断数字是否为number</p>
<pre><code>function isNumber(value) {
  return typeof value === &apos;number&apos;;
}
</code></pre><h3 id="2-19、angular-isObject-★★"><a href="#2-19、angular-isObject-★★" class="headerlink" title="2.19、angular.isObject(★★)"></a>2.19、angular.isObject(★★)</h3><pre><code>function isObject(value) {
  return value !== null &amp;&amp; typeof value === &apos;object&apos;;
}
</code></pre><h3 id="2-20、angular-isString-★★"><a href="#2-20、angular-isString-★★" class="headerlink" title="2.20、angular.isString(★★)"></a>2.20、angular.isString(★★)</h3><pre><code>function isString(value) {
    return typeof value === &apos;string&apos;;
}
</code></pre><h3 id="2-21、angular-isUndefined-★★"><a href="#2-21、angular-isUndefined-★★" class="headerlink" title="2.21、angular.isUndefined(★★)"></a>2.21、angular.isUndefined(★★)</h3><pre><code>function isUndefined(value) {
    return typeof value === &apos;undefined&apos;;
}
</code></pre><h3 id="2-22、angular-lowercase-★★"><a href="#2-22、angular-lowercase-★★" class="headerlink" title="2.22、angular.lowercase(★★)"></a>2.22、angular.lowercase(★★)</h3><p>转换字符串为小写模式，如果参数不是字符串，那么原样返回</p>
<pre><code>var lowercase = function(string) {
  return isString(string) ? string.toLowerCase() : string;
};

console.log(angular.lowercase(1)); // 1
console.log(angular.lowercase(&apos;ABCdef&apos;)); // &apos;abcdef&apos;
</code></pre><h3 id="2-23、angular-uppercase-★★"><a href="#2-23、angular-uppercase-★★" class="headerlink" title="2.23、angular.uppercase(★★)"></a>2.23、angular.uppercase(★★)</h3><p>转换字符串为大写模式，如果参数不是字符串，那么原样返回</p>
<pre><code>var uppercase = function(string) {
  return isString(string) ? string.toUpperCase() : string;
};

console.log(angular.uppercase(1)); // 1
console.log(angular.uppercase(&apos;ABCdef&apos;)); // &apos;ABCDEF&apos;
</code></pre><h3 id="2-24、angular-merge-★★"><a href="#2-24、angular-merge-★★" class="headerlink" title="2.24、angular.merge(★★)"></a>2.24、angular.merge(★★)</h3><p>将多个对象进行深度复制，与extend()不同，merge将会递归进行深度拷贝。该拷贝是完全深拷贝，就连对象引用也不一样。</p>
<pre><code>var o = {};
var obj1 = {a1: 1, a2: 2, a3: [1]};
var obj2 = {b1: [2], b2: /abc/};
var obj3 = [o];
var obj4 = {d: o};
var result = angular.merge({}, obj1, obj2, obj3);
console.log(result);
console.log(result[0] === o); // false
console.log(result.d === o); // false
</code></pre><h3 id="2-25、angular-noop-★★"><a href="#2-25、angular-noop-★★" class="headerlink" title="2.25、angular.noop(★★)"></a>2.25、angular.noop(★★)</h3><p>一个空函数，调试时非常有用。可以避免callback未定义引发的error。</p>
<pre><code>function foo(callback) {
  var result = calculateResult();
  (callback || angular.noop)(result);
}
</code></pre><h3 id="2-26、angular-reloadWithDebugInfo-★★"><a href="#2-26、angular-reloadWithDebugInfo-★★" class="headerlink" title="2.26、angular.reloadWithDebugInfo(★★)"></a>2.26、angular.reloadWithDebugInfo(★★)</h3><p>启用DebugInfo，该设置优先级高于<code>$compileProvider.debugInfoEnabled(false)</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Ajax]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/jQuery%E6%8B%86%E8%A7%A3/Ajax/</url>
      <content type="html"><![CDATA[<h2 id="0、Ajax"><a href="#0、Ajax" class="headerlink" title="0、Ajax"></a>0、Ajax</h2><p><code>jQuery Ajax</code> 在 <code>jQuery</code> 中是一个非常重要的部分。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[02_Angular2组件生命周期]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular2%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/02_Angular2%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<h2 id="0、Angular2-组件"><a href="#0、Angular2-组件" class="headerlink" title="0、Angular2 组件"></a>0、Angular2 组件</h2><p>Angular1并不是围绕组件的概念来实现的。所以，我们需要controller、$scope，同时也需要封装自定义指令。</p>
<p>在Angular2中，把之前的这些东西都丢弃了，使用了一种更面向对象的组件模型。</p>
<p>一个组件控制着我们称之为View的显示部分。组件同时也是自描述的。</p>
<p><strong>在Angular2中，指令也是存在的，组件只是指令的一种。</strong></p>
<h2 id="1、定义一个组件"><a href="#1、定义一个组件" class="headerlink" title="1、定义一个组件"></a>1、定义一个组件</h2><p>最基本的组件只需要提供一个selector和template就足够了。代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'angular2/core'</span>;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">  <span class="attr">selector</span>: <span class="string">'basic-info'</span>,</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;h1&gt;Basic Info&lt;/h1&gt;'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AboutComponent</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">要实现输入和输出呢？</div><div class="line"></div><div class="line">`<span class="string">``</span>javascript</div><div class="line"><span class="keyword">import</span> &#123;Component, Input, Output, EventEmitter&#125; <span class="keyword">from</span> <span class="string">'angular2/core'</span>;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">  <span class="attr">selector</span>: <span class="string">'basic-info'</span>,</div><div class="line">  <span class="attr">template</span>: <span class="string">`</span></div><div class="line">  &lt;h1&gt;Basic Info, &#123;&#123;abc&#125;&#125;&lt;/h1&gt;</div><div class="line">  &lt;input type="text" [(ngModel)]="abc"&gt;</div><div class="line">  `</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicInfo</span></span>&#123;</div><div class="line">  @Input(<span class="string">'test'</span>) set value(val)&#123;</div><div class="line">    <span class="keyword">this</span>.abc = val;</div><div class="line">    <span class="keyword">this</span>.callback.next([val]);</div><div class="line">  &#125;</div><div class="line">  @Output(<span class="string">'callback'</span>) callback = <span class="keyword">new</span> EventEmitter();</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.abc = <span class="string">'aaaa'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如何使用？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)] = <span class="string">"value"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">basic-info</span> [<span class="attr">test</span>]=<span class="string">"value"</span> (<span class="attr">callback</span>)=<span class="string">"innerCallback($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">basic-info</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="2、组件生命周期"><a href="#2、组件生命周期" class="headerlink" title="2、组件生命周期"></a>2、组件生命周期</h2><p>Angular2会管理组件的整个生命周期，包括组件的创建、渲染、子组件的创建和渲染、数据绑定属性变化时的校验、从DOM移除之前的销毁等等。</p>
<p>那如果我们想在某个状态时，进行一些操作应该怎么办呢？Angular2提供了组件生命周期的钩子，供我们在这些时间点添加自定义的操作。</p>
<p>在<code>angular2/core</code>中提供了多个Lifecycle Hook接口，我们可以实现一个或多个接口，来设置自定义操作。每一个接口，都会有一个钩子方法，钩子方法的名称是接口的名称加上前缀ng。如OnInit的钩子方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component, Input, Output, EventEmitter&#125; <span class="keyword">from</span> <span class="string">'angular2/core'</span>;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">  <span class="attr">selector</span>: <span class="string">'basic-info'</span>,</div><div class="line">  <span class="attr">template</span>: <span class="string">`</span></div><div class="line">  &lt;h1&gt;Basic Info, &#123;&#123;abc&#125;&#125;&lt;/h1&gt;</div><div class="line">  &lt;input type="text" [(ngModel)]="abc"&gt;</div><div class="line">  `</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicInfo</span></span>&#123;</div><div class="line">  @Input(<span class="string">'test'</span>) set value(val)&#123;</div><div class="line">    <span class="keyword">this</span>.abc = val;</div><div class="line">    <span class="keyword">this</span>.callback.next([val]);</div><div class="line">  &#125;</div><div class="line">  @Output(<span class="string">'callback'</span>) callback = <span class="keyword">new</span> EventEmitter();</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.abc = <span class="string">'aaaa'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 组件Init时创建</span></div><div class="line">  ngOnInit()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'basic info init.'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>生命周期钩子（组件和指令都有的）</strong></p>
<ol>
<li>ngOnInit //组件初始化，在Angular初始化数据绑定输入属性之后</li>
<li>ngOnChanges // </li>
<li>ngDoCheck</li>
<li>ngOnDestroy</li>
</ol>
<p><strong>生命周期钩子（组件特有的）</strong></p>
<ol>
<li>ngAfterContentInit // Angular将外部内容放入视图后</li>
<li>ngAfterContentChecked // 在Angular检测放到视图内的外部内容的绑定后</li>
<li>ngAfterViewInit // Angular创建视图之后</li>
<li>ngAfterViewChecked //Angular检测了组件视图的绑定之后</li>
</ol>
<p><strong>执行顺序</strong></p>
<ol>
<li>ngOnChanges //绑定属性变化时</li>
<li>ngOnInit //在第一次ngOnChanges之后，初始化时</li>
<li>ngDoCheck //每次Angular变化检测时</li>
<li>ngAfterContentInit //组件内容初始化之后</li>
<li>ngAfterContentChecked //组件内容变化后</li>
<li>ngAfterViewInit //初始化组件视图和子视图之后</li>
<li>ngAfterViewChecked //在数组视图和子视图检查之后</li>
<li>ngOnDestroy</li>
</ol>
<p>我们将组件设定上钩子函数如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component, Input, Output, EventEmitter&#125; <span class="keyword">from</span> <span class="string">'angular2/core'</span>;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">  <span class="attr">selector</span>: <span class="string">'basic-info'</span>,</div><div class="line">  <span class="attr">template</span>: <span class="string">`</span></div><div class="line">  &lt;h1&gt;Basic Info, &#123;&#123;abc&#125;&#125;&lt;/h1&gt;</div><div class="line">  &lt;input type="text" [(ngModel)]="abc"&gt;</div><div class="line">  `</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicInfo</span></span>&#123;</div><div class="line">  @Input(<span class="string">'test'</span>) set value(val)&#123;</div><div class="line">    <span class="keyword">this</span>.abc = val;</div><div class="line">    <span class="keyword">this</span>.callback.next([val]);</div><div class="line">  &#125;</div><div class="line">  @Output(<span class="string">'callback'</span>) callback = <span class="keyword">new</span> EventEmitter();</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.abc = <span class="string">'aaaa'</span>;</div><div class="line">  &#125;</div><div class="line">  ngOnInit()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'basic info init.'</span>);</div><div class="line">  &#125;</div><div class="line">  ngDoCheck()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'basic info do check.'</span>);</div><div class="line">  &#125;</div><div class="line">  ngOnChanges()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'basic info changes.'</span>);</div><div class="line">  &#125;</div><div class="line">  ngOnDestroy()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'basic info destroy'</span>);</div><div class="line">  &#125;</div><div class="line">  ngAfterContentInit()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'basic info after content init'</span>);</div><div class="line">  &#125;</div><div class="line">  ngAfterContentChecked()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'basic info after content checked'</span>);</div><div class="line">  &#125;</div><div class="line">  ngAfterViewInit()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'basic info after view init'</span>);</div><div class="line">  &#125;</div><div class="line">  ngAfterViewChecked()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'basic info after view checked'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制台打印的结果是：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">basic info changes.</div><div class="line">test.component.js:23 basic info init.</div><div class="line">test.component.js:26 basic info do check.</div><div class="line">test.component.js:35 basic info after content init</div><div class="line">test.component.js:38 basic info after content checked</div><div class="line">test.component.js:41 basic info after view init</div><div class="line">test.component.js:44 basic info after view checked</div><div class="line">test.component.js:26 basic info do check.</div><div class="line">test.component.js:38 basic info after content checked</div><div class="line">test.component.js:44 basic info after view checked</div><div class="line">test.component.js:26 basic info do check.</div><div class="line">test.component.js:38 basic info after content checked</div><div class="line">test.component.js:44 basic info after view checked</div><div class="line">test.component.js:26 basic info do check.</div><div class="line">test.component.js:38 basic info after content checked</div><div class="line">test.component.js:44 basic info after view checked</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[详解angular之$q]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular%E7%9B%B8%E5%85%B3/%E8%AF%A6%E8%A7%A3angular%E4%B9%8B$q/</url>
      <content type="html"><![CDATA[<h2 id="0、什么的Promise"><a href="#0、什么的Promise" class="headerlink" title="0、什么的Promise"></a>0、什么的Promise</h2><p>Promise（承诺）是用于改善异步编程体验的一种编程模型，它提供了一些列的API的方法论，让你能更优雅的解决异步编程中出现的一些问题。</p>
<h2 id="1、Promise的核心竞争力"><a href="#1、Promise的核心竞争力" class="headerlink" title="1、Promise的核心竞争力"></a>1、Promise的核心竞争力</h2><p>在处理有依赖性的回调的时候，我们的代码是这样写的：</p>
<pre><code>step1(function (value1) {
    step2(value1, function(value2) {
        step3(value2, function(value3) {
            step4(value3, function(value4) {
                // Do something with value4
            });
        });
    });
});
</code></pre><p>这就是我们所谓的回调地狱。</p>
<p>如果用Promise的方式来实现，是怎么样呢？</p>
<pre><code>step1().then(step2).then(step3).then(step4)
</code></pre><p>代码更简单逻辑也清晰，异步的回调嵌套变成了同步写法，孰优孰劣相信大家都一目了然。</p>
<h2 id="2、Angular服务-q"><a href="#2、Angular服务-q" class="headerlink" title="2、Angular服务$q"></a>2、Angular服务$q</h2><p>在angular中，基于nodejs中流行的Q提供了一个简化版本的Q,对外的话提供一个service $q。</p>
<p>以下列举出angular中的$q提供的API</p>
<h4 id="1、Promise-then-将回调变成链式调用，then可以接两个参数，successCallback-errorCallback-示例如下："><a href="#1、Promise-then-将回调变成链式调用，then可以接两个参数，successCallback-errorCallback-示例如下：" class="headerlink" title="1、Promise.then() 将回调变成链式调用，then可以接两个参数，successCallback, errorCallback,示例如下："></a>1、Promise.then() 将回调变成链式调用，then可以接两个参数，successCallback, errorCallback,示例如下：</h4><pre><code>var deferred = $q.defer();
var promise = deferred.promise;
promise.then(successCallback, errorCallback);
</code></pre><h4 id="2、Promise-catch-捕获Promise异常，Promise-catch-errorCallback-等价于Promise-then-null-errorCallback"><a href="#2、Promise-catch-捕获Promise异常，Promise-catch-errorCallback-等价于Promise-then-null-errorCallback" class="headerlink" title="2、Promise.catch 捕获Promise异常，Promise.catch(errorCallback)等价于Promise.then(null, errorCallback)"></a>2、Promise.catch 捕获Promise异常，Promise.catch(errorCallback)等价于Promise.then(null, errorCallback)</h4><h4 id="3、Promise-finally-callback-notifyCallback-promise结束后要做的事情和接收通知信息"><a href="#3、Promise-finally-callback-notifyCallback-promise结束后要做的事情和接收通知信息" class="headerlink" title="3、Promise.finally(callback, notifyCallback) promise结束后要做的事情和接收通知信息"></a>3、Promise.finally(callback, notifyCallback) promise结束后要做的事情和接收通知信息</h4><h4 id="4、Deferred-resolve-val-通知promise请求处理完毕，并将处理结果传给回调函数（successCallback），示例如下："><a href="#4、Deferred-resolve-val-通知promise请求处理完毕，并将处理结果传给回调函数（successCallback），示例如下：" class="headerlink" title="4、Deferred.resolve(val) 通知promise请求处理完毕，并将处理结果传给回调函数（successCallback），示例如下："></a>4、Deferred.resolve(val) 通知promise请求处理完毕，并将处理结果传给回调函数（successCallback），示例如下：</h4><pre><code>var deferred = $q.defer();
setTimeout(function(){
    deferred.resolve(&apos;abc&apos;); //会将abc传递给successCallback
}, 1000);
var promise = deferred.promise;
promise.then(successCallback, errorCallback);
</code></pre><h4 id="5、Deferred-reject-msg-通知promise请求出现异常，将异常信息传给回调函数（errorCallback），示例如下："><a href="#5、Deferred-reject-msg-通知promise请求出现异常，将异常信息传给回调函数（errorCallback），示例如下：" class="headerlink" title="5、Deferred.reject(msg) 通知promise请求出现异常，将异常信息传给回调函数（errorCallback），示例如下："></a>5、Deferred.reject(msg) 通知promise请求出现异常，将异常信息传给回调函数（errorCallback），示例如下：</h4><pre><code>var deferred = $q.defer();
setTimeout(function(){
    deferred.reject(&apos;abc&apos;); //会将abc传递给errorCallback
}, 1000);
var promise = deferred.promise;
promise.then(successCallback, errorCallback);
</code></pre><h4 id="6、Deferred-notify-value-内部执行有变化时，对外发起通知。将会在Promise-finally中捕获到"><a href="#6、Deferred-notify-value-内部执行有变化时，对外发起通知。将会在Promise-finally中捕获到" class="headerlink" title="6、Deferred.notify(value) 内部执行有变化时，对外发起通知。将会在Promise.finally中捕获到"></a>6、Deferred.notify(value) 内部执行有变化时，对外发起通知。将会在Promise.finally中捕获到</h4><pre><code>var deferred = $q.defer();
setTimeout(function(){
    deferred.reject(&apos;abc&apos;); //会将abc传递给errorCallback
}, 1000);
var promise = deferred.promise;
promise.then(successCallback, errorCallback);
</code></pre><h4 id="7、-q-when-val-fn-将任意对象-函数包装成promise，返回包装好的promise。"><a href="#7、-q-when-val-fn-将任意对象-函数包装成promise，返回包装好的promise。" class="headerlink" title="7、$q.when(val/fn) 将任意对象/函数包装成promise，返回包装好的promise。"></a>7、$q.when(val/fn) 将任意对象/函数包装成promise，返回包装好的promise。</h4><h4 id="8、-q-all-promises-then-当所有的promise都成功解析后，流程才继续往下走。示例如下"><a href="#8、-q-all-promises-then-当所有的promise都成功解析后，流程才继续往下走。示例如下" class="headerlink" title="8、$q.all(promises).then() 当所有的promise都成功解析后，流程才继续往下走。示例如下:"></a>8、$q.all(promises).then() 当所有的promise都成功解析后，流程才继续往下走。示例如下:</h4><pre><code>$q.all($http.get(&apos;xxx&apos;), $http.post(&apos;xxx&apos;,{}))
.then(successCallback, errorCallback);
</code></pre><h2 id="3、-q的使用"><a href="#3、-q的使用" class="headerlink" title="3、$q的使用"></a>3、$q的使用</h2><p>常规使用</p>
<pre><code>//定义开关变量
var canSuccess = false;
//定义一个Promise
var buildPromise = ()=&gt;{
  var deferred = $q.defer();
  setTimeout(()=&gt;{
    if(canSuccess){
      deferred.resolve(&apos;promise执行成功！&apos;)
    }else{
      deferred.reject(&apos;promise执行失败！&apos;)
    }
  },5000);
  return deferred.promise;
};

//使用它
var promise = buildPromise();
promise.then(()=&gt;{
  console.log(&apos;执行成功啦！&apos;);
}, ()=&gt;{
  console.log(&apos;执行失败了！&apos;);
})
</code></pre><p>使用$q.all</p>
<pre><code>var p1 = $http.get(&apos;xxxx&apos;);
var p2 = $http.get(&apos;xxxx2&apos;);
$q.all(p1, p2).then(() =&gt;{
  console.log(&apos;两次请求都成功了！&apos;);
});
</code></pre><h2 id="4、-q源码分解"><a href="#4、-q源码分解" class="headerlink" title="4、$q源码分解"></a>4、$q源码分解</h2><pre><code>//Deferred定义
function Deferred() {
  this.promise = new Promise();
  //Necessary to support unbound execution :/
  this.resolve = simpleBind(this, this.resolve);
  this.reject = simpleBind(this, this.reject);
  this.notify = simpleBind(this, this.notify);
}

//函数柯里化
function simpleBind(context, fn) {
  return function(value) {
    fn.call(context, value);
  };
}
</code></pre><p>通过这种方式，就能将resolve，reject和promise关联起来了。既然我们最终要返回promise，那我们来看已看Promise的实现：</p>
<pre><code>function Promise() {
  this.$$state = { status: 0 };
}

extend(Promise.prototype, {
  then: function(onFulfilled, onRejected, progressBack) {
    if (isUndefined(onFulfilled) &amp;&amp; isUndefined(onRejected) &amp;&amp; isUndefined(progressBack)) {
      return this;
    }
    var result = new Deferred();

    this.$$state.pending = this.$$state.pending || [];
    this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
    if (this.$$state.status &gt; 0) scheduleProcessQueue(this.$$state);

    return result.promise;
  },

  &quot;catch&quot;: function(callback) {
    return this.then(null, callback);
  },

  &quot;finally&quot;: function(callback, progressBack) {
    return this.then(function(value) {
      return handleCallback(value, true, callback);
    }, function(error) {
      return handleCallback(error, false, callback);
    }, progressBack);
  }
});
</code></pre><p>从这里很明显可以看出，catch就是一个语法糖，调用的还是then。finally也是一个语法糖，就是不关成功，还是失败，都会调用callback。那这个时候，我们主要关注的方法就放到then这个方法的实现上。</p>
<p>为了实现链式调用，在then方法内部，又实例化了Deferred对象，并返回Defferrd.promise。</p>
<p>接下来就来看处理过程：</p>
<pre><code>this.$$state.pending = this.$$state.pending || [];
this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
if (this.$$state.status &gt; 0) scheduleProcessQueue(this.$$state);

extend(Deferred.prototype, {
  resolve: function(val) {
    if (this.promise.$$state.status) return;
    if (val === this.promise) {
      this.$$reject($qMinErr(
        &apos;qcycle&apos;,
        &quot;Expected promise to be resolved with value other than itself &apos;{0}&apos;&quot;,
        val));
    } else {
      this.$$resolve(val);
    }

  },

  $$resolve: function(val) {
    var then, fns;

    fns = callOnce(this, this.$$resolve, this.$$reject);
    try {
      if ((isObject(val) || isFunction(val))) then = val &amp;&amp; val.then;
      if (isFunction(then)) {
        this.promise.$$state.status = -1;
        then.call(val, fns[0], fns[1], this.notify);
      } else {
        this.promise.$$state.value = val;
        this.promise.$$state.status = 1;
        scheduleProcessQueue(this.promise.$$state);
      }
    } catch (e) {
      fns[1](e);
      exceptionHandler(e);
    }
  },

  reject: function(reason) {
    if (this.promise.$$state.status) return;
    this.$$reject(reason);
  },

  $$reject: function(reason) {
    this.promise.$$state.value = reason;
    this.promise.$$state.status = 2;
    scheduleProcessQueue(this.promise.$$state);
  },

  notify: function(progress) {
    var callbacks = this.promise.$$state.pending;

    if ((this.promise.$$state.status &lt;= 0) &amp;&amp; callbacks &amp;&amp; callbacks.length) {
      nextTick(function() {
        var callback, result;
        for (var i = 0, ii = callbacks.length; i &lt; ii; i++) {
          result = callbacks[i][0];
          callback = callbacks[i][3];
          try {
            result.notify(isFunction(callback) ? callback(progress) : progress);
          } catch (e) {
            exceptionHandler(e);
          }
        }
      });
    }
  }
});
</code></pre><p>在调用then的时候，就将锅中回调写到$$state的pending数组中，让defferred.resolve的时候就会调用Deferred的内部方法，调用我们传递的回调函数。</p>
<p><strong>源码分解实在是说不明白，后期再发一篇如何实现一个简易的Promise，希望能更简洁易懂</strong></p>
<h2 id="5、-了解更多"><a href="#5、-了解更多" class="headerlink" title="5、 了解更多"></a>5、 了解更多</h2><p><a href="http://liubin.github.io/promises-book/" target="_blank" rel="external">JavaScript Promise迷你书（中文版）</a></p>
<p><a href="https://docs.angularjs.org/api/ng/service/$q" target="_blank" rel="external">Angular $q api</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[01_Angular2初体验]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular2%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/01_Angular2%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h2 id="0、关于Angular2"><a href="#0、关于Angular2" class="headerlink" title="0、关于Angular2"></a>0、关于Angular2</h2><p>Angualr2是前端最流行的MV*框架AngularJS的革命性更新版本，官网：<a href="https://angular.io/" target="_blank" rel="external">https://angular.io/</a>，号称一个框架统一移动版和桌面。</p>
<h2 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h2><p>将AngularJS升级为Angular2，是大势所趋。在之前，我们就必须要对Angular2有足够的了解。所以这一系列文章，希望从各个点将angular2分而破之。</p>
<p>另外，由于Angular2当前处于Beta阶段，所以代码的时效性不高。所以每篇都会注明相关版本。</p>
<p>Angular2推荐的开发语言是TypeScript <a href="http://www.typescriptlang.org/" target="_blank" rel="external">http://www.typescriptlang.org/</a>，所以我们这一系列文章也使用TypeScript开发（实际是使用JavaScript，半天没弄成功，丧气ing…）。</p>
<p>不要害怕TypeScript，因为TypeScript是ES6的超集，我们完全可以使用ES6的方式来编写TypeScript代码。对我们来说，仅仅是文件名后缀变化了。</p>
<h2 id="2、Angular2-Hello-World"><a href="#2、Angular2-Hello-World" class="headerlink" title="2、Angular2 Hello-World"></a>2、Angular2 Hello-World</h2><p>Angular2并不仅仅只有一个JS文件，要想成功运行Angular2，需要包含如下内容：</p>
<ol>
<li>systemjs –模块加载器</li>
<li>Rxjs   –对Js的扩展，至今不知道它是做什么的</li>
<li>angular2</li>
</ol>
<p>如果要支持IE，那么还需要</p>
<ol>
<li>es6-shim</li>
<li>systemjs 中的system-polyfills.js文件</li>
<li>angular2中的shims_for_IE.js文件</li>
</ol>
<p>接着就直接创建项目吧，结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;root folder&gt;</div><div class="line">  components/</div><div class="line">    hello_world.html</div><div class="line">    hello_world.ts</div><div class="line">  bootstrap.ts</div><div class="line">  index.html</div><div class="line">  package.json</div></pre></td></tr></table></figure>
<p>首先第一步，我们要通过npm安装我们的依赖项：<br><code>npm install angular2 rxjs systemjs es6-shim typescript --save</code></p>
<p>接着，实现我们的<code>index.html</code>内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Angular2 Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- Angular2组件标记 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hello_world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello_world</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="comment">&lt;!-- IE required polyfills --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/es6-shim/es6-shim.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/systemjs/dist/system-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/angular2/es6/dev/src/testing/shims_for_IE.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Compile TypeScript --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/typescript/lib/typescript.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Angular2 required --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/systemjs/dist/system.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/angular2/bundles/angular2-polyfills.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/rxjs/bundles/Rx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/angular2/bundles/angular2.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- startup app --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    System.config(&#123;</div><div class="line">      <span class="attr">transpiler</span>: <span class="string">'typescript'</span>,</div><div class="line">      <span class="attr">typescriptOptions</span>: &#123; <span class="attr">emitDecoratorMetadata</span>: <span class="literal">true</span> &#125;,</div><div class="line">      <span class="attr">packages</span>: &#123;<span class="string">'components'</span>: &#123;<span class="attr">defaultExtension</span>: <span class="string">'ts'</span>&#125;&#125; <span class="comment">//配置components目录下的请求，默认格式为ts</span></div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//注意：此处import的时候，必须要指明后缀，因为我们是把bootstrap.ts放在index平级的，在System的config中没有配置默认扩展名</span></div><div class="line">    System.import(<span class="string">'bootstrap.ts'</span>).then(<span class="literal">null</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后是我们的<code>hello_world.html</code>和<code>hello_world.ts</code>，内容如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Angular2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">My name is: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"username"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">Angular2: <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngIf</span>=<span class="string">"username"</span>&gt;</span>Hello, &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component&#125; <span class="keyword">from</span> <span class="string">'angular2/core'</span>;</div><div class="line"></div><div class="line">@Component(&#123;</div><div class="line">  <span class="attr">selector</span>: <span class="string">'hello_world'</span>, <span class="comment">//此处指明了组件的标记，我们就可以使用&lt;hello_world&gt;&lt;/hello_world&gt;来使用这个组件了。</span></div><div class="line">  templateUrl: <span class="string">'components/hello_world.html'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">//export的意思是导出这个组件，在使用的地方，就可以使用import &#123;xx&#125; from 'xxx'来获取到了。</span></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldComponent</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，是我们的<code>bootstrap.ts</code>入口JS：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;bootstrap&#125; <span class="keyword">from</span> <span class="string">'angular2/platform/browser'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;HelloWorldComponent&#125; <span class="keyword">from</span> <span class="string">'components/hello_world'</span>;</div><div class="line">bootstrap(HelloWorldComponent);</div></pre></td></tr></table></figure>
<p>通过<code>anywhere</code>启动静态服务器，就可以看到我们的页面了。</p>
<p><strong>But，理想很丰满，现实很骨感，为嘛不兼容IE11？？？</strong></p>
<p>错误提示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;&apos;Symbol&apos; is undefined&quot;</div></pre></td></tr></table></figure>
<p><strong>坑你没商量*！最终发现是Rx的版本必须用angular2提供的那个版本</strong></p>
<p>地址是：<a href="https://code.angularjs.org/2.0.0-beta.12/Rx.js" target="_blank" rel="external">https://code.angularjs.org/2.0.0-beta.12/Rx.js</a></p>
<p>所以把Rx.js文件替换下，就可以在IE11中跑起来了。</p>
<p><strong>另外，经测试，Angular2可兼容IE9及以上版本。</strong></p>
<h2 id="3、结尾"><a href="#3、结尾" class="headerlink" title="3、结尾"></a>3、结尾</h2><p><a href="https://github.com/hstarorg/HstarDemoProject/tree/master/angular2_demo/04" target="_blank" rel="external">Demo源码</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[04_Angular2指令简析]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular2%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/04_Angular2%E6%8C%87%E4%BB%A4%E7%AE%80%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="0、Angular2指令"><a href="#0、Angular2指令" class="headerlink" title="0、Angular2指令"></a>0、Angular2指令</h2><p>在Angular1中，就已经有了指令的概念。Angular1中的指令用于实现可复用UI部件，也用于操作dom元素。</p>
<p>那么在Angular2中的指令是一样的东西么？</p>
<p>Angular2中有组件的概念，指令这个东西就变得更加纯粹。</p>
<p>Angular2的指令有三种：</p>
<ul>
<li>组件 </li>
<li>属性指令</li>
<li>结构指令</li>
</ul>
<p>组件是有模板的指令，是指令的中一个另类，因为它使用@Component来装饰，而不是@Directive。</p>
<p>属性指令用于改变现有元素的展现和行为，使用的时候它们看起来像是正常的HTML属性，所以称之为属性指令。如ngModel指令。</p>
<p>结构指令通过添加、删除和替换DOM树中的元素来改变布局，由于可以更改DOM结构，所以称之为结构指令。如ngIf，ngSwitch。</p>
<p>由于Angular2的API好不够稳定，书写该文时，采用的是Angular2 rc1（@angular rc.1）版本，其他版本请自行测试。</p>
<h2 id="1、属性指令"><a href="#1、属性指令" class="headerlink" title="1、属性指令"></a>1、属性指令</h2><p>接着，我们就一步步来实现一个属性指令 dynamicColor 。</p>
<p>首先，我们需要创建一个ts文件，然后把指令的骨架搭建起来。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Directive&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Directive</span>(&#123;</div><div class="line">  selector: <span class="string">'[dynamicColor]'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> DynamicColorDirective&#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码中，我们创建了一个dynamicColor指令。</p>
<p>接下来，我们来实现具体的功能，可以设置元素的背景色和前景色，并能实现事件通知。</p>
<p>要实现动态背景色和前景色，那我们需要额外附加两个属性bgColor和color。</p>
<p>要想在指令中获取这两个属性值，那么我们可以通过@Input方式或者是inputs属性，代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Directive, Input&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Directive</span>(&#123;</div><div class="line">  selector: <span class="string">'[dynamicColor]'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> DynamicColorDirective&#123;</div><div class="line">  </div><div class="line">  <span class="meta">@Input</span>()</div><div class="line">  <span class="keyword">private</span> bgColor: <span class="built_in">string</span>;</div><div class="line">  </div><div class="line">  <span class="meta">@Input</span>()</div><div class="line">  <span class="keyword">private</span> color: <span class="built_in">string</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者是：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Directive, Input&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Directive</span>(&#123;</div><div class="line">  selector: <span class="string">'[dynamicColor]'</span>,</div><div class="line">  <span class="comment">//注意，在之前的版本中，使用properties属性，而且，当前还可以使用。</span></div><div class="line">  inputs: [</div><div class="line">    <span class="string">'bgColor: bgColor'</span>, <span class="comment">//字符串以冒号隔开，前者是DynamicColorDirective的属性，后者的html元素的属性</span></div><div class="line">    <span class="string">'color: color'</span></div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> DynamicColorDirective&#123;</div><div class="line">  </div><div class="line">  <span class="comment">// @Input()</span></div><div class="line">  <span class="keyword">private</span> bgColor: <span class="built_in">string</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// @Input()</span></div><div class="line">  <span class="keyword">private</span> color: <span class="built_in">string</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么html中又应该如何传递值给指令呢？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">dynamicColor</span> [<span class="attr">bgColor</span>]=<span class="string">"testBgColor"</span> [<span class="attr">color</span>]=<span class="string">"testColor"</span>&gt;</span></div><div class="line">  Hi!</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意：在html元素的属性上，我们可以有两种写法。一种是直接书写属性，此时会把属性值原样传递给指令。第二种是使用[属性]，此时属性值应该是表达式（可以使用变量，判断等语句），传递给指令的是表达式的结果。</strong></p>
<p>我们又如何在后端查看这两个值呢？</p>
<p>直接在constructor中console？明确的说是不行的，因为constructor的代码会先于绑定执行。</p>
<p>这个时候，我们就需要借助指令的生命周期钩子。</p>
<p>指令的生命周期钩子有如下几个：</p>
<ol>
<li>ngOnInit –初始化时</li>
<li>ngOnChanges – 属性绑定之时（会有一次inputs属性绑定先于初始化）</li>
<li>ngDoCheck – 执行属性检查时</li>
<li>ngOnDestroy – 指令释放时</li>
</ol>
<p>了解了生命周期钩子，我们就可以通过ngOnInit来查看绑定好的属性值了。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Directive, Input, OnInit&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Directive</span>(&#123;</div><div class="line">  selector: <span class="string">'[dynamicColor]'</span>,</div><div class="line">  inputs: [</div><div class="line">    <span class="string">'bgColor: bgColor'</span>, <span class="comment">//字符串以冒号隔开，前者是DynamicColorDirective的属性，后者的html元素的属性</span></div><div class="line">    <span class="string">'color: color'</span></div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> DynamicColorDirective <span class="keyword">implements</span> OnInit&#123;</div><div class="line">  </div><div class="line">  <span class="comment">// @Input()</span></div><div class="line">  <span class="keyword">private</span> bgColor: <span class="built_in">string</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// @Input()</span></div><div class="line">  <span class="keyword">private</span> color: <span class="built_in">string</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  ngOnInit()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'bgColor'</span>, <span class="keyword">this</span>.bgColor);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'color'</span>, <span class="keyword">this</span>.color);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们需要设置元素的background color和color样式，那么我们必须要拿到这个而元素的引用, 并在初始化之后进行绑定。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Directive, Input, OnInit, ElementRef&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Directive</span>(&#123;</div><div class="line">  selector: <span class="string">'[dynamicColor]'</span>,</div><div class="line">  inputs: [</div><div class="line">    <span class="string">'bgColor: bgColor'</span>, <span class="comment">//字符串以冒号隔开，前者是DynamicColorDirective的属性，后者的html元素的属性</span></div><div class="line">    <span class="string">'color: color'</span></div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> DynamicColorDirective <span class="keyword">implements</span> OnInit&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> nativeElement: <span class="built_in">any</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// @Input()</span></div><div class="line">  <span class="keyword">private</span> bgColor: <span class="built_in">string</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// @Input()</span></div><div class="line">  <span class="keyword">private</span> color: <span class="built_in">string</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">constructor</span>(<span class="params">el: ElementRef</span>)&#123;</div><div class="line">    <span class="keyword">this</span>.nativeElement = el.nativeElement;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> _setElementStyle(): <span class="built_in">void</span>&#123;</div><div class="line">    <span class="keyword">this</span>.nativeElement.style.backgroundColor = <span class="keyword">this</span>.bgColor;</div><div class="line">    <span class="keyword">this</span>.nativeElement.style.color = <span class="keyword">this</span>.color;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  ngOnInit()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'bgColor'</span>, <span class="keyword">this</span>.bgColor);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'color'</span>, <span class="keyword">this</span>.color);</div><div class="line">    <span class="keyword">this</span>._setElementStyle();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当从元素上绑定的属性变化时，又应该从哪里获取到变更呢？这就需要借助生命周期里面的OnChanges函数，代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Directive, Input, ElementRef, OnInit, OnChanges&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Directive</span>(&#123;</div><div class="line">  selector: <span class="string">'[dynamicColor]'</span>,</div><div class="line">  inputs: [</div><div class="line">    <span class="string">'bgColor: bgColor'</span>, <span class="comment">//字符串以冒号隔开，前者是DynamicColorDirective的属性，后者的html元素的属性</span></div><div class="line">    <span class="string">'color: color'</span></div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> DynamicColorDirective <span class="keyword">implements</span> OnInit, OnChanges&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> nativeElement: <span class="built_in">any</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// @Input()</span></div><div class="line">  <span class="keyword">private</span> bgColor: <span class="built_in">string</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// @Input()</span></div><div class="line">  <span class="keyword">private</span> color: <span class="built_in">string</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">constructor</span>(<span class="params">el: ElementRef</span>)&#123;</div><div class="line">    <span class="keyword">this</span>.nativeElement = el.nativeElement;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> _setElementStyle(): <span class="built_in">void</span>&#123;</div><div class="line">    <span class="keyword">this</span>.nativeElement.style.backgroundColor = <span class="keyword">this</span>.bgColor;</div><div class="line">    <span class="keyword">this</span>.nativeElement.style.color = <span class="keyword">this</span>.color;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  ngOnInit()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'bgColor'</span>, <span class="keyword">this</span>.bgColor);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'color'</span>, <span class="keyword">this</span>.color);</div><div class="line">    <span class="keyword">this</span>._setElementStyle();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  ngOnChanges()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'bgColor-change'</span>, <span class="keyword">this</span>.bgColor);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'color-change'</span>, <span class="keyword">this</span>.color);</div><div class="line">    <span class="keyword">this</span>._setElementStyle();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于每次变化都会触发OnChanges，那么为了提高性能，我们可以在这里加入一个节流函数。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> _setElementStyle(): <span class="built_in">void</span> &#123;</div><div class="line">  clearTimeout(<span class="keyword">this</span>.timeoutId);</div><div class="line">  <span class="keyword">this</span>.timeoutId = setTimeout(() =&gt; &#123;</div><div class="line">    <span class="keyword">this</span>.nativeElement.style.backgroundColor = <span class="keyword">this</span>.bgColor;</div><div class="line">    <span class="keyword">this</span>.nativeElement.style.color = <span class="keyword">this</span>.color;</div><div class="line">  &#125;, <span class="number">500</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有了节流函数，我们就不太确定到底执行了几次更新操作了。这个时候，我们可以加入事件通知。这就涉及到指令的@Output了。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Output</span>()</div><div class="line"><span class="keyword">private</span> updated: EventEmitter&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> EventEmitter();</div></pre></td></tr></table></figure>
<p>也等同于：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">outputs: [</div><div class="line">  <span class="string">'updated: updated'</span></div><div class="line">]</div><div class="line"><span class="keyword">private</span> updated: EventEmitter&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> EventEmitter();</div></pre></td></tr></table></figure>
<p><strong>注意：在之前的版本中，也可以用events属性来替代outputs，现在也还可以使用</strong></p>
<p>要对外发出通知，只需要使用如下代码：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.updated.emit(<span class="string">'updated'</span>);</div><div class="line"><span class="keyword">this</span>.updated.next(<span class="string">'updated2'</span>);</div></pre></td></tr></table></figure>
<p>HTML标签使用时，代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">dynamicColor</span> [<span class="attr">bgColor</span>]=<span class="string">"testBgColor"</span> [<span class="attr">color</span>]=<span class="string">"testColor"</span> (<span class="attr">updated</span>)=<span class="string">"notify($event)"</span>&gt;</span></div><div class="line">  Hi!</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>至此，我们这个指令就已经完成了，所有代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//dynamicColor.directive.ts</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;Directive, Input, Output, ElementRef, EventEmitter, OnInit, OnChanges&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Directive</span>(&#123;</div><div class="line">  selector: <span class="string">'[dynamicColor]'</span>,</div><div class="line">  inputs: [</div><div class="line">    <span class="string">'bgColor: bgColor'</span>, <span class="comment">//字符串以冒号隔开，前者是DynamicColorDirective的属性，后者的html元素的属性</span></div><div class="line">    <span class="string">'color: color'</span></div><div class="line">  ],</div><div class="line">  outputs: [</div><div class="line">    <span class="string">'updated: updated'</span></div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> DynamicColorDirective <span class="keyword">implements</span> OnInit, OnChanges &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> nativeElement: <span class="built_in">any</span>;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> timeoutId: <span class="built_in">any</span>;</div><div class="line"></div><div class="line">  <span class="comment">// @Input()</span></div><div class="line">  <span class="keyword">private</span> bgColor: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">  <span class="comment">// @Input()</span></div><div class="line">  <span class="keyword">private</span> color: <span class="built_in">string</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// @Output()</span></div><div class="line">  <span class="keyword">private</span> updated: EventEmitter&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> EventEmitter(); </div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="params">el: ElementRef</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.nativeElement = el.nativeElement;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> _setElementStyle(): <span class="built_in">void</span> &#123;</div><div class="line">    clearTimeout(<span class="keyword">this</span>.timeoutId); <span class="comment">//先清除已有的timeout</span></div><div class="line">    <span class="comment">//保证只执行最后一次。</span></div><div class="line">    <span class="keyword">this</span>.timeoutId = setTimeout(() =&gt; &#123;</div><div class="line">      <span class="keyword">this</span>.nativeElement.style.backgroundColor = <span class="keyword">this</span>.bgColor;</div><div class="line">      <span class="keyword">this</span>.nativeElement.style.color = <span class="keyword">this</span>.color;</div><div class="line">      <span class="keyword">this</span>.updated.emit(<span class="string">'updated'</span>);</div><div class="line">      <span class="keyword">this</span>.updated.next(<span class="string">'updated2'</span>);</div><div class="line">    &#125;, <span class="number">500</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ngOnInit() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'bgColor'</span>, <span class="keyword">this</span>.bgColor);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'color'</span>, <span class="keyword">this</span>.color);</div><div class="line">    <span class="keyword">this</span>._setElementStyle();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ngOnChanges() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'bgColor-change'</span>, <span class="keyword">this</span>.bgColor);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'color-change'</span>, <span class="keyword">this</span>.color);</div><div class="line">    <span class="keyword">this</span>._setElementStyle();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//test.html</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Dynamic Color Directive<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"testBgColor"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">dynamicColor</span> [<span class="attr">bgColor</span>]=<span class="string">"testBgColor"</span> [<span class="attr">color</span>]=<span class="string">"testColor"</span> (<span class="attr">updated</span>)=<span class="string">"notify($event)"</span>&gt;</span></div><div class="line">  Hi!</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test.component.ts</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> TestComponent&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> testBgColor: <span class="built_in">string</span> = <span class="string">'blue'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> testColor: <span class="built_in">string</span> = <span class="string">'red'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> test(data)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'data'</span>, <span class="string">'my'</span>, data);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> notify(data)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'notify = '</span>, data);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>思考一下？我们还有没有更简单的方式实现以上的效果呢？</em></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Directive, EventEmitter&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Directive</span>(&#123;</div><div class="line">  selector: <span class="string">'[dynamicColor]'</span>,</div><div class="line">  inputs: [</div><div class="line">    <span class="string">'bgColor: bgColor'</span>, <span class="comment">//字符串以冒号隔开，前者是DynamicColorDirective的属性，后者的html元素的属性</span></div><div class="line">    <span class="string">'color: color'</span></div><div class="line">  ],</div><div class="line">  outputs: [</div><div class="line">    <span class="string">'updated: updated'</span></div><div class="line">  ],</div><div class="line">  host: &#123;</div><div class="line">    <span class="string">'[style.backgroundColor]'</span>: <span class="string">'bgColor'</span>,</div><div class="line">    <span class="string">'[style.color]'</span>: <span class="string">'color'</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> DynamicColorDirective &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> bgColor: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> color: <span class="built_in">string</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> updated: EventEmitter&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> EventEmitter(); </div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过host直接在元素上添加绑定。</p>
<h2 id="2、结构指令"><a href="#2、结构指令" class="headerlink" title="2、结构指令"></a>2、结构指令</h2><p>结构指令帮助我们修改dom结构，我们就简单实现一个templateInclude指令。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Directive, Input, Output, ElementRef, EventEmitter, OnChanges&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Http&#125; from <span class="string">'@angular/http'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Directive</span>(&#123;</div><div class="line">  selector: <span class="string">'[templateInclude]'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> TemplateIncludeDirective <span class="keyword">implements</span> OnChanges &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> nativeElement: <span class="built_in">any</span>;</div><div class="line"></div><div class="line">  <span class="meta">@Input</span>(<span class="string">'templateInclude'</span>)</div><div class="line">  <span class="keyword">private</span> templateUrl: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">  <span class="meta">@Output</span>()</div><div class="line">  <span class="keyword">private</span> loaded: EventEmitter&lt;<span class="built_in">any</span>&gt; = <span class="keyword">new</span> EventEmitter();</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="params">el: ElementRef, <span class="keyword">private</span> http: Http</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.nativeElement = el.nativeElement;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> _setTemplate() &#123;</div><div class="line">    <span class="keyword">this</span>.http.get(<span class="keyword">this</span>.templateUrl)</div><div class="line">      .subscribe(res =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.nativeElement.innerHTML = res.text();</div><div class="line">        <span class="keyword">this</span>.loaded.next(<span class="string">`<span class="subst">$&#123;this.templateUrl&#125;</span> loaded`</span>);</div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ngOnChanges() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.templateUrl);</div><div class="line">    <span class="keyword">this</span>._setTemplate();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p><strong>1、指令的元数据有很多属性可以使用</strong></p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">class</span> DirectiveMetadata &#123;</div><div class="line">  selector : <span class="built_in">string</span> <span class="comment">//指令使用的标记（选择器）</span></div><div class="line">  inputs : <span class="built_in">string</span>[] <span class="comment">//输入参数绑定</span></div><div class="line">  properties : <span class="built_in">string</span>[] <span class="comment">//属性绑定（过期，请使用inputs）</span></div><div class="line">  outputs : <span class="built_in">string</span>[] <span class="comment">//输出参数绑定</span></div><div class="line">  events : <span class="built_in">string</span>[] <span class="comment">//事件绑定（过期，请使用outputs）</span></div><div class="line">  host : &#123;[key: <span class="built_in">string</span>]: <span class="built_in">string</span>&#125; <span class="comment">//宿主元素属性设置</span></div><div class="line">  providers : <span class="built_in">any</span>[] <span class="comment">//服务绑定</span></div><div class="line">  bindings : <span class="built_in">any</span>[] <span class="comment">//服务绑定（过期，请使用providers）</span></div><div class="line">  exportAs : <span class="built_in">string</span> <span class="comment">//导出名称</span></div><div class="line">  queries : &#123;[key: <span class="built_in">string</span>]: <span class="built_in">any</span>&#125; <span class="comment">//用于指令依赖关系</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2、在使用指令（不仅仅是指令）进行绑定的时候，[]表示输入属性，()表示输出属性和事件</strong></p>
<p><strong>3、尽量使用统一的做法，用装饰器优于在属性上做绑定</strong></p>
<p><strong>4、在编写指令（不仅限于指令）时，将class中内容按照特定顺序进行排列，推荐顺序如下（个人建议，仅供参考）：</strong></p>
<ol>
<li>私有变量</li>
<li>共有变量</li>
<li>@Input变量</li>
<li>@Output变量</li>
<li>构造函数</li>
<li>私有方法（建议下划线开头）</li>
<li>公有方法</li>
<li>生命周期钩子方法</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[05_Angular2组件简析]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular2%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/05_Angular2%E7%BB%84%E4%BB%B6%E7%AE%80%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="0、Angular2组件"><a href="#0、Angular2组件" class="headerlink" title="0、Angular2组件"></a>0、Angular2组件</h2><p><strong>注：由于Angular2的API好不够稳定，书写该文时，采用的是Angular2 rc1（@angular rc.1）版本，其他版本请自行测试。</strong></p>
<p>在上篇中，我们已经讲到了指令，这篇呢，我们一起来看看Angular2组件是怎么一回事。</p>
<p>首先，组件也是指令，组件是一种有模板（内嵌视图）的特殊指令。</p>
<p>从元数据<a href="https://github.com/angular/angular/blob/2.0.0-rc.1/modules/%40angular/core/src/metadata/directives.ts" target="_blank" rel="external">指令源代码</a>中也可以看出组件与指令的关系：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> ComponentMetadata extends DirectiveMetadata &#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相比 <code>Directive</code>, <code>Component</code> 新增了一些属性，如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  changeDetection : ChangeDetectionStrategy; 定义变化检测类型</div><div class="line">  viewProviders: <span class="built_in">any</span>[]; 用于在组件中注入特定的<span class="keyword">class</span>。一般是实体类</div><div class="line">  moduleId: <span class="built_in">string</span>; 定义主键的ID</div><div class="line">  templateUrl: <span class="built_in">string</span>; 如ng1，外部模板地址</div><div class="line">  template: <span class="built_in">string</span>; 如ng1，内嵌模板内容</div><div class="line">  styleUrls: <span class="built_in">string</span>[]; 外部样式表文件</div><div class="line">  styles: <span class="built_in">string</span>[]; 内嵌样式</div><div class="line">  directives: <span class="built_in">Array</span>&lt;Type | <span class="built_in">any</span>[]&gt;; 使用到的指令</div><div class="line">  pipes: <span class="built_in">Array</span>&lt;Type | <span class="built_in">any</span>[]&gt;; 使用到的管道</div><div class="line">  encapsulation: ViewEncapsulation  封装视图的类型</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1、组件生命周期"><a href="#1、组件生命周期" class="headerlink" title="1、组件生命周期"></a>1、组件生命周期</h2><p>既然组件也是指令，那么指令所拥有的四大阶段组件也同样拥有。</p>
<p>而且，由于组件带有视图，还多了几个和视图相关的生命周期阶段。如下：</p>
<ol>
<li>ngAfterContentInit 组件内容渲染到页面之后触发</li>
<li>ngAfterContentChecked 检查组件内容绑定数据后触发</li>
<li>ngAfterViewInit 创建组件视图之后触发</li>
<li>ngAfterViewChecked 检查组件视图绑定数据后触发</li>
</ol>
<p>它们的执行顺序也和以上顺序一致。</p>
<h2 id="2、整一个组件试试？"><a href="#2、整一个组件试试？" class="headerlink" title="2、整一个组件试试？"></a>2、整一个组件试试？</h2><p>接下来，我们就简单实现一个组件 <code>TodoList</code> 来实验一下以上的知识点。</p>
<p>首先，搭建好一个简单的架子，如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'todo-list'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoListComponent&#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用组件装饰器 <code>Component</code> 来定义一个组件，注意其中 <code>selector</code> 属性和 <code>Directive</code> 中的写法不一样了。</p>
<p>组件必须以标签的方式存在，所以 selector 属性值仅仅只需要写标签名就可以了，不再需要其他特别的符号了。 </p>
<p>组件和指令最大的差别就在于模板，所以我们接下来添加上模板代码：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'todo-list'</span>,</div><div class="line">  template: <span class="string">`</span></div><div class="line">&lt;div class="todo-list"&gt;</div><div class="line">  &lt;h1&gt;Todo List&lt;/li&gt;</div><div class="line">  &lt;ul&gt;</div><div class="line">    &lt;li&gt;&lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">&lt;/div&gt; </div><div class="line">  `</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoListComponent&#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>)&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上，一个简单的模板就搞好了。这里需要注意 <code>templateUrl</code> 和 <code>template</code> 是互斥的两个属性。一般来说只选择一个赋值，如果两者都存在，那么会采用 <code>tempalte</code> 的值。</p>
<p>模板有了，我们就来点业务逻辑：</p>
<p>先假设Todo有三个状态：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> TodoStatus &#123;</div><div class="line">  Open,</div><div class="line">  Processing,</div><div class="line">  Closed</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在来定义Todo的实体类：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Todo &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> description: <span class="built_in">string</span>;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> status: TodoStatus;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, status: TodoStatus, description?: <span class="built_in">string</span></span>) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.status = status;</div><div class="line">    <span class="keyword">this</span>.description = description || <span class="string">''</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着来实现一个组件：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'todo-list'</span>,</div><div class="line">  template: <span class="built_in">require</span>(<span class="string">'./todo-list.component.html'</span>)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> TodoList &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> todos: <span class="built_in">Array</span>&lt;Todo&gt;;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> todo: &#123; name: <span class="built_in">string</span>, desc: <span class="built_in">string</span> &#125; = &#123; name: <span class="string">''</span>, desc: <span class="string">''</span> &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</div><div class="line">    <span class="keyword">this</span>.todos = [];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  addTodo() &#123;</div><div class="line">    <span class="keyword">this</span>.todos.push(<span class="keyword">new</span> Todo(<span class="keyword">this</span>.todo.name, TodoStatus.Open, <span class="keyword">this</span>.todo.desc));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候，HTML页面内容如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">"todos.length === 0"</span>&gt;</span>No todos.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let todo of todos"</span>&gt;</span></div><div class="line">    &#123;&#123;todo.name&#125;&#125; - &#123;&#123;todo.description&#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"todo-edit"</span>&gt;</span></div><div class="line">  Name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"todo.name"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  Description: <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"3"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"todo.desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"addTodo()"</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>功能做好了，我们得给它来点样式美化。</p>
<p>此时我们仅仅需要实现一点样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.todo-list</span>&#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.todo-list</span> <span class="selector-tag">li</span>&#123;</div><div class="line">  <span class="attribute">list-style</span>: none;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在组件装饰器中申明就可以了：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'todo-list'</span>,</div><div class="line">  template: <span class="built_in">require</span>(<span class="string">'./todo-list.component.html'</span>),</div><div class="line">  styles : [<span class="built_in">require</span>(<span class="string">'./todo-list.component.css'</span>)]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>至此，一个简单的可以添加todo的todo-list就已经完成了。</p>
<p><strong>注意：注入@Input，@Output之类的和Directive都是一样的，此处就不再演示了。</strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[03_Angular2的那些Decorator]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular2%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/03_Angular2%E7%9A%84%E9%82%A3%E4%BA%9BDecorator/</url>
      <content type="html"><![CDATA[<h2 id="0、Decorator"><a href="#0、Decorator" class="headerlink" title="0、Decorator"></a>0、Decorator</h2><p><code>Decorator</code> 是ECMAScript中建议的标准，使得我们可以在设计时对类和属性进行注解和修改。</p>
<h2 id="1、Angular2的Decorator"><a href="#1、Angular2的Decorator" class="headerlink" title="1、Angular2的Decorator"></a>1、Angular2的Decorator</h2><p>在Angular2的早期版本（使用AtScript）中，我们是使用Annotation（注解），它以一个声明的方式将元数据添加到代码中。</p>
<p>在后来迁移到TypeScript的时候，我们可以使用 Decorator 和 Annotation 。作为使用者来说，使用 Decorator 和 Annotation 几乎是一样的，唯一的区别是我们没有去控制 Annotation 如何将元数据添加到我们的代码中，而 Decorator 是对 这些 Annotation 的最终实现。</p>
<p>从长远看，我们更应该多关注 Decorator ，因为它才是真正的标准建议。</p>
<h2 id="2、Angular2的那些Decorator"><a href="#2、Angular2的那些Decorator" class="headerlink" title="2、Angular2的那些Decorator"></a>2、Angular2的那些Decorator</h2><h3 id="2-1、In-angular2-core"><a href="#2-1、In-angular2-core" class="headerlink" title="2.1、In angular2/core"></a>2.1、In angular2/core</h3><h4 id="2-1-1、Component"><a href="#2-1-1、Component" class="headerlink" title="2.1.1、Component"></a>2.1.1、Component</h4><p><code>Component</code> 用于声明可重用的UI构建模块（组件），每个 Angular component都要求有一个 <code>@Component</code> 注解，它指定了组件何时被实例化，哪些属性和 hostListeners 被绑定。</p>
<p>当组件实现（implements）了一些生命周期钩子（lifecycle-hooks），那么将在特定的时间点访问这些钩子的回调函数。</p>
<p><strong>如何使用</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">@Component(&#123;</div><div class="line">  <span class="attr">selector</span>: <span class="string">'demo'</span>, <span class="comment">// 配置选择器</span></div><div class="line">  inputs: [],</div><div class="line">  <span class="attr">outputs</span>: [],</div><div class="line">  <span class="attr">properties</span>: [],</div><div class="line">  <span class="attr">events</span>: [],</div><div class="line">  <span class="attr">host</span>: &#123;&#125;,</div><div class="line">  <span class="attr">providers</span>: [], <span class="comment">// 设定所依赖的Providers（ng1中的service，provider，factory）</span></div><div class="line">  exportAs: <span class="string">''</span>,</div><div class="line">  <span class="attr">moduleId</span>: <span class="string">''</span>,  <span class="comment">//设定模块ID</span></div><div class="line">  viewProviders: [],</div><div class="line">  <span class="attr">queries</span>: &#123;&#125;,</div><div class="line">  <span class="comment">//changeDetection</span></div><div class="line">  templateUrl : <span class="string">''</span>, <span class="comment">// 指定模板文件URL，和template冲突</span></div><div class="line">  template: <span class="string">'Hello &#123;&#123;name&#125;&#125;!'</span>, <span class="comment">//指定模板内容，和templateUrl冲突</span></div><div class="line">  styleUrls: [], <span class="comment">// 设定组件依赖的样式表文件</span></div><div class="line">  styles : [],  <span class="comment">//设定组件依赖的样式</span></div><div class="line">  directives: [], <span class="comment">//设定所依赖的Directives（ng1中的directives）</span></div><div class="line">  pipes: [] <span class="comment">//设定所依赖的Pipes（ng1中的filter）</span></div><div class="line">  <span class="comment">//encapsulation</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</div><div class="line">  private name: string = <span class="string">'World'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注：从继承关系来看，Component extends Directive。</strong></p>
<h4 id="2-1-2、Directive"><a href="#2-1-2、Directive" class="headerlink" title="2.1.2、Directive"></a>2.1.2、Directive</h4><p><code>Directive</code> 允许你在DOM元素上附加行为。如果指令带有内嵌视图，那么就成为了组件。</p>
<p>指令同样也有生命周期钩子。使用方式和 Component 雷同。</p>
<p>指令允许多种注入方式来实例化：</p>
<p>1、无注入 – 该指令没有外部依赖</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 空构造，无注入</span></div><div class="line">@Directive(&#123; <span class="attr">selector</span>: <span class="string">'[my-directive]'</span> &#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDirective</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、组件级别的注入 – 该指令依赖一些外部服务</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;User&#125; <span class="keyword">from</span> <span class="string">'xxx'</span>;</div><div class="line"></div><div class="line">@Directive(&#123; <span class="attr">selector</span>: <span class="string">'[my-directive]'</span> &#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDirective</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(user: User) &#123; <span class="comment">//依赖外部服务</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、注入当前元素的其它指令 –该指令依赖当前元素上的其他指令，搭配其他指令一起使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;User&#125; <span class="keyword">from</span> <span class="string">'xxx'</span>;</div><div class="line"></div><div class="line">@Directive(&#123; <span class="attr">selector</span>: <span class="string">'[my-directive]'</span> &#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDirective</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(depDirective: DepDirective) &#123; <span class="comment">//依赖当前元素上的其他指令</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">my-directive</span> <span class="attr">dep-directive</span>&gt;</span></div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>4、注入当前元素、父元素、更上层的父元素上的指令 –该指令依赖上层元素的指令</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;User&#125; <span class="keyword">from</span> <span class="string">'xxx'</span>;</div><div class="line"></div><div class="line">@Directive(&#123; <span class="attr">selector</span>: <span class="string">'[my-directive]'</span> &#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDirective</span> </span>&#123;</div><div class="line">  <span class="comment">//要使用 @Host()</span></div><div class="line">  <span class="keyword">constructor</span>(@Host() depDirective: DepDirective) &#123; <span class="comment">//可以依赖父辈元素上的指令</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">dep-directive</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">my-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>5、注入直接子集集合元素的的指令 –该指令依赖直接子元素的指令</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;User&#125; <span class="keyword">from</span> <span class="string">'xxx'</span>;</div><div class="line"></div><div class="line">@Directive(&#123; <span class="attr">selector</span>: <span class="string">'[my-directive]'</span> &#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDirective</span> </span>&#123;</div><div class="line">  <span class="comment">//使用 @Query&lt;Type&gt; ，依赖直接子元素上的指令</span></div><div class="line">  <span class="keyword">constructor</span>(@Query(DepDirective) depDirective: QueryList&lt;DepDirective&gt;) &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">my-directive</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">dep-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">dep-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>6、注入后代集合元素的指令 –该指令依赖后代元素的指令</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;User&#125; <span class="keyword">from</span> <span class="string">'xxx'</span>;</div><div class="line"></div><div class="line">@Directive(&#123; <span class="attr">selector</span>: <span class="string">'[my-directive]'</span> &#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDirective</span> </span>&#123;</div><div class="line">  <span class="comment">//使用 @Query&lt;Type&gt; ，依赖直接子元素上的指令</span></div><div class="line">  <span class="keyword">constructor</span>(@Query(DepDirective, &#123;descendants: <span class="literal">true</span>&#125;) depDirective: QueryList&lt;DepDirective&gt;) &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">my-directive</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">dep-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">dep-directive</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>7、可选注入 –该指令的依赖是可选的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Directive(&#123; selector: &apos;[my-directive]&apos; &#125;)</div><div class="line">class MyDirective &#123;</div><div class="line">  // 使用 @Optional 标记，依赖是可选的。 </div><div class="line">  constructor(@Optional() depDirective:DepDirective) &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注：以上多种注入方式也适用于 Component 。</strong></p>
<h4 id="2-1-3、Injectable"><a href="#2-1-3、Injectable" class="headerlink" title="2.1.3、Injectable"></a>2.1.3、Injectable</h4><p><code>Injectable</code> 允许使用注入。在编写组件/指令时，如果有注入，那么就需要将指令/组件标记为可注入的。</p>
<h4 id="2-1-4、Pipe"><a href="#2-1-4、Pipe" class="headerlink" title="2.1.4、Pipe"></a>2.1.4、Pipe</h4><p><code>Pipe</code> 允许我们定义管道方法，实现ng1中filter类似的功能。</p>
<p>如何编写一个Pipe？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Pipe(&#123;<span class="attr">name</span>: <span class="string">'lowercase'</span>&#125;)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lowercase</span> </span>&#123;</div><div class="line">  transform(v: string, <span class="attr">args</span>: any[]) &#123; <span class="keyword">return</span> v.toLowerCase(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2、In-angular2-router"><a href="#2-2、In-angular2-router" class="headerlink" title="2.2、In angular2/router"></a>2.2、In angular2/router</h3><h4 id="2-2-1、CanActivate"><a href="#2-2-1、CanActivate" class="headerlink" title="2.2.1、CanActivate"></a>2.2.1、CanActivate</h4><p><code>CanActivate</code> 允许我们在使用路由时，检查组件的权限，来确定是否可以使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Component(&#123;<span class="attr">selector</span>: <span class="string">'control-panel-cmp'</span>, <span class="attr">template</span>: <span class="string">`&lt;div&gt;Settings: ...&lt;/div&gt;`</span>&#125;)</div><div class="line">@CanActivate(checkIfWeHavePermission)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlPanelCmp</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-2、RouteConfig"><a href="#2-2-2、RouteConfig" class="headerlink" title="2.2.2、RouteConfig"></a>2.2.2、RouteConfig</h4><p><code>RouteConfig</code> 用于我们配置路由。</p>
<p>使用如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Component(&#123;</div><div class="line">  selector: &apos;dojo-app&apos;,</div><div class="line">  moduleId: module.id,</div><div class="line">  templateUrl: &apos;app.html&apos;,</div><div class="line">  styleUrls: [&apos;app.css&apos;],</div><div class="line">  directives: [ROUTER_DIRECTIVES, HeaderComponent]</div><div class="line">&#125;)</div><div class="line"></div><div class="line">@RouteConfig([</div><div class="line">  &#123;path: &apos;/&apos;, name: &apos;Home&apos;, component: HomeComponent&#125;,</div><div class="line">  &#123;path: &apos;/about&apos;, name: &apos;About&apos;, component: AboutComponent&#125;</div><div class="line">])</div><div class="line"></div><div class="line">export class AppComponent&#123;</div><div class="line">  constructor() &#123;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、参考"><a href="#3、参考" class="headerlink" title="3、参考"></a>3、参考</h2><ol>
<li><a href="https://angular.io/docs/ts/latest/api/index.html#!?apiType=Decorator" target="_blank" rel="external">https://angular.io/docs/ts/latest/api/index.html#!?apiType=Decorator</a></li>
<li><a href="https://angular.io/docs/ts/latest/api/index.html#!?apiFilter=metadata" target="_blank" rel="external">https://angular.io/docs/ts/latest/api/index.html#!?apiFilter=metadata</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[09_Angular2使用ui-router-ng2]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular2%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/09_Angular2%E4%BD%BF%E7%94%A8ui-router-ng2/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>Angular2的路由组件从beta到rc经历了多次变更，知道rc.4都没有完全稳定下来。其次它的功能也并不强大，全局钩子，动态加载，状态控制都不支持。</p>
<p>如果是使用Angular1，那这个时候我们一般会选择 <code>ui-router</code> 这一个强大的基于状态的路由。</p>
<p>其实，<code>ui-router</code> 也提供了一个Angular2的版本，那就是 <code>ui-router-ng2</code>。</p>
<p>我们就来简单的尝试下它的使用，和利用它来实现动态加载一批组件（结合webpack）。</p>
<h2 id="1、引入-ui-router-ng2"><a href="#1、引入-ui-router-ng2" class="headerlink" title="1、引入 ui-router-ng2"></a>1、引入 <code>ui-router-ng2</code></h2><p>要使用 <code>ui-router-ng2</code>，我们必须要先通过 <code>npm install ui-router-ng2</code> 来安装该包。</p>
<p>安装成功之后，我们需要实现一个 <code>UIRouterConfig</code> 的实例，代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Injectable &#125; from <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UIRouter, UIRouterConfig &#125; from <span class="string">'ui-router-ng2'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;AboutComponent&#125; from <span class="string">'./about.component'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppRouterConfig <span class="keyword">implements</span> UIRouterConfig &#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  configure(uiRouter: UIRouter) &#123;</div><div class="line">    uiRouter.stateRegistry.register(&#123;</div><div class="line">      name: <span class="string">'about'</span>,</div><div class="line">      component: AboutComponent,</div><div class="line">      url: <span class="string">'/about'</span></div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一般做法，我们需要在 <code>configure</code> 方法中，注册路由状态对象。</p>
<p>当实现了 <code>UIRouterConfig</code> 之后，我们就可以在应用启动时来使用它了，具体代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; enableProdMode, provide, PLATFORM_DIRECTIVES &#125; from <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; APP_BASE_HREF, LocationStrategy, HashLocationStrategy, PlatformLocation &#125; from <span class="string">'@angular/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; BrowserPlatformLocation &#125; from <span class="string">'@angular/platform-browser'</span>;</div><div class="line"><span class="keyword">import</span> &#123; bootstrap &#125; from <span class="string">'@angular/platform-browser-dynamic'</span>;</div><div class="line"><span class="keyword">import</span> &#123; UIROUTER_PROVIDERS, UIRouterConfig, UIROUTER_DIRECTIVES &#125; from <span class="string">'ui-router-ng2'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; RootComponent &#125; from <span class="string">'./../shell'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRouterConfig &#125; from <span class="string">'./routes'</span>;</div><div class="line"></div><div class="line">enableProdMode();</div><div class="line"></div><div class="line">bootstrap(RootComponent, [</div><div class="line">  provide(APP_BASE_HREF, &#123; useValue: <span class="string">'/'</span> &#125;),</div><div class="line">  provide(LocationStrategy, &#123; useClass: HashLocationStrategy &#125;),</div><div class="line">  provide(PlatformLocation, &#123; useClass: BrowserPlatformLocation &#125;),</div><div class="line">  ...UIROUTER_PROVIDERS,</div><div class="line">  provide(UIRouterConfig, &#123; useClass: AppRouterConfig &#125;),</div><div class="line">  provide(PLATFORM_DIRECTIVES, &#123; useValue: UIROUTER_DIRECTIVES, multi: <span class="literal">true</span> &#125;)</div><div class="line">])</div><div class="line">  .then(x =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'app started...'</span>);</div><div class="line">  &#125;)</div><div class="line">  .catch(error =&gt; <span class="built_in">console</span>.log(error));</div></pre></td></tr></table></figure>
<p>其中最关键是和路由相关的代码是：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...UIROUTER_PROVIDERS, <span class="comment">//依赖路由提供者</span></div><div class="line">provide(UIRouterConfig, &#123; useClass: AppRouterConfig &#125;), <span class="comment">//指定RouterConfig</span></div><div class="line">provide(PLATFORM_DIRECTIVES, &#123; useValue: UIROUTER_DIRECTIVES, multi: <span class="literal">true</span> &#125;) <span class="comment">//依赖路由指令</span></div></pre></td></tr></table></figure>
<p>在经过这些步骤之后，我们的项目就已经可以使用 <code>ui-router-ng2</code> 来进行路由管理了。</p>
<h2 id="2、路由钩子"><a href="#2、路由钩子" class="headerlink" title="2、路由钩子"></a>2、路由钩子</h2><p><code>ui-router-ng2</code> 提供了很强大的路由钩子函数，可以让我们很方便的对路由的各个阶段进行控制。</p>
<p>使用方式如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Injectable, Inject&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;UIRouter, UIRouterConfig&#125; from <span class="string">'ui-router-ng2'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;AboutComponent&#125; from <span class="string">'./about.component'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppRouterConfig <span class="keyword">implements</span> UIRouterConfig &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  configure(uiRouter: UIRouter) &#123;</div><div class="line">    uiRouter.stateRegistry.register(&#123;</div><div class="line">      name: <span class="string">'about'</span>,</div><div class="line">      component: AboutComponent,</div><div class="line">      url: <span class="string">'/about'</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 以下t均为Transition实例</span></div><div class="line"></div><div class="line">    uiRouter.transitionService.onBefore(&#123;&#125;, t =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'onBefore'</span>, t); <span class="comment">//路由跳转之前</span></div><div class="line">    &#125;);</div><div class="line">    uiRouter.transitionService.onStart(&#123;&#125;, t =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'onStart'</span>, t); <span class="comment">//路由跳转开始</span></div><div class="line">    &#125;);</div><div class="line">    uiRouter.transitionService.onExit(&#123;&#125;, t =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'onExit'</span>, t); <span class="comment">//路由跳出时</span></div><div class="line">    &#125;);</div><div class="line">    uiRouter.transitionService.onRetain(&#123;&#125;, t =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'onRetain'</span>, t); <span class="comment">//...</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    uiRouter.transitionService.onEnter(&#123;&#125;, t =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'onEnter'</span>, t); <span class="comment">//路由进入时</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    uiRouter.transitionService.onFinish(&#123;&#125;, t =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'onFinish'</span>, t); <span class="comment">//路由跳转完成</span></div><div class="line">    &#125;);</div><div class="line">    uiRouter.transitionService.onSuccess(&#123;&#125;, t =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'onSuccess'</span>, t); <span class="comment">//路由跳转成功</span></div><div class="line">    &#125;);</div><div class="line">    uiRouter.transitionService.onError(&#123;&#125;, t =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'onError'</span>, t); <span class="comment">//路由跳转出错</span></div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过以上的各个阶段，我们可以灵活控制跳转是否继续，每个钩子函数都接受 <code>boolean</code> 和 <code>Promise&lt;boolean&gt;</code>来让我们确定是否跳转。</p>
<h2 id="3、自定义回调处理invalidState"><a href="#3、自定义回调处理invalidState" class="headerlink" title="3、自定义回调处理invalidState"></a>3、自定义回调处理invalidState</h2><p>通过以上的方式，我们实现了状态路由，也实现了路由跳转的控制。接下来，我们另辟蹊径来实现动态加载。</p>
<p>由于当我们请求不合法的state时，uiRouter都会执行到 <code>invalidCallbacks</code> 这个函数，我这里就通过它加载动态模块。</p>
<p>实现代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">configure(uiRouter: UIRouter) &#123;</div><div class="line">  ... <span class="comment">//省略不相关代码</span></div><div class="line">  uiRouter.stateProvider.invalidCallbacks = [($from$, $to$) =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve, reject) =&gt; &#123;</div><div class="line">      <span class="keyword">let</span> toStateName = $to$.name();</div><div class="line">      <span class="keyword">let</span> moduleName = <span class="keyword">this</span>._getModuleName(toStateName);</div><div class="line">      <span class="keyword">if</span> (!moduleName) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.moduleLoader.load(moduleName).then(_ =&gt; &#123;</div><div class="line">        <span class="keyword">let</span> state = uiRouter.stateService.target(toStateName);</div><div class="line">        resolve(state);</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着，再来看看moduleLoader的代码：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Injectable, Inject &#125; from <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Http&#125; from <span class="string">'@angular/http'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;UIRouter&#125; from <span class="string">'ui-router-ng2'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Injectable</span>()</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> ModuleLoader &#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> uiRouter: UIRouter;</div><div class="line">  <span class="keyword">private</span> loadedModules: Set&lt;<span class="built_in">string</span>&gt;;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: Http</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.loadedModules = <span class="keyword">new</span> Set&lt;<span class="built_in">string</span>&gt;();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setRouter(uiRouter) &#123;</div><div class="line">    <span class="keyword">this</span>.uiRouter = uiRouter;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  load(moduleName): Promise&lt;<span class="built_in">any</span>&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.loadedModules.has(moduleName)) &#123;</div><div class="line">      <span class="keyword">return</span> Promise.resolve();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve, reject) =&gt; &#123;</div><div class="line">      <span class="keyword">this</span>.http.get(<span class="string">`../dist/assets/js/<span class="subst">$&#123;moduleName&#125;</span>.js`</span>)</div><div class="line">        .toPromise()</div><div class="line">        .then(res =&gt; &#123;</div><div class="line">          <span class="keyword">let</span> mod = <span class="built_in">eval</span>(res.text());</div><div class="line">          mod.MODULE_STATES.forEach(state =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>.uiRouter.stateRegistry.register(state);</div><div class="line">          &#125;);</div><div class="line">          <span class="keyword">this</span>.loadedModules.add(moduleName);</div><div class="line">          resolve();</div><div class="line">        &#125;).catch(err =&gt; reject(err));</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过请求指定的文件，然后利用eval执行出具体的state数组，通过register方法，动态注入到我们的ui-router中。</p>
<p><strong>注意invalidCallbacks回调中的参数($from$, $to$)，必须使用这两个名字，通过分析源代码发现它是用参数名做了匹配的，如果换成其他名称，会提示注入错误。</strong></p>
<p><strong>invalidCallbacks回调中的逻辑非常关键，演示了如何获取原始要跳转的state，也演示了如何恢复继续跳转。</strong></p>
<h2 id="4、更多待探索"><a href="#4、更多待探索" class="headerlink" title="4、更多待探索"></a>4、更多待探索</h2><p>当前对 <code>ui-router-ng2</code> 的探索还不够多，另外它本身也还在beta版本，该处理方式应该还有优化空间。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[08_Angular2动态加载组件]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular2%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/08_Angular2%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="0、为什么需要动态加载"><a href="#0、为什么需要动态加载" class="headerlink" title="0、为什么需要动态加载"></a>0、为什么需要动态加载</h2><p>在一个比较大的应用程序中，我们不可能将所有的业务逻辑一次性加载出来，比较浪费资源，因为单个用户一般用不到所有的功能，这个时候，就需要部分组件动态加载了。</p>
<h2 id="1、Angular2如何动态加载组件"><a href="#1、Angular2如何动态加载组件" class="headerlink" title="1、Angular2如何动态加载组件"></a>1、Angular2如何动态加载组件</h2><p>在Angular2，有一个服务是 <code>DynamicComponentLoader</code>，我们就可以通过它来进行动态加载组件。</p>
<p>首先要使用它的话，我们必须要在providers中指定它。</p>
<p>另外，它还有一些必须的依赖，是 <code>injector</code>，当引入了这些元素之后，我们就可以实现一个加载组件的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(dynamicComponentLoader, viewContainerRef, injector) &#123;</div><div class="line">    <span class="keyword">this</span>.dynamicComponentLoader = dynamicComponentLoader;</div><div class="line">    <span class="keyword">this</span>.viewContainerRef = viewContainerRef;</div><div class="line">    <span class="keyword">this</span>.injector = injector;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//动态加载组件的方法，需要传入一个组件</span></div><div class="line">  loadComponent(component) &#123;</div><div class="line">    <span class="keyword">this</span>.viewContainerRef.clear();</div><div class="line">    <span class="keyword">this</span>.dynamicComponentLoader.loadAsRoot(component, <span class="string">'#component-container'</span>, <span class="keyword">this</span>.injector)</div><div class="line">      .then(<span class="function">(<span class="params">componentRef</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">//必须要这样来编写，否则会导致双向绑定表达式获取不到值。</span></div><div class="line">        componentRef.changeDetectorRef.detectChanges();</div><div class="line">        componentRef.onDestroy(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          componentRef.changeDetectorRef.detach();</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">return</span> componentRef;</div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在以上代码中，核心就是 <code>dynamicComponentLoader</code> 的 <code>loadAsRoot</code> 方法，这个方法里面有个参数是 <code>&#39;#component-container&#39;</code>，实际上指定将动态加载的组件放置的容器，</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">id</span>=<span class="string">"component-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过这样的方式，我们就能够动态的把组件加载到页面上了。</p>
<p><strong>注：<code>dynamicComponentLoader</code> 还有一个加载方法是 <code>loadNextToLocation(component, viewContainerRef)</code>，只需要提供要动态加载的组件和一个容器引用，就可以将组件加载到容器中了。</strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[07_Angular2使用路由]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular2%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/07_Angular2%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1/</url>
      <content type="html"><![CDATA[<h2 id="0、关于路由"><a href="#0、关于路由" class="headerlink" title="0、关于路由"></a>0、关于路由</h2><p>此处所说的路由是指URL路由（也许叫URL Rewrite）。其实是把网址（URL）映射到相关Controller、Component的这个功能。</p>
<p>Angular2的路由其实也就是URL路由，在Angular2中，有两个模块提供了路由功能，<code>@angular/router-deprecated</code> 和 <code>@angular/router</code>。</p>
<p><code>@angular/router-deprecated</code> 从名称也可以看出，它是一个过时的模块（beta版本中它的名字是 <code>angular2/router</code>，在rc版本被更名）。但疑惑的是，它一直存在于 <code>@angular</code> 包中。在这里，我主要使用 <code>@angular/router</code> 来实现路由功能。</p>
<h2 id="1、使用Angular2路由"><a href="#1、使用Angular2路由" class="headerlink" title="1、使用Angular2路由"></a>1、使用Angular2路由</h2><p>建议在根组件中配置路由。要使用路由，必须先依赖 <code>ROUTER_PROVIDERS</code>；如果要使用路由指令，必须先依赖 <code>ROUTER_DIRECTIVES</code>。</p>
<p>大概结构如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//bootstrap.ts</span></div><div class="line"><span class="keyword">import</span> &#123;provide&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;bootstrap&#125; from <span class="string">'@angular/platform-browser-dynamic'</span>;</div><div class="line"><span class="keyword">import</span> &#123;LocationStrategy, HashLocationStrategy&#125; from <span class="string">'@angular/common'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;AppComponent&#125; from <span class="string">'./app/app.component'</span>;</div><div class="line"></div><div class="line"></div><div class="line">bootstrap(AppComponent, [</div><div class="line">  provide(LocationStrategy, &#123; useClass: HashLocationStrategy &#125;)</div><div class="line">]);</div></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//app.component.ts</span></div><div class="line"><span class="keyword">import</span> &#123;Component, provide&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Routes, ROUTER_DIRECTIVES, ROUTER_PROVIDERS&#125; from <span class="string">'@angular/router'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;HomeComponent&#125; from <span class="string">'./../home/home.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123;AboutComponent&#125; from <span class="string">'./../about/about.component'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'demo-app'</span>,</div><div class="line">  template: <span class="string">`</span></div><div class="line">&lt;h3&gt;Angular2 Router Test&lt;/h3&gt;</div><div class="line">&lt;a [routerLink]="['/home']"&gt;Home&lt;/a&gt;</div><div class="line">&lt;a [routerLink]="['/about']"&gt;About&lt;/a&gt; </div><div class="line">&lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class="line">  `,</div><div class="line">  directives: [ROUTER_DIRECTIVES],</div><div class="line">  providers: [ROUTER_PROVIDERS]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="meta">@Routes</span>([</div><div class="line">  &#123; path: <span class="string">'/home'</span>, component: HomeComponent&#125;,</div><div class="line">  &#123; path: <span class="string">'/about'</span>, component: AboutComponent &#125;</div><div class="line">])</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</div><div class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'app init'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 <code>@Routes</code>，我们可以配置路由对应的组件。当然，要求这些组件必须已经存在。在配置路由节点的时候，我们仅仅需要提供 <code>path</code> 和 <code>component</code> 参数。</p>
<p>在模板中使用 <code>[routerLink]</code> 可以配置连接，它的值是一个数组，第一个元素是要导向的url，第二个参数是路由参数。</p>
<p>除了使用 <code>[routerLink]</code> 实现路由跳转，还可以使用特定服务来跳转，代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.router.navigate([<span class="string">'/about'</span>]);</div><div class="line"><span class="keyword">this</span>.router.navigateByUrl(<span class="string">'/about'</span>);</div></pre></td></tr></table></figure>
<p>当URL比较复杂，如/home/test/index时，使用navigate方式如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.router.navigate([<span class="string">'home'</span>, <span class="string">'test'</span> ,<span class="string">'index'</span>]);</div></pre></td></tr></table></figure>
<h2 id="2、路由参数"><a href="#2、路由参数" class="headerlink" title="2、路由参数"></a>2、路由参数</h2><p>有时候，我们需要给路由传递一些参数，这个时候就需要在配置路由的时候，指定参数。使用 <code>[routerLink]</code> 的方式如下:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/about', &#123;id: 1&#125;]"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>那么如何获取这个参数呢？就需要在 <code>AboutComponent</code> 组件中通过 <code>RouteSegment</code> 来获取，代码如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AboutComponent &#123;  </div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> routeSegment: RouteSegment</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'about init'</span>, <span class="string">'params:'</span>, routeSegment.parameters);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、嵌套路由（子路由）"><a href="#3、嵌套路由（子路由）" class="headerlink" title="3、嵌套路由（子路由）"></a>3、嵌套路由（子路由）</h2><p>一般来说，我们写一个中大型的应用程序，一个一级路由根本就不够使用。这个时候，就可以使用嵌套路由来把应用程序拆分成很多小的模块。</p>
<p>在这种情况下，就需要我们的子组件也需要使用 <code>@Routes</code> 来申明自己的路由体系。</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//about.component.ts</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;Component&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123;ROUTER_DIRECTIVES, Routes, RouteSegment&#125; from <span class="string">'@angular/router'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;AboutUserComponent&#125; from <span class="string">'./about-user.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123;AboutMeComponent&#125; from <span class="string">'./about-me.component'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'demo-about'</span>,</div><div class="line">  template: <span class="string">`</span></div><div class="line">  &lt;h1&gt;About&lt;/h1&gt;</div><div class="line">  &lt;a [routerLink]="['/home']"&gt;Go to Home&lt;/a&gt;</div><div class="line">  &lt;a [routerLink]="['./user', id]"&gt;Go to About User&lt;/a&gt;</div><div class="line">  &lt;a [routerLink]="['./me']"&gt;Go to About Me&lt;/a&gt;</div><div class="line">  &lt;router-outlet&gt;&lt;/router-outlet&gt;</div><div class="line">  `,</div><div class="line">  directives: [ROUTER_DIRECTIVES]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="meta">@Routes</span>([</div><div class="line">  &#123; path: <span class="string">'/'</span>, component: AboutUserComponent &#125;,</div><div class="line">  &#123; path: <span class="string">'/user/:id'</span>, component: AboutUserComponent &#125;,</div><div class="line">  &#123; path: <span class="string">'/me'</span>, component: AboutMeComponent &#125;</div><div class="line">])</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AboutComponent &#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> id: <span class="built_in">number</span> = <span class="number">1</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> routeSegment: RouteSegment</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'about init'</span>, <span class="string">'params:'</span>, routeSegment.parameters);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这段代码里，我们需要注意，<code>[routerLink]</code>的值，有些是 <code>[&#39;/home&#39;]</code>, 也有 <code>[&#39;./me]</code> 这种，它们有什么区别呢？</p>
<p>其实直接 ‘/home’ 是指从根路径开始计算，也就是跳转到父路由，真实路径就是 /home。如果是使用的 ‘./me’ 这种形式，那么是相对路径，所以点击这个链接，跳转到的实际上是 /about/me 这个地址。</p>
<h2 id="4、生命周期钩子（拦截器）"><a href="#4、生命周期钩子（拦截器）" class="headerlink" title="4、生命周期钩子（拦截器）"></a>4、生命周期钩子（拦截器）</h2><p>在路由中，我们可以通过实现 <code>CanDeactivate</code> 来控制路由是否可以被解除；还可以通过实现 <code>OnActivate</code> 来控制路由激活后的操作。</p>
<p>当我们在 <code>HomeComponent</code> 中编写如下语句时：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">routerCanDeactivate(curTree: RouteTree, futureTree: RouteTree) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'abc'</span>);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve, reject) =&gt; &#123;</div><div class="line">    resolve(<span class="literal">false</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当进入Home页之后，我们就已经无法跳出了。</p>
<p>当我们在 <code>HomeComponent</code> 中编写如下语句时：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">routerOnActivate(currSegment: RouteSegment, prev: RouteSegment, currTree: RouteTree, prevTree: RouteTree)&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'succeed'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每一次跳转到Home组件，我们都能在控制台看到输出 succeed 。 </p>
<p><strong>很遗憾的是，暂时没有发现有全局的路由钩子，这也就意味着，我们没法在一个地方控制所有的路由是否允许被解除。</strong></p>
<h2 id="5、后记"><a href="#5、后记" class="headerlink" title="5、后记"></a>5、后记</h2><p>以上就是Angular2路由的简单使用了。相关Demo，请点击 <a href="https://github.com/hstarorg/HstarDemoProject/tree/master/angular2_demo" target="_blank" rel="external">这里</a></p>
<p>在Angular2中，还有一个路由是 <code>@angular/router-deprecated</code>，它是之前的路由方式，由于已经被标注为过期，这里就不在说明，如果想了解一下，可以查看 <a href="https://github.com/hstarorg/HstarDemoProject/tree/master/angular2_demo/angular2-router-deprecated-test" target="_blank" rel="external">Demo</a></p>
<p>至于更复杂的动态路由，动态加载组件等等，未完待续…</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[06_Angular2管道（Pipe）简析]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular2%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/06_Angular2%E7%AE%A1%E9%81%93%EF%BC%88Pipe%EF%BC%89%E7%AE%80%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="0、Angular2-Pipe"><a href="#0、Angular2-Pipe" class="headerlink" title="0、Angular2 Pipe"></a>0、Angular2 Pipe</h2><p><strong>注：由于Angular2的API好不够稳定，书写该文时，采用的是Angular2 rc1（@angular rc.1）版本，其他版本请自行测试。</strong></p>
<p>对于 <code>Pipe</code>，其实我们并不陌生。在angular1中，它被称之为 <code>filter</code>。</p>
<p><code>Pipe</code>用于对数据进行格式化处理，就好比管道，一个进一头出，中间过程就是管道的处理逻辑。</p>
<p>Angular2中的 <code>Pipe</code> 本质上是包含特定方法的类。</p>
<h2 id="1、编写一个简单Pipe"><a href="#1、编写一个简单Pipe" class="headerlink" title="1、编写一个简单Pipe"></a>1、编写一个简单Pipe</h2><p><code>Pipe</code> 相对于指令和组件来说，非常简单，我们仅仅需要编写一个类：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> EmptyToZero&#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现特定的方法：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">exprt <span class="keyword">class</span> EmptyToZero&#123;</div><div class="line">  transform(v: <span class="built_in">any</span>, args: <span class="built_in">any</span>[])&#123;</div><div class="line">    <span class="keyword">if</span>(v === <span class="literal">undefined</span> || v === <span class="literal">null</span> || v === <span class="string">''</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> v;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 <code>Pipe</code> 装饰，请设定名称:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Pipe&#125; from <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Pipe</span>(&#123; name: <span class="string">'empty2zero'</span> &#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> EmptyToZero &#123;</div><div class="line">  transform(v: <span class="built_in">any</span>, args: <span class="built_in">any</span>[]) &#123;</div><div class="line">    <span class="keyword">if</span> (v === <span class="literal">undefined</span> || v === <span class="literal">null</span> || v === <span class="string">''</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> v;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如何使用？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; value | empty2zero&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然前提是要在Component中申明要使用的Pipe：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'todo-list'</span>,</div><div class="line">  template: <span class="built_in">require</span>(<span class="string">'./todo-list.component.html'</span>),</div><div class="line">  styles : [<span class="built_in">require</span>(<span class="string">'./todo-list.component.css'</span>)],</div><div class="line">  pipes:[EmptyToZero]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="2、有状态的Pipe"><a href="#2、有状态的Pipe" class="headerlink" title="2、有状态的Pipe"></a>2、有状态的Pipe</h2><p>在使用 <code>Pipe</code> 装饰器的时候，我们可以提供两个参数：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Pipe</span>(&#123;</div><div class="line">  name: <span class="string">'empty2zero'</span>, <span class="comment">//string类型，必填项，指定pipe的名称</span></div><div class="line">  pure: <span class="literal">true</span> <span class="comment">//boolean类型，可选项，默认为true，设定为true时，表示无状态管道。无论是输入或者是什么参数的改变都会触发重新计算结果。</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>有状态的 <code>Pipe</code> 可以收到一个Promise对象或者检测输入和自动订阅输入，最终返回一个可触发的值。</p>
<p>要使用有状态的管道，必须将pure属性设置为false。</p>
<p>比较典型的有状态异步管道如下：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Pipe&#125; from <span class="string">'angular2/core'</span>;</div><div class="line"><span class="meta">@Pipe</span>(&#123;</div><div class="line">    name: <span class="string">'fetch'</span>,</div><div class="line">    pure: <span class="literal">false</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> FetchJsonPipe &#123;</div><div class="line">    <span class="keyword">private</span> fetchedValue:<span class="built_in">any</span>;</div><div class="line">    <span class="keyword">private</span> fetchPromise:Promise&lt;<span class="built_in">any</span>&gt;;</div><div class="line">    transform(value:<span class="built_in">string</span>, args:<span class="built_in">string</span>[]):<span class="built_in">any</span> &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.fetchPromise) &#123;</div><div class="line">         <span class="keyword">this</span>.fetchPromise = <span class="built_in">window</span>.fetch(value)</div><div class="line">        .then((result:<span class="built_in">any</span>) =&gt; result.json())</div><div class="line">        .then((json:<span class="built_in">any</span>) =&gt; <span class="keyword">this</span>.fetchedValue = json);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fetchedValue;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[C#中处理耗时任务的几种方式]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/C#/C#%E4%B8%AD%E5%A4%84%E7%90%86%E8%80%97%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="0、准备"><a href="#0、准备" class="headerlink" title="0、准备"></a>0、准备</h2><p>首先，我们先创建几个耗时任务：</p>
<pre><code>public class TestTasks
{
    //无参、无返回值任务
    public void Task1()
    {
        Console.WriteLine(&quot;task1.&quot;);
        Thread.Sleep(5000);
        Console.WriteLine(&quot;task1 completed.&quot;);
    }

    //有参数、无返回值任务
    public void Task2(int x)
    {
        if (x &lt; 2000) 
        {
            x += 2000;
        }
        Console.WriteLine(&quot;task2.&quot;);
        Thread.Sleep(x);
        Console.WriteLine(&quot;task2 completed.&quot;);
    }

    //有参数，有返回值任务
    public int Task3(int x)
    {
        if (x &lt; 2000)
        {
            x += 2000;
        }
        Console.WriteLine(&quot;task3.&quot;);
        Thread.Sleep(x);
        Console.WriteLine(&quot;task3 completed.&quot;);
        return x;
    }
}
</code></pre><h2 id="1、创建新线程执行方法"><a href="#1、创建新线程执行方法" class="headerlink" title="1、创建新线程执行方法"></a>1、创建新线程执行方法</h2><pre><code>var tt = new TestTasks();

new Thread(tt.Task1).Start();

//针对有参数的任务，需要用Lambda进行包装或者使用ParameterizedThreadStart对象
new Thread(x=&gt;tt.Task2((int)x)).Start((object)1000);

//使用ParameterizedThreadStart，要求要执行的方法参数必须为object，同时无返回值。
//new Thread(new ParameterizedThreadStart(tt.Task2)).Start((object)1000);
</code></pre><p><strong>注意：使用该方式无法执行带返回值的方法。</strong></p>
<p><strong>推荐指数：★★</strong></p>
<h2 id="2、使用异步调用方式执行方法"><a href="#2、使用异步调用方式执行方法" class="headerlink" title="2、使用异步调用方式执行方法"></a>2、使用异步调用方式执行方法</h2><pre><code>var tt = new TestTasks();

Action ac = tt.Task1;
Action&lt;int&gt; ac2 = tt.Task2;
ac.BeginInvoke(null, null);
ac2.BeginInvoke(1000, null, null);

//以下是调用有参数，有返回值的方法
//代码一
private delegate int AsyncCaller(int x); //该代码放在方法体外部

AsyncCaller ac = new AsyncCaller(tt.Task3);
var asyncResult =  ac.BeginInvoke(1000,null,null);
int result = ac.EndInvoke(asyncResult); //接收返回值

//代码二，使用Func简化代码
Func&lt;int,int&gt; ac = tt.Task3;
var asyncResult =  ac.BeginInvoke(1000,null,null);
int result = ac.EndInvoke(asyncResult);
</code></pre><p><strong>注意：通过这种方式生成新线程是运行在后台的（background）,优先级为normal</strong></p>
<p><strong>推荐指数：★★</strong></p>
<h2 id="3、通过ThreadPool（线程池）执行方法"><a href="#3、通过ThreadPool（线程池）执行方法" class="headerlink" title="3、通过ThreadPool（线程池）执行方法"></a>3、通过ThreadPool（线程池）执行方法</h2><pre><code>var tt = new TestTasks();

ThreadPool.QueueUserWorkItem(o =&gt; tt.Task1());
ThreadPool.QueueUserWorkItem(o =&gt; tt.Task2(1000));
</code></pre><p><strong>注意：该方式不支持返回值，可以将返回值保存在引入类型的参数上，然后进行迂回实现</strong></p>
<p><strong>推荐指数：★★★</strong></p>
<h2 id="4、通过BackgroundWorker（后台Worker）执行方法"><a href="#4、通过BackgroundWorker（后台Worker）执行方法" class="headerlink" title="4、通过BackgroundWorker（后台Worker）执行方法"></a>4、通过BackgroundWorker（后台Worker）执行方法</h2><pre><code>var tt = new TestTasks();

var bw = new BackgroundWorker();
bw.DoWork += (sender, e) =&gt; tt.Task1();
bw.DoWork += (sender, e) =&gt; tt.Task2(1000);    

//要接收返回值，必须将返回值赋值给Result。
bw.DoWork += (sender, e) =&gt; e.Result = tt.Task3(1000);

bw.RunWorkerAsync();

//注册事件使用返回值
bw.RunWorkerCompleted += (sender, e) =&gt; Console.WriteLine(e.Result);
</code></pre><p><strong>注意：使用BackgroundWorker注册DoWork事件的任务只能挨个执行，如果要同时执行多个任务，需要多个BackgroundWorker。要使用返回值，一定要记得赋值给Result。</strong></p>
<p><strong>推荐指数：★★</strong></p>
<h2 id="5、同时Task执行方法"><a href="#5、同时Task执行方法" class="headerlink" title="5、同时Task执行方法"></a>5、同时Task执行方法</h2><pre><code>var tt = new TestTasks();

var t1 = Task.Factory.StartNew(tt.Task1);
var t2 = Task.Factory.StartNew(() =&gt; tt.Task2(1000));
var t3 =Task.Factory.StartNew(() =&gt; tt.Task3(1000));

//等待t1,t2,t3执行完成
Task.WaitAll(t1,t2,t3);
Console.WriteLine(t3.Result);
</code></pre><p><strong>注意：Task具有灵活的控制能力，同时可以单个等待，多个等待。</strong></p>
<p><strong>推荐指数：★★★★★</strong></p>
<h2 id="6、使用async-await执行方法"><a href="#6、使用async-await执行方法" class="headerlink" title="6、使用async/await执行方法"></a>6、使用async/await执行方法</h2><pre><code>private async void AsyncRunTask()
{
    var tt = new TestTasks();
    await Task.Factory.StartNew(tt.Task1);
    await Task.Factory.StartNew(() =&gt; tt.Task2(1000));
    var result = await Task.Factory.StartNew(() =&gt; tt.Task3(1000));
    Console.WriteLine(result);
}

AsyncRunTask();
Console.WriteLine(&quot;不用等待，我先执行了。&quot;);
</code></pre><p><strong>注意：需要Framework4.5的支持</strong></p>
<p><strong>推荐指数：★★★★</strong></p>
<h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p><strong>没有原理，没有言语，相信以大家聪明的大脑，已经学会如何在C#中执行耗时任务和使用多线程了。</strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[跟我学Angular2（1-初体验）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular2%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/%E8%B7%9F%E6%88%91%E5%AD%A6Angular2%EF%BC%881-%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>Angular1作为最流行的前端MV*框架，给前端开发带来了极大的便利性。但是，仍然有许多不好的地方已经很难再改变了。Angular团队根据WEB发展的趋势和Angular1中积累的经验来开发了一个全新的Angular，也就是Angular2。</p>
<h2 id="1、优势"><a href="#1、优势" class="headerlink" title="1、优势"></a>1、优势</h2><p>Angular2做了很激进的变化，带来的成果也是显而易见的。</p>
<ol>
<li>极大的提高了性能</li>
<li>更强大的模块化</li>
<li>改进的依赖注入</li>
<li>对Web Component友好</li>
<li>原生移动支持 - iOS 和 Android</li>
<li>服务端渲染，搜索引擎优化</li>
</ol>
<h2 id="2、工具链"><a href="#2、工具链" class="headerlink" title="2、工具链"></a>2、工具链</h2><p>由于Angular2面向未来，使用了太多还不被当前主流浏览器支持的技术，跑起来还真不是一个容易的事情，所以我们需要一个工具链：</p>
<p><img src="http://www.hubwiz.com/course/5599d367a164dd0d75929c76/img/toolchain.jpg" alt="http://www.hubwiz.com/course/5599d367a164dd0d75929c76/img/toolchain.jpg"></p>
<p>systemjs - 通用模块加载器，支持AMD、CommonJS、ES6等各种格式的JS模块加载 </p>
<p>es6-module-loader - ES6模块加载器，systemjs会自动加载这个模块 </p>
<p>traceur - ES6转码器，将ES6代码转换为当前浏览器支持的ES5代码。systemjs会自动加载 这个模块。</p>
<h2 id="3、Angular2-Hello-world"><a href="#3、Angular2-Hello-world" class="headerlink" title="3、Angular2 Hello world"></a>3、Angular2 Hello world</h2><h3 id="Step1、下载angular2"><a href="#Step1、下载angular2" class="headerlink" title="Step1、下载angular2"></a>Step1、下载angular2</h3><p><a href="https://angular.io/" target="_blank" rel="external">https://angular.io/</a>是angular2的官网，我们需要通过npm进行下载angular2： npm install angular2 <a href="https://www.npmjs.com/package/angular2" target="_blank" rel="external">https://www.npmjs.com/package/angular2</a>。</p>
<h3 id="Step2、引入angular2"><a href="#Step2、引入angular2" class="headerlink" title="Step2、引入angular2"></a>Step2、引入angular2</h3><pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;title&gt;&lt;/title&gt;
  &lt;script src=&quot;../node_modules/angular2/bundles/angular2.sfx.dev.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre><h3 id="Step3、-Hello-angular"><a href="#Step3、-Hello-angular" class="headerlink" title="Step3、 Hello angular"></a>Step3、 Hello angular</h3><pre><code>&lt;body&gt;
  &lt;app&gt;&lt;/app&gt;
  &lt;script&gt;
  var App = ng.Component({
    selector: &apos;app&apos;,
    template: &apos;&lt;h1&gt;Hello {{name}}.&lt;/h1&gt;&apos;
  }).Class({
    constructor: function() {
      this.name = &apos;Angular2&apos;;
    }
  });
  ng.bootstrap(App);
  &lt;/script&gt;
&lt;/body&gt;
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery中那些有趣的代码]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/jQuery%E6%8B%86%E8%A7%A3/jQuery%E4%B8%AD%E9%82%A3%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="0、动态执行JS代码"><a href="#0、动态执行JS代码" class="headerlink" title="0、动态执行JS代码"></a>0、动态执行JS代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DOMEval</span>(<span class="params">code, doc</span>) </span>&#123;</div><div class="line">		doc = doc || <span class="built_in">document</span>;</div><div class="line">		<span class="keyword">var</span> script = doc.createElement(<span class="string">"script"</span>);</div><div class="line">		script.text = code;</div><div class="line">		doc.head.appendChild(script).parentNode.removeChild(script);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h2>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[01-目录篇]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/jQuery%E6%8B%86%E8%A7%A3/01-%E7%9B%AE%E5%BD%95%E7%AF%87/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p><code>jQuery</code> 作为最流行的DOM操作库，已经基本上成了浏览器的事实标准。抱着学习高效dom操作的目的，我就来整个系列，来拆解下 <code>jQuery</code>。</p>
<p>在这里，我选择的当前最新版本的 <code>jQuery(3.1.1)</code> 来分析。</p>
<h2 id="1、jQuery功能块"><a href="#1、jQuery功能块" class="headerlink" title="1、jQuery功能块"></a>1、jQuery功能块</h2><p>为了简化分析过程，我将 <code>jQuery</code> 分为如下几个部分，然后针对每个部分进行单独分析。</p>
<ul>
<li>模块化加载&amp;防冲突处理</li>
<li>基础结构</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS3入门之文本与字体]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/CSS3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/CSS3%E5%85%A5%E9%97%A8%E4%B9%8B%E6%96%87%E6%9C%AC%E4%B8%8E%E5%AD%97%E4%BD%93/</url>
      <content type="html"><![CDATA[<h2 id="1、CSS3文本效果"><a href="#1、CSS3文本效果" class="headerlink" title="1、CSS3文本效果"></a>1、CSS3文本效果</h2><h3 id="1-1、text-shadow文本阴影"><a href="#1-1、text-shadow文本阴影" class="headerlink" title="1.1、text-shadow文本阴影"></a>1.1、text-shadow文本阴影</h3><p>语法：<code>text-shadow: h-shadow v-shadow blur color;</code>(&lt;水平阴影&gt;，&lt;垂直阴影&gt;，[模糊距离]，[阴影颜色])</p>
<p>示例：</p>
<pre><code>&lt;h1 style=&quot;text-shadow: 5px 5px 2px green;&quot;&gt;我是文本阴影&lt;/h1&gt;
&lt;h1 style=&quot;text-shadow: 0 0 5px blue;&quot;&gt;我是文本阴影&lt;/h1&gt;
&lt;h1 style=&quot;text-shadow: 2px 2px 4px #000000;color: white;&quot;&gt;我是文本阴影&lt;/h1&gt;
</code></pre><h1 style="text-shadow: 5px 5px 2px green;">我是文本阴影</h1>

<h1 style="text-shadow: 0 0 5px blue;">我是文本阴影</h1>

<h1 style="text-shadow: 2px 2px 4px #000000;color: white;">我是文本阴影</h1>

<p><strong>该属性兼容IE10+以及所有现代浏览器</strong></p>
<h3 id="1-2、word-break文本换行"><a href="#1-2、word-break文本换行" class="headerlink" title="1.2、word-break文本换行"></a>1.2、word-break文本换行</h3><p>语法： <code>word-break: normal|break-all|keep-all;</code></p>
<p>normal:默认换行；break-all:允许在单词内换行；keep-all:只能在半角空格或连字符处换行</p>
<p>示例：</p>
<pre><code>&lt;div style=&quot;width:100px;word-break:break-all;&quot;&gt;Nice to meet you. good mor-ning.&lt;/div&gt;
&lt;div style=&quot;width:100px;word-break:keep-all;&quot;&gt;Nice to meet you. good mor-ning.&lt;/div&gt;
</code></pre><div style="width:100px;word-break:break-all;">Nice to meet you. good mor-ning.</div><br><div style="width:100px;word-break:keep-all;">Nice to meet you. good mor-ning.</div>

<h3 id="1-3、text-overflow修剪文本"><a href="#1-3、text-overflow修剪文本" class="headerlink" title="1.3、text-overflow修剪文本"></a>1.3、text-overflow修剪文本</h3><p>语法：<code>text-overflow: clip|ellipsis|string;</code></p>
<p>示例：</p>
<pre><code>&lt;div style=&quot;width: 100px; overflow:hidden; white-space:nowrap;text-overflow: clip;&quot;&gt;Nice to meet you. good mor-ning.&lt;/div&gt;
&lt;div style=&quot;width: 100px; overflow:hidden; white-space:nowrap;text-overflow: ellipsis;&quot;&gt;Nice to meet you. good mor-ning.&lt;/div&gt;
</code></pre><div style="width: 100px; overflow:hidden; white-space:nowrap;text-overflow: clip;">Nice to meet you. good mor-ning.</div><br><div style="width: 100px; overflow:hidden; white-space:nowrap;text-overflow: ellipsis;">Nice to meet you. good mor-ning.</div>

<p><strong>注意：使用text-overflow的时候，需要与overflow:hidden;white-space:nowrap;协同使用</strong></p>
<h2 id="2、CSS3字体"><a href="#2、CSS3字体" class="headerlink" title="2、CSS3字体"></a>2、CSS3字体</h2><p>在CSS3之前，必须使用已经在用户计算机上安装好的字体，给Web设计带来很大的局限性。现在，通过CSS3,Web设计师可以使用他们喜欢的任意字体。</p>
<h3 id="2-1、-font-face引入网络字体"><a href="#2-1、-font-face引入网络字体" class="headerlink" title="2.1、@font-face引入网络字体"></a>2.1、@font-face引入网络字体</h3><p>Firefox、Chrome、Safari 以及 Opera 支持 .ttf (True Type Fonts) 和 .otf (OpenType Fonts) 类型的字体。</p>
<p>Internet Explorer 9+ 支持新的 @font-face 规则，但是仅支持 .eot 类型的字体 (Embedded OpenType)。</p>
<p>不兼容IE8，IE8-。</p>
<p>示例：</p>
<pre><code>&lt;style&gt;
    @font-face {
        font-family: SentyPaperCut;
        src:url(http://hstarcdn.github.io/fonts/SentyPaperCut.ttf);
    }
    @font-face {
        font-family:SentyCreamPuff;
        src:url(http://hstarcdn.github.io/fonts/SentyCreamPuff.otf);
    }
    .font1,.font2{
      font-size: 50px;
    }
    .font1{
      color: red;
      font-family: SentyTEA-Platinum;
    }
    .font2{
      color: blue;
      font-family: SentyCreamPuff;
    }
&lt;/style&gt;

&lt;span class=&quot;font1&quot;&gt;
  自定义字体演示
&lt;/span&gt;
&lt;span class=&quot;font2&quot;&gt;
  自定义字体演示
&lt;/span&gt;
</code></pre><style>
    @font-face {
        font-family: SentyTEA-Platinum;
        src:url(http://hstarcdn.github.io/fonts/SentyTEA-Platinum.ttf);
    }
    @font-face {
        font-family:SentyCreamPuff;
        src:url(http://hstarcdn.github.io/fonts/SentyCreamPuff.otf);
    }
    .font1,.font2{
      font-size: 50px;
    }
    .font1{
      color: red;
      font-family: SentyTEA-Platinum;
    }
    .font2{
      color: blue;
      font-family: SentyCreamPuff;
    }
</style>

<p><span class="font1"><br>  自定义字体演示<br></span><br><span class="font2"><br>  自定义字体演示<br></span></p>
<p>除此之外，在@font-face中，还可以设置多种字体描述符，如：</p>
<table class="dataintable"><br><tbody><tr><br><th style="width:20%;">描述符</th><br><th style="width:25%;">值</th><br><th>描述</th><br></tr><br><br><tr><br><td>font-family</td><br><td><i>name</i></td><br><td>必需。规定字体的名称。</td><br></tr><br><br><tr><br><td>src</td><br><td><i>URL</i></td><br><td>必需。定义字体文件的 URL。</td><br></tr><br><br><tr><br><td>font-stretch</td><br><td><br>    <ul><br>    <li>normal</li><br>    <li>condensed</li><br>    <li>ultra-condensed</li><br>    <li>extra-condensed</li><br>    <li>semi-condensed</li><br>    <li>expanded</li><br>    <li>semi-expanded</li><br>    <li>extra-expanded</li><br>    <li>ultra-expanded</li><br>    </ul><br></td><br><td>可选。定义如何拉伸字体。默认是 “normal”。</td><br></tr><br><br><tr><br><td>font-style</td><br><td><br>    <ul><br>    <li>ormal</li><br>    <li>italic</li><br>    <li>oblique</li><br>    </ul><br></td><br><td>可选。定义字体的样式。默认是 “normal”。</td><br></tr><br><br><tr><br><td>font-weight</td><br><td><br>    <ul><br>    <li>normal</li><br>    <li>bold</li><br>    <li>100</li><br>    <li>200</li><br>    <li>300</li><br>    <li>400</li><br>    <li>500</li><br>    <li>600</li><br>    <li>700</li><br>    <li>800</li><br>    <li>900</li><br>    </ul><br></td><br><td>可选。定义字体的粗细。默认是 “normal”。</td><br></tr><br><br><tr><br><td>unicode-range</td><br><td><i>unicode-range</i></td><br><td>可选。定义字体支持的 UNICODE 字符范围。默认是 “U+0-10FFFF”。</td><br></tr><br></tbody></table>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[10_Angular2模块]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular2%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/10_Angular2%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>该Angular2系列，从10开始，则对应 <code>Angular2</code> 正式版本。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS3入门之转换]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/CSS3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/CSS3%E5%85%A5%E9%97%A8%E4%B9%8B%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h2 id="1、CSS3-转换"><a href="#1、CSS3-转换" class="headerlink" title="1、CSS3 转换"></a>1、CSS3 转换</h2><h3 id="1-1、转换是什么，能实现哪些效果？"><a href="#1-1、转换是什么，能实现哪些效果？" class="headerlink" title="1.1、转换是什么，能实现哪些效果？"></a>1.1、转换是什么，能实现哪些效果？</h3><p>转换是使元素改变形状、尺寸和位置的一种效果，主要能实现的效果如下：</p>
<ol>
<li>移动</li>
<li>缩放</li>
<li>转动</li>
<li>拉长</li>
<li>拉伸</li>
</ol>
<h3 id="1-2、浏览器兼容"><a href="#1-2、浏览器兼容" class="headerlink" title="1.2、浏览器兼容"></a>1.2、浏览器兼容</h3><p>CSS3的转换属性为 <code>transform</code> ，IE10+,Firefox,Chrome,Opera,Safari等现代浏览器支持transform属性，IE9需要-ms-前缀。</p>
<h2 id="2、-2D-转换"><a href="#2、-2D-转换" class="headerlink" title="2、 2D 转换"></a>2、 2D 转换</h2><p>准备工作：</p>
<pre><code>&lt;style&gt;
  .container{
    position:relative;border:1px solid red; width: 100px; height: 100px;
  }
  .container&gt;div{
    width: 50px; height: 50px; background: gray;
  }
&lt;/style&gt;
</code></pre><style>
  .container{
    position:relative;border:1px solid red; width: 100px; height: 100px;
  }
  .container div{
    width: 50px; height: 50px; background: gray;
  }
</style>

<h3 id="2-1、translate-–-移动"><a href="#2-1、translate-–-移动" class="headerlink" title="2.1、translate() – 移动"></a>2.1、translate() – 移动</h3><p>translate(/*x坐标移动位移*/ left, /*y坐标移动位移*/ top)</p>
<pre><code>&lt;h3&gt;右移20px&lt;/h3&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div style=&quot;transform: translate(20px);&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;下移20px&lt;/h3&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div style=&quot;transform: translate(0px,20px);&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;左移20px，下移20px&lt;/h3&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div style=&quot;transform: translate(-20px,20px);&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><p></p><h3>右移20px</h3><p></p>
<div class="container"><br>  <div style="transform: translate(20px);"></div><br></div><br><h3>下移20px</h3><br><div class="container"><br>  <div style="transform: translate(0px,20px);"></div><br></div><br><h3>左移20px，下移20px</h3><br><div class="container"><br>  <div style="transform: translate(-20px,20px);"></div><br></div>

<h3 id="2-2、rotate-–-旋转"><a href="#2-2、rotate-–-旋转" class="headerlink" title="2.2、rotate() – 旋转"></a>2.2、rotate() – 旋转</h3><p>rotate(/*旋转角度*/ deg)</p>
<pre><code>&lt;h3&gt;旋转135度&lt;/h3&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div style=&quot;transform: rotate(135deg);&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><p></p><h3>旋转135度</h3><p></p>
<div class="container"><br>  <div style="transform: rotate(135deg);"></div><br></div>

<h3 id="2-3、scale-–-缩放"><a href="#2-3、scale-–-缩放" class="headerlink" title="2.3、scale() – 缩放"></a>2.3、scale() – 缩放</h3><p>scale(/*宽度缩放比例*/ widthScale, /*高度缩放比例*/ heightScale)</p>
<pre><code>&lt;h3&gt;缩放到0.5倍&lt;/h3&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div style=&quot;transform: scale(0.5, 0.5);&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;宽度缩放到1.5倍，高度缩放到0.25倍&lt;/h3&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div style=&quot;transform: scale(1.5, 0.25);&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><p></p><h3>缩放到0.5倍</h3><p></p>
<div class="container"><br>  <div style="transform: scale(0.5, 0.5);"></div><br></div><br><h3>宽度缩放到1.5倍，高度缩放到0.25倍</h3><br><div class="container"><br>  <div style="transform: scale(1.5, 0.25);"></div><br></div>

<h3 id="2-4、skew-–-倾斜"><a href="#2-4、skew-–-倾斜" class="headerlink" title="2.4、skew() – 倾斜"></a>2.4、skew() – 倾斜</h3><p>skew(/*X轴倾斜角度*/ xDeg, /*Y轴倾斜角度*/ yDeg)</p>
<pre><code>&lt;h3&gt;X轴翻转30度&lt;/h3&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div style=&quot;transform: skew(30deg);&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;X轴翻转30度，Y轴翻转10度&lt;/h3&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div style=&quot;transform: skew(30deg, 10deg)&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><p></p><h3>X轴翻转30度</h3><p></p>
<div class="container"><br>  <div style="transform: skew(30deg);"></div><br></div><br><h3>X轴翻转30度，Y轴翻转10度</h3><br><div class="container"><br>  <div style="transform: skew(30deg, 10deg)"></div><br></div>

<h3 id="2-5、matrix-–矩阵"><a href="#2-5、matrix-–矩阵" class="headerlink" title="2.5、matrix() –矩阵"></a>2.5、matrix() –矩阵</h3><pre><code>&lt;h3&gt;旋转30度&lt;/h3&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div style=&quot;transform: matrix(0.866,0.5,-0.5,0.866,0,0)&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre><p></p><h3>旋转30度</h3><p></p>
<div class="container"><br>  <div style="transform: matrix(0.866,0.5,-0.5,0.866,0,0)"></div><br></div>


<h3 id="2-6-Transform方法"><a href="#2-6-Transform方法" class="headerlink" title="2.6 Transform方法"></a>2.6 Transform方法</h3><table class="dataintable"><br><tbody><tr><br><th style="width:25%;">函数</th><br><th>描述</th><br></tr><br><br><tr><br><td>matrix(<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>)</td><br><td>定义 2D 转换，使用六个值的矩阵。</td><br></tr><br><br><tr><br><td>translate(<i>x</i>,<i>y</i>)</td><br><td>定义 2D 转换，沿着 X 和 Y 轴移动元素。</td><br></tr><br><br><tr><br><td>translateX(<i>n</i>)</td><br><td>定义 2D 转换，沿着 X 轴移动元素。</td><br></tr><br><br><tr><br><td>translateY(<i>n</i>)</td><br><td>定义 2D 转换，沿着 Y 轴移动元素。</td><br></tr><br><br><tr><br><td>scale(<i>x</i>,<i>y</i>)</td><br><td>定义 2D 缩放转换，改变元素的宽度和高度。</td><br></tr><br><br><tr><br><td>scaleX(<i>n</i>)</td><br><td>定义 2D 缩放转换，改变元素的宽度。</td><br></tr><br><br><tr><br><td>scaleY(<i>n</i>)</td><br><td>定义 2D 缩放转换，改变元素的高度。</td><br></tr><br><br><tr><br><td>rotate(<i>angle</i>)</td><br><td>定义 2D 旋转，在参数中规定角度。</td><br></tr><br><br><tr><br><td>skew(<i>x-angle</i>,<i>y-angle</i>)</td><br><td>定义 2D 倾斜转换，沿着 X 和 Y 轴。</td><br></tr><br><br><tr><br><td>skewX(<i>angle</i>)</td><br><td>定义 2D 倾斜转换，沿着 X 轴。</td><br></tr><br><br><tr><br><td>skewY(<i>angle</i>)</td><br><td>定义 2D 倾斜转换，沿着 Y 轴。</td><br></tr><br></tbody></table>


<h2 id="3、3D-转换"><a href="#3、3D-转换" class="headerlink" title="3、3D 转换"></a>3、3D 转换</h2><h3 id="3-1、rotateX、rotateY"><a href="#3-1、rotateX、rotateY" class="headerlink" title="3.1、rotateX、rotateY"></a>3.1、rotateX、rotateY</h3><pre><code>&lt;div class=&quot;container&quot;&gt;
  &lt;div style=&quot;transform: rotateY(0deg)&quot; id=&quot;fun2&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;  
function fun2 (element) {
  var i = 0;
  var interval = setInterval(function(){
    element.style.transform = &apos;rotateY(&apos; + i + &apos;deg)&apos;;
    i++;
  }, 5);
}
fun2(document.getElementById(&apos;fun2&apos;));
&lt;/script&gt;
</code></pre><p><div class="container"><br>  <div style="transform: rotateY(0deg)" id="fun2"></div><br></div></p>
<script>  
function fun2 (element) {
  var i = 0;
  var interval = setInterval(function(){
    element.style.transform = 'rotateY(' + i + 'deg)';
    i++;
  }, 5);
}
fun2(document.getElementById('fun2'));
</script>

<h3 id="3-2、Transform方法"><a href="#3-2、Transform方法" class="headerlink" title="3.2、Transform方法"></a>3.2、Transform方法</h3><table class="dataintable"><br><tbody><tr><br><th style="width:25%;">函数</th><br><th>描述</th><br></tr><br><br><tr><br><td>matrix3d(<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<br><i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>)</td><br><td>定义 3D 转换，使用 16 个值的 4x4 矩阵。</td><br></tr><br><br><tr><br><td>translate3d(<i>x</i>,<i>y</i>,<i>z</i>)</td><br><td>定义 3D 转化。</td><br></tr><br><br><tr><br><td>translateX(<i>x</i>)</td><br><td>定义 3D 转化，仅使用用于 X 轴的值。</td><br></tr><br><br><tr><br><td>translateY(<i>y</i>)</td><br><td>定义 3D 转化，仅使用用于 Y 轴的值。</td><br></tr><br><br><tr><br><td>translateZ(<i>z</i>)</td><br><td>定义 3D 转化，仅使用用于 Z 轴的值。</td><br></tr><br><br><tr><br><td>scale3d(<i>x</i>,<i>y</i>,<i>z</i>)</td><br><td>定义 3D 缩放转换。</td><br></tr><br><br><tr><br><td>scaleX(<i>x</i>)</td><br><td>定义 3D 缩放转换，通过给定一个 X 轴的值。</td><br></tr><br><br><tr><br><td>scaleY(<i>y</i>)</td><br><td>定义 3D 缩放转换，通过给定一个 Y 轴的值。</td><br></tr><br><br><tr><br><td>scaleZ(<i>z</i>)</td><br><td>定义 3D 缩放转换，通过给定一个 Z 轴的值。</td><br></tr><br><br><tr><br><td>rotate3d(<i>x</i>,<i>y</i>,<i>z</i>,<i>angle</i>)</td><br><td>定义 3D 旋转。</td><br></tr><br><br><tr><br><td>rotateX(<i>angle</i>)</td><br><td>定义沿 X 轴的 3D 旋转。</td><br></tr><br><br><tr><br><td>rotateY(<i>angle</i>)</td><br><td>定义沿 Y 轴的 3D 旋转。</td><br></tr><br><br><tr><br><td>rotateZ(<i>angle</i>)</td><br><td>定义沿 Z 轴的 3D 旋转。</td><br></tr><br><br><tr><br><td>perspective(<i>n</i>)</td><br><td>定义 3D 转换元素的透视视图。</td><br></tr><br></tbody></table>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular2踩坑大全]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular2%E4%B8%80%E8%B7%AF%E5%90%91%E5%89%8D/Angular2%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<h2 id="Angular2的那些坑"><a href="#Angular2的那些坑" class="headerlink" title="Angular2的那些坑"></a>Angular2的那些坑</h2><p>1、同样的代码，引用Rxjs库的版本不对，就会导致在IE11下无法运行。(特定版本下重现)<br>正确的版本：<a href="https://code.angularjs.org/2.0.0-beta.12/Rx.js" target="_blank" rel="external">https://code.angularjs.org/2.0.0-beta.12/Rx.js</a></p>
<p>2、在使用TypeScript编写Angular2代码时，一定要将注意 <code>tsconfig.json</code>，其中 <code>experimentalDecorators</code> 和 <code>emitDecoratorMetadata</code> 必须要设置为true，否则无法使用依赖注入。</p>
<p>3、&lt;router-outlet&gt; 不能放在带有 *ngIf的容器内，否则会出现初始化时无法找到。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS3入门之边框与背景]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/CSS3%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/CSS3%E5%85%A5%E9%97%A8%E4%B9%8B%E8%BE%B9%E6%A1%86%E4%B8%8E%E8%83%8C%E6%99%AF/</url>
      <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>CSS3作为CSS的最新版本，在展示效果上有非常大的提升，接下来，我们就一起领略一下CSS3的风采吧。</p>
<h2 id="2、CSS3边框"><a href="#2、CSS3边框" class="headerlink" title="2、CSS3边框"></a>2、CSS3边框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">    .td&#123;</div><div class="line">      width: 200px;</div><div class="line">      height: 100px;</div><div class="line">      border: 1px solid black;</div><div class="line">      margin: 10px 0; </div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="2-1、border-radius-用于设置圆角边框"><a href="#2-1、border-radius-用于设置圆角边框" class="headerlink" title="2.1、border-radius(用于设置圆角边框)"></a>2.1、border-radius(用于设置圆角边框)</h3><p>在CSS2时代，要想实现圆角边框，是一件非常麻烦的事情。一种实现方式是使用一个背景图片，为了实现伸缩效果，还需要至少3张图片拼凑，相当麻烦。另外一种实现方式是使用多个div重叠来实现圆角。</p>
<p>在CSS3中，有一个非常简单的属性，那就是border-radius。</p>
<p>语法： <code>border-radius: 1-4 length|% / 1-4 length|%;</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">border-radius: 10px;</div><div class="line">//等价于</div><div class="line">border-top-left-radius:10px;</div><div class="line">border-top-right-radius:10px;</div><div class="line">border-bottom-right-radius:10px;</div><div class="line">border-bottom-left-radius:10px;</div></pre></td></tr></table></figure>
<div style="border-radius:10px;"><br>    演示圆角边框<br></div>

<div style="border-radius:10px;"><br>    演示圆角边框<br></div>

<p><strong>兼容性说明：</strong> IE9+，Chrome,FF,Safari,Oprea<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">&#123;</div><div class="line">  border:2px solid;</div><div class="line">  border-radius:25px;</div><div class="line">  -moz-border-radius:25px; /* Old Firefox */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-2、box-shadow-用于添加边框阴影"><a href="#2-2、box-shadow-用于添加边框阴影" class="headerlink" title="2.2、box-shadow(用于添加边框阴影)"></a>2.2、box-shadow(用于添加边框阴影)</h3><p>语法： <code>box-shadow: h-shadow v-shadow blur spread color inset;</code>,其中h-shadow和v-shadow是必须设置，允许负值。【参数说明：水平阴影的位置，垂直阴影的位置，模糊距离，阴影的尺寸，阴影的颜色，外部引用(outset)改为内部阴影】</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"td"</span> <span class="attr">style</span>=<span class="string">"border-radius:10px; border: 1px solid red;"</span>&gt;</span></div><div class="line">    演示圆角边框</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"td"</span> <span class="attr">style</span>=<span class="string">"box-shadow: 2px 2px red;"</span>&gt;</span></div><div class="line">	简单阴影</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"td"</span> <span class="attr">style</span>=<span class="string">"box-shadow: -2px -2px red;"</span>&gt;</span></div><div class="line">  简单阴影</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"td"</span> <span class="attr">style</span>=<span class="string">"box-shadow: -2px -2px red;"</span>&gt;</span></div><div class="line">	简单阴影</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"td"</span> <span class="attr">style</span>=<span class="string">"box-shadow: -2px -2px 10px red;"</span>&gt;</span></div><div class="line">  带模糊效果的阴影</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"td"</span> <span class="attr">style</span>=<span class="string">"box-shadow: -2px -2px 10px red;"</span>&gt;</span></div><div class="line">    带模糊效果的阴影</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"td"</span> <span class="attr">style</span>=<span class="string">"box-shadow: 2px 2px 10px 10px red;"</span>&gt;</span></div><div class="line">  带模糊效果指定尺寸的阴影</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"td"</span> <span class="attr">style</span>=<span class="string">"box-shadow: 2px 2px 10px 10px red;"</span>&gt;</span></div><div class="line">	带模糊效果指定尺寸的阴影</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"td"</span> <span class="attr">style</span>=<span class="string">"box-shadow: 2px 2px 10px 10px red inset;"</span>&gt;</span></div><div class="line">  内部阴影</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"td"</span> <span class="attr">style</span>=<span class="string">"box-shadow: 2px 2px 10px 10px red inset;"</span>&gt;</span></div><div class="line">    内部阴影</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>兼容性说明：</strong> IE9+，Chrome,FF,Safari,Oprea</p>
<h3 id="2-3、border-image-CSS3边框图片"><a href="#2-3、border-image-CSS3边框图片" class="headerlink" title="2.3、border-image(CSS3边框图片)"></a>2.3、border-image(CSS3边框图片)</h3><p>border-image是简写属性，全部是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">border-image-source  //背景图片源</div><div class="line">border-image-slice  //图片边框内偏移</div><div class="line">border-image-width  //图片边框的宽度</div><div class="line">border-image-outset  //边框图像区域超出边框的量</div><div class="line">border-image-repeat  //边框是否适应平铺(repeated)、铺满(rounded)、拉伸(stretched)</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border-width:10px;border-image: url(http://www.w3school.com.cn/i/border.png) 10 10 round;"</span>&gt;</span></div><div class="line">  简单图片边框</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border-width:10px;border-image: url(http://www.w3school.com.cn/i/border.png) 10 10 round"</span>&gt;</span></div><div class="line">	简单图片边框</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border-width:10px;border-image: url(http://www.w3school.com.cn/i/border.png) 10 10 50 round"</span>&gt;</span></div><div class="line">  完全设置的图片边框</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border-width:10px;border-image: url(http://www.w3school.com.cn/i/border.png) 10 10 50 round"</span>&gt;</span></div><div class="line">完全设置的图片边框</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>兼容性说明：</strong> Chrome,FF,Safari,Oprea<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">div</div><div class="line">&#123;</div><div class="line">  border-image:url(border.png) 30 30 round;</div><div class="line">  -moz-border-image:url(border.png) 30 30 round; /* 老的 Firefox */</div><div class="line">  -webkit-border-image:url(border.png) 30 30 round; /* Safari 和 Chrome */</div><div class="line">  -o-border-image:url(border.png) 30 30 round; /* Opera */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3、CSS3背景"><a href="#3、CSS3背景" class="headerlink" title="3、CSS3背景"></a>3、CSS3背景</h2><h3 id="整体兼容性"><a href="#整体兼容性" class="headerlink" title="整体兼容性"></a>整体兼容性</h3><p>以下CSS背景的特性，全部支持IE9+,FF,Chrome,Safari,Oprea</p>
<h3 id="3-1、background-size-用于规定背景图片的尺寸"><a href="#3-1、background-size-用于规定背景图片的尺寸" class="headerlink" title="3.1、background-size(用于规定背景图片的尺寸)"></a>3.1、background-size(用于规定背景图片的尺寸)</h3><p>在以前的CSS中，背景图片的大小，是由图片本身的大小决定的。在CSS3中，有一个简单的CSS样式可以设置背景图片的大小，允许我们在不同的环境中重复使用背景图片。可以以像素或百分比规定尺寸。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"</span></span></div><div class="line">  background-image:url(http://www.w3school.com.cn/i/bg_flower_small.gif);</div><div class="line">  background-size: 50% 70%;</div><div class="line">  background-repeat:no-repeat;"&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-image:url(http://www.w3school.com.cn/i/bg_flower_small.gif);background-size: 50% 70%;background-repeat:no-repeat;"</span>&gt;</span></div><div class="line">	简单设置背景图大小</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="3-2、background-origin-规定背景图片的定位区域"><a href="#3-2、background-origin-规定背景图片的定位区域" class="headerlink" title="3.2、background-origin(规定背景图片的定位区域)"></a>3.2、background-origin(规定背景图片的定位区域)</h3><p>盒子模型示意图：<br><img src="http://www.w3school.com.cn/i/background-origin.gif" alt="box"></p>
<p>background-origin属性则可以设置背景图片放置于哪个区域上（content-box,padding-box,border-box）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:66px;height:125px;</span></span></div><div class="line">background-image:url(http://www.w3school.com.cn/i/bg_flower_small.gif);</div><div class="line">background-origin:content-box; </div><div class="line">padding: 20px;border:20px solid red;"&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:66px;height:125px;</span></span></div><div class="line">background-image:url(http://www.w3school.com.cn/i/bg_flower_small.gif);</div><div class="line">background-origin:border-box; </div><div class="line">padding: 20px;border:20px solid red;"&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:66px;height:125px;</span></span></div><div class="line">background-image:url(http://www.w3school.com.cn/i/bg_flower_small.gif);</div><div class="line">background-origin:padding-box;</div><div class="line">padding: 20px;border:20px solid red;"&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-3、多重背景"><a href="#3-3、多重背景" class="headerlink" title="3.3、多重背景"></a>3.3、多重背景</h3><p>可以针对标签设置多个背景，用法如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span></div><div class="line">&#123; </div><div class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(bg_flower.gif),<span class="built_in">url</span>(bg_flower_2.gif);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular再回首(1)-Component组件]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Angular%E7%9B%B8%E5%85%B3/Angular%E5%86%8D%E5%9B%9E%E9%A6%96(1)-Component%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="0、再谈组件"><a href="#0、再谈组件" class="headerlink" title="0、再谈组件"></a>0、再谈组件</h2><p><code>Component(组件)</code> 在 <code>Angular1</code> 就已经有雏形了，那就是指令。在 <code>Angular2</code> 中，组件的概念被大大的强化，甚至是Angular2的核心概念。</p>
<p>在前端这么多年的演变中，组件也反哺到 <code>Angular1</code>，成为 <code>Angular1</code> 的一种重要特性，在此之前，我们仅仅可以用 <code>Directive</code> 来实现类似组件的效果。</p>
<h2 id="1、Angular组件与指令"><a href="#1、Angular组件与指令" class="headerlink" title="1、Angular组件与指令"></a>1、Angular组件与指令</h2><p>在 <code>Angular 1.5.x</code> 中，新增加了 <code>angular.component</code> 方法，用于实现组件的构造。</p>
<p>在此之前，我们可能用 <code>angular.directive</code> 来实现类似的效果。</p>
<p>这个时候我们可能就会疑惑，它们有什么区别呢？</p>
<table>
<thead>
<tr>
<th>Feature</th>
<th>Directive</th>
<th>Component</th>
</tr>
</thead>
<tbody>
<tr>
<td>bindings</td>
<td>No</td>
<td>Yes (binds to controller)</td>
</tr>
<tr>
<td>bindToController</td>
<td>Yes</td>
<td>(default: false)    No (use bindings instead)</td>
</tr>
<tr>
<td>compile function</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>controller</td>
<td>Yes</td>
<td>Yes (default function() {})</td>
</tr>
<tr>
<td>controllerAs</td>
<td>Yes</td>
<td>(default: false)    Yes (default: $ctrl)</td>
</tr>
<tr>
<td>link functions</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>multiElement</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>priority</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>require</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>restrict</td>
<td>Yes</td>
<td>No (restricted to elements only)</td>
</tr>
<tr>
<td>scope</td>
<td>Yes (default: false)</td>
<td>No (scope is always isolate)</td>
</tr>
<tr>
<td>template</td>
<td>Yes</td>
<td>Yes, injectable</td>
</tr>
<tr>
<td>templateNamespace</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>templateUrl</td>
<td>Yes</td>
<td>Yes, injectable</td>
</tr>
<tr>
<td>terminal</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>transclude</td>
<td>Yes (default: false)</td>
<td>Yes (default: false)</td>
</tr>
</tbody>
</table>
<p>更多信息，请参考 <a href="https://docs.angularjs.org/guide/component" target="_blank" rel="external">Angular 官方说明</a></p>
<p>从上表我们可以看出，对于 <code>Directive</code>，<code>Component</code> 从设计思路上更加完善，也更加纯粹。总得来说，组件显得更易理解，更简单易用。</p>
<h2 id="2、组件生命周期"><a href="#2、组件生命周期" class="headerlink" title="2、组件生命周期"></a>2、组件生命周期</h2><p>在 <code>angular.directive()</code> 中，是没有生命周期这个概念的，我们无法在指令的特定阶段插入自己的逻辑。</p>
<p>但是在 <code>angular.component()</code> 中，则是具有特定的生命周期，以方便我们进行控制。</p>
<p>生命周期如下：</p>
<ol>
<li>$onInit  – 指令初始化时执行（放置初始化代码）</li>
<li>$onChanges(changesObj)  – 组件数据变化时执行，并可获取变更对象</li>
<li>$doCheck() – 执行变更检测时执行</li>
<li>$onDestroy() – 组件释放时执行（放置清理代码）</li>
<li>$postLink() – 类似后连接函数 （一般放置dom操作，因为此时组件已经渲染好）</li>
</ol>
<p>实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">(<span class="function">(<span class="params">angular, <span class="built_in">window</span></span>) =&gt;</span> &#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AlertComponent</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $onInit() &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'init'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $onChanges(changesObj)</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'change'</span>, changesObj);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $doCheck() &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'check'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $onDestroy() &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'destroy'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $postLink() &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'post link'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  AlertComponent.$inject = []; <span class="comment">// 配置依赖项</span></div><div class="line"></div><div class="line">  angular.module(<span class="string">'components'</span>).component(<span class="string">'jAlert'</span>, &#123;</div><div class="line">    <span class="attr">templateUrl</span>: <span class="string">'components/alert/alert.html'</span>,</div><div class="line">    <span class="comment">// scope绑定语法，&lt; 单向绑定（变量），@ 单向绑定（纯字符串）， = 双向绑定，&amp; 事件绑定</span></div><div class="line">    bindings: &#123;</div><div class="line">      <span class="attr">menuData</span>: <span class="string">'&lt;'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">controller</span>: AlertComponent,</div><div class="line">    <span class="attr">controllerAs</span>: <span class="string">'$ctrl'</span>,</div><div class="line">    <span class="attr">require</span>: <span class="string">''</span>,</div><div class="line">    <span class="attr">transclude</span>: <span class="literal">false</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;)(<span class="built_in">window</span>.angular, <span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p>在页面使用该指令后，可以在控制台看出如下输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">init</div><div class="line">check</div><div class="line">post link</div><div class="line">N个check（脏检查）</div></pre></td></tr></table></figure>
<p>在切换路由，或者其他会删掉该组件的操作时，会看出控制台输出 <code>destroy</code>。</p>
<p>如果中途有数据变化，控制台还会输出 <code>change</code>。 </p>
<p>这就是整个组件的生命周期。</p>
<h2 id="3、属性绑定"><a href="#3、属性绑定" class="headerlink" title="3、属性绑定"></a>3、属性绑定</h2><p>在 <code>directive</code> 中，我们要获取数据，一般会采用 <code>$scope</code> 传参，或者通过link函数来捕获参数。</p>
<p>在新的组件申明中，我们只需要通过 <code>bindings</code> 就可以实现复杂的参数绑定。</p>
<p>简单思考下，我们可能需要哪些绑定呢？</p>
<ol>
<li>双向绑定 （双向）</li>
<li>单向绑定变量 （从外到内）</li>
<li>单向绑定属性（字符串）（从外到内）</li>
<li>输出绑定 （从内到外）</li>
</ol>
<p>在组件的 <code>bindings</code> 属性中，我们也刚好有四种语法，来一一对应这四种绑定。</p>
<p>具体写法如下： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bindings: &#123;</div><div class="line">  <span class="attr">model</span>: <span class="string">'='</span>,  <span class="comment">// 双向绑定</span></div><div class="line">  title: <span class="string">'@'</span>,  <span class="comment">// 单项绑定字符串（直接用组件上的属性值）</span></div><div class="line">  key: <span class="string">'&lt;'</span>,  <span class="comment">// 单项绑定变量，取到属性值，然后返回$scope[属性值]</span></div><div class="line">  onClick: <span class="string">'&amp;'</span>  <span class="comment">// 输出绑定，执行外部函数</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设组件标签为 <code>&lt;j-test&gt;</code>，那么用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$scope = &#123;</div><div class="line">  <span class="attr">model</span>: <span class="string">'1'</span>,</div><div class="line">  <span class="attr">key</span>: <span class="string">'abc'</span>,</div><div class="line">  <span class="attr">onClick</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">j-test</span> <span class="attr">model</span>=<span class="string">"model"</span> <span class="attr">key</span>=<span class="string">"key"</span> <span class="attr">title</span>=<span class="string">"Title"</span> <span class="attr">on-click</span>=<span class="string">"onClick()"</span>&gt;</span><span class="tag">&lt;/<span class="name">j-test</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此时，我们在组件中，就能获取到对应的值： </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">model</span>: <span class="number">1</span>, <span class="comment">// 从scope中取</span></div><div class="line">  key: <span class="string">'abc'</span>, <span class="comment">// 从scope中取</span></div><div class="line">  title: <span class="string">'Title'</span>, <span class="comment">// 直接用string</span></div><div class="line">  onClick: fn <span class="comment">// 执行该onClick会触发外部函数$scope.onClick</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：关于输出函数传递参数，需要有特定的写法（一定要注意！！！）</strong></p>
<p><em>在组件中的写法</em></p>
<p>在组件中，要给该函数传参，必须使用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.onClick(&#123;</div><div class="line">  <span class="attr">param1</span>: <span class="string">'xxx'</span>,</div><div class="line">  <span class="attr">param2</span>: <span class="string">'BBB'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>的写法，并建议参数名使用 <code>$</code> 开头，如：<code>$event</code>。</p>
<p><em>在组件绑定中的写法</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">j-test</span> <span class="attr">model</span>=<span class="string">"model"</span> <span class="attr">key</span>=<span class="string">"key"</span> <span class="attr">title</span>=<span class="string">"Title"</span> <span class="attr">on-click</span>=<span class="string">"onClick(param1, param2)"</span>&gt;</span><span class="tag">&lt;/<span class="name">j-test</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意onClick的写法，里面的参数名称，必须和组件中参数对象中的key匹配。</p>
<h2 id="4、给组件设定外部HTML"><a href="#4、给组件设定外部HTML" class="headerlink" title="4、给组件设定外部HTML"></a>4、给组件设定外部HTML</h2><p>在使用组件过程中，我相信很容易遇到需要使用外部html的组件，如 <code>Tabs, Panel</code> 等，那我们给组件内部传入自定义的HTML呢？</p>
<p>这个时候，我们可以使用 <code>ng-transclude</code></p>
<h3 id="4-1、传递单个HTML片段"><a href="#4-1、传递单个HTML片段" class="headerlink" title="4.1、传递单个HTML片段"></a>4.1、传递单个HTML片段</h3><p>首先，主要在注册组件时，开启 <code>transclude</code>（设置transclude为true），然后我们就可以在组件html中，设定占位符，有如下两种方式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 占位符1 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-transclude</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 占位符2 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ng-transclude</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-transclude</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在使用组件的地方，就可以直接把要使用的HTML放在组件标记中，如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">j-test</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>我会被传递到主键内部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">j-test</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="4-2、传递多个HTML片段"><a href="#4-2、传递多个HTML片段" class="headerlink" title="4.2、传递多个HTML片段"></a>4.2、传递多个HTML片段</h3><p>以上，我们知道了如何传递单个HTML片段，但传递多个HTML片段也是非常有必要的，如 <code>Dialog</code>组件，<br>我们很可能会传递 <code>dialog-header</code>, <code>dialog-body</code> 等等，那此时又应如何呢？</p>
<p>这个场景，我们可以借助 <code>ng-transclude</code> 的 <code>slot</code> 功能实现，</p>
<p>首先，是占位符的变化，如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 占位符1 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-transclude</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-transclude</span>=<span class="string">"body"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 占位符2 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ng-transclude</span> <span class="attr">ng-transclude-slot</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-transclude</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ng-transclude</span> <span class="attr">ng-transclude-slot</span>=<span class="string">"body"</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-transclude</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其次是组件配置的变化，因为有多个 <code>transclude</code>，那么仅仅设置为 <code>true</code>，就不太能满足需求了。<br>需要修改如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">transclude: &#123;</div><div class="line">  <span class="attr">header</span>: <span class="string">'?panelHeader'</span>, <span class="comment">// panelHeader表示内部标签，?表示是可选的</span></div><div class="line">  body: <span class="string">'panelBody'</span> <span class="comment">// 没有问号，表示该节点必选</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，就应该是调用时的改变，调用如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">j-panel</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">panel-header</span>&gt;</span></div><div class="line">    我是Panel Header（可选）</div><div class="line">  <span class="tag">&lt;/<span class="name">panel-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">panel-body</span>&gt;</span></div><div class="line">    我是Panel Body（必须）</div><div class="line">  <span class="tag">&lt;/<span class="name">panel-body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">j-panel</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="5、组件-require"><a href="#5、组件-require" class="headerlink" title="5、组件 require"></a>5、组件 <code>require</code></h2><p>同 <code>Directive</code> 一样，组件也可以相互依赖，只需要在注册组件时，设置require属性即可，写法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>: &#123;</div><div class="line">  <span class="attr">componentCtrl</span>: <span class="string">'^parentComponent'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6、小结"><a href="#6、小结" class="headerlink" title="6、小结"></a>6、小结</h2><p>新增的 <code>angular.component</code> 就是这么一个东西，比起 <code>directive</code> 更加纯粹，更加强大，更加易用。<br>建议在后续使用中，多多尝试该方式。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[01_初识Canvas，绘制简单图形]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/Canvas%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/01_%E5%88%9D%E8%AF%86Canvas%EF%BC%8C%E7%BB%98%E5%88%B6%E7%AE%80%E5%8D%95%E5%9B%BE%E5%BD%A2/</url>
      <content type="html"><![CDATA[<h2 id="0、关于Canvas"><a href="#0、关于Canvas" class="headerlink" title="0、关于Canvas"></a>0、关于Canvas</h2><p><code>&lt;canvas&gt;</code> 是HTML5新增的一个标签，用于定义图形，比如图表和其他图像。</p>
<p><code>&lt;canvas&gt;</code> 标签只是图形容器，必须要使用脚本来绘制图形。</p>
<p>一句话概括就是：<code>&lt;canvas&gt;</code> 是浏览器上的画图，允许你通过js自由作画。</p>
<h3 id="Canvas和SVG与VML的不同"><a href="#Canvas和SVG与VML的不同" class="headerlink" title="Canvas和SVG与VML的不同"></a>Canvas和SVG与VML的不同</h3><p><code>&lt;canvas&gt;</code> 有一个基于JS的绘图API，它本身并不会绘制图形。SVG和VML都是用一个XML文档来描述图形。</p>
<p>虽然它们在功能上基本相同，但是从表面上来看，它们非常不同。SVG和VML绘图易于编辑，只需要从描述中修改元素属性。而Canvas想移除元素，往往需要擦掉绘图重新绘制它。</p>
<h3 id="Canvas兼容HTML5标准属性和事件"><a href="#Canvas兼容HTML5标准属性和事件" class="headerlink" title="Canvas兼容HTML5标准属性和事件"></a>Canvas兼容HTML5标准属性和事件</h3><p><code>&lt;canvas&gt;</code> 作为一个HTML的新标签，标准的HTML属性和事件它都支持。比如可以设置 <code>title、style、class</code> 等属性，也可以使用诸如 <code>onclick</code> 等事件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Canvas Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">body</span>&#123;</div><div class="line">      <span class="attribute">text-align</span>: center;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.c1</span>&#123;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">      <span class="attribute">height</span>: <span class="number">600px</span>;</div><div class="line">      <span class="attribute">width</span>: <span class="number">800px</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"c1"</span> <span class="attr">onclick</span>=<span class="string">"alert('abc')"</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="1、使用Canvas"><a href="#1、使用Canvas" class="headerlink" title="1、使用Canvas"></a>1、使用Canvas</h2><p>要使用<code>canvas</code>，首先，我们先得html中加入canvas标签。最好，再加上一个id属性（也可以不加，只是查找该元素要稍微麻烦点）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"c1"</span> <span class="attr">onclick</span>=<span class="string">"alert('abc')"</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> c1 =<span class="built_in">document</span>.getElementById(<span class="string">'c1'</span>);</div><div class="line">    <span class="comment">// 如果不用id属性，我们可以用如下方式来获取canvas对象</span></div><div class="line">    <span class="comment">//var c1 = document.getElementsByTagName('canvas')[0]; </span></div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>在获取到 <code>canvas</code> 元素之后，我们需要通过 <code>getContext(contextID)</code> 方法获取到画布。</p>
<p>当前 <code>contextID</code>的值仅仅可以用’2d’，在未来，可能会允许传递’3d’，来进行三维绘图。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"c1"</span> <span class="attr">onclick</span>=<span class="string">"alert('abc')"</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> c1 =<span class="built_in">document</span>.getElementById(<span class="string">'c1'</span>);</div><div class="line">    <span class="comment">// 如果不用id属性，我们可以用如下方式来获取canvas对象</span></div><div class="line">    <span class="comment">//var c1 = document.getElementsByTagName('canvas')[0];</span></div><div class="line">    <span class="keyword">var</span> context = c1.getContext(<span class="string">'2d'</span>);</div><div class="line">    <span class="built_in">console</span>.log(context); <span class="comment">//可以看到context是一个CanvasRenderingContext2D对象</span></div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p><code>CanvasRenderingContext2D</code> 对象实现了一个画布所使用的大多数方法。现在我们就需要对它来进行使用，将图像绘制到浏览器上。</p>
<h3 id="1-1、绘制矩形"><a href="#1-1、绘制矩形" class="headerlink" title="1.1、绘制矩形"></a>1.1、绘制矩形</h3><p>关于矩形的绘制，主要有三个方法：</p>
<ul>
<li>fillRect(x, y, width, height) 用于填充矩形</li>
<li>strokeRect(x, y, width, height) 用于绘制矩形边框</li>
<li>clearRect(x, y, width, height) 用于清空矩形区域（设置矩形区域为空白）</li>
</ul>
<p>其中 <code>x,y</code>表示从那个点开始绘制。<code>width,height</code> 表示矩形的宽度和高度。</p>
<p>要设置矩形的填充颜色，需要通过 <code>fillStyle</code> 来控制，支持 <code>&#39;red&#39;, &#39;#fff&#39;, &#39;rgb(10,10,10)&#39;, &#39;rgba(10,10,10,10,0.5)&#39;</code>等多种颜色属性。</p>
<p>要设置矩形的边框颜色，需要通过 <code>strokeStyle</code> 来控制，属性值和 <code>fillStyle</code> 一致。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">//绘制红色矩形</span></div><div class="line">context.fillStyle = <span class="string">'red'</span>; </div><div class="line">context.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="comment">//绘制蓝色矩形框</span></div><div class="line">context.strokeStyle = <span class="string">'blue'</span>;</div><div class="line">context.strokeRect(<span class="number">150</span>,<span class="number">150</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="comment">//清空矩形区域（设置矩形区域为空白）</span></div><div class="line">context.clearRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="1-2、绘制线条"><a href="#1-2、绘制线条" class="headerlink" title="1.2、绘制线条"></a>1.2、绘制线条</h3><p>我们可以通过 <code>lineTo(x, y)</code> 绘制直线。两点成直线，绘制直线需要两个点，所以我们需要先设置一个起点，一般来说，我们使用 <code>moveTo(x, y)</code> 设置笔触的位置。当然，你也可以用 <code>lineTo(x, y)</code> 来设置一个笔触点。</p>
<p>在没有设置笔触的场景下，以下两段代码的效果完全一致：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//画线，设置起点。</span></div><div class="line">context.moveTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line"><span class="comment">//设置轨迹</span></div><div class="line">context.lineTo(<span class="number">500</span>,<span class="number">500</span>);</div><div class="line"><span class="comment">//画线</span></div><div class="line">context.stroke();</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//画线，设置起点。</span></div><div class="line">context.lineTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line"><span class="comment">//设置轨迹</span></div><div class="line">context.lineTo(<span class="number">500</span>,<span class="number">500</span>);</div><div class="line"><span class="comment">//画线</span></div><div class="line">context.stroke();</div></pre></td></tr></table></figure>
<p><strong>一般来说，我们会在 <code>canvas</code> 初始化或者 <code>beginPath()</code> 调用后，通过 <code>moveTo(x, y)</code> 来设置一个初始笔触点。</strong></p>
<p>要同时绘制多个线条，我们应该通过 <code>beginPath()</code> 来建立路径。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用线条绘制了一个矩形</span></div><div class="line">context.beginPath();</div><div class="line">context.moveTo(<span class="number">400</span>, <span class="number">400</span>);</div><div class="line">context.lineTo(<span class="number">450</span>, <span class="number">400</span>);</div><div class="line">context.lineTo(<span class="number">450</span>, <span class="number">450</span>);</div><div class="line">context.lineTo(<span class="number">400</span>, <span class="number">450</span>);</div><div class="line">context.closePath();</div><div class="line"><span class="comment">//真实的绘图</span></div><div class="line">context.stroke();</div></pre></td></tr></table></figure>
<p>看了以上的代码，可能会有一个疑惑，为什么仅仅三个线条就构成了一个矩形呢？</p>
<p>原因在于当调用 <code>closePath()</code> 的时候，会把最后的笔触点和最开始的笔触点连接在一起，这个时候也就构成了第四条直线。</p>
<p> <strong>注意：当前路径为空，即调用beginPath()之后，或者canvas刚建的时候，第一条路径构造命令通常被视为是moveTo（），无论最后的是什么。出于这个原因，你几乎总是要在设置路径之后专门指定你的起始位置。</strong></p>
<p> <strong>闭合路径 <code>closePath()</code>,不是必需的。这个方法会通过绘制一条从当前点到开始点的直线来闭合图形。如果图形是已经闭合了的，即当前点为开始点，该函数什么也不做。</strong></p>
<p> <strong>当你调用 <code>fill()</code> 函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用 <code>closePath()</code> 函数。但是调用stroke()时不会自动闭合。</strong></p>
<p>再来填充一个梯形玩玩：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">context.beginPath();</div><div class="line">context.moveTo(<span class="number">100</span>, <span class="number">400</span>);</div><div class="line">context.lineTo(<span class="number">200</span>, <span class="number">400</span>);</div><div class="line">context.lineTo(<span class="number">250</span>, <span class="number">500</span>);</div><div class="line">context.lineTo(<span class="number">50</span>, <span class="number">500</span>);</div><div class="line">context.fill();</div></pre></td></tr></table></figure>
<h3 id="1-3、绘制矩形线条"><a href="#1-3、绘制矩形线条" class="headerlink" title="1.3、绘制矩形线条"></a>1.3、绘制矩形线条</h3><p>矩形线条是一个比较常用的图形，所以提供了一个简单的方法来直接绘制：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//绘制矩形线条</span></div><div class="line">context.beginPath();</div><div class="line">context.rect(<span class="number">700</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">50</span>);</div><div class="line">context.stroke();</div><div class="line">context.fillStyle = <span class="string">'red'</span>;</div><div class="line">context.fill();</div></pre></td></tr></table></figure>
<h3 id="1-4、绘制圆弧"><a href="#1-4、绘制圆弧" class="headerlink" title="1.4、绘制圆弧"></a>1.4、绘制圆弧</h3><p>绘制圆弧或者圆的时候，我们可以使用如下方法：</p>
<ul>
<li>arc(x, y, radius, startAngle, endAngle, anticlockwise) 画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。</li>
<li>arcTo(x1, y1, x2, y2, radius) 根据给定的控制点和半径画一段圆弧，再以直线连接两个控制点。</li>
</ul>
<p>anticlockwise为true则表示逆时针绘制。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//绘制圆弧</span></div><div class="line">context.beginPath();</div><div class="line">context.arc(<span class="number">550</span>, <span class="number">150</span>, <span class="number">100</span>, getRadian(<span class="number">90</span>) , getRadian(<span class="number">360</span>), <span class="literal">false</span>);</div><div class="line">context.stroke();</div><div class="line">context.beginPath();</div><div class="line">context.arc(<span class="number">550</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">0</span>, getRadian(<span class="number">90</span>), <span class="literal">false</span>);</div><div class="line">context.fill();</div></pre></td></tr></table></figure>
<p>以上代码，绘制了两个弧形，一个空心，一个实心。一般再绘制圆弧的时候就不要执行 <code>moveTo(x, y)</code>，否则绘制终点会被连接到这个触点上。</p>
<p><strong>注意：在arc函数中，<code>startAngle</code> 和 <code>endAngle</code> 属性值都是弧度，而不是我们所熟知的角度。所以我们一个一个角度转换为弧度的函数，如下：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRadian</span>(<span class="params">degrees<span class="regexp">/*角度值*/</span></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> (<span class="built_in">Math</span>.PI / <span class="number">180</span>) * degrees;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>arcTo没吃透，暂时描述不出来，先简单看看示例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//绘制圆弧（必须要设定起始点）</span></div><div class="line">context.beginPath();</div><div class="line">context.fillRect(<span class="number">600</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">context.fillRect(<span class="number">700</span>, <span class="number">500</span>, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">context.fillStyle = <span class="string">'blue'</span>;</div><div class="line">context.fillRect(<span class="number">700</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line"></div><div class="line">context.beginPath();</div><div class="line">context.moveTo(<span class="number">700</span>, <span class="number">400</span>);</div><div class="line">context.arcTo(<span class="number">600</span>, <span class="number">600</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">500</span>);</div><div class="line">context.stroke();</div></pre></td></tr></table></figure>
<h2 id="2、其他"><a href="#2、其他" class="headerlink" title="2、其他"></a>2、其他</h2><h3 id="2-1、canvas检查支持性"><a href="#2-1、canvas检查支持性" class="headerlink" title="2.1、canvas检查支持性"></a>2.1、canvas检查支持性</h3><p>如果仅仅需要在UI上体现，那么我们可以在 <code>&lt;canvas&gt;</code> 标签内部放置元素，如果浏览器不支持 <code>&lt;canvas&gt;</code> 标签，那么内部的元素就会被浏览器解析，而显示出来。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"stockGraph"</span> <span class="attr">width</span>=<span class="string">"150"</span> <span class="attr">height</span>=<span class="string">"150"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Canvas not be support.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure>
<p>除此之外，我们也可以用js的方式来检查。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c1 = <span class="built_in">document</span>.getElementById(<span class="string">'c1'</span>);</div><div class="line"><span class="comment">//如果canvas元素没有getContext方法，那么就证明浏览器不支持canvas。</span></div><div class="line"><span class="keyword">if</span>(!c1.getContext)&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Canvas not be support.'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2、canvas的width和height属性"><a href="#2-2、canvas的width和height属性" class="headerlink" title="2.2、canvas的width和height属性"></a>2.2、canvas的width和height属性</h3><p><code>&lt;canvas&gt;</code> 对象有两个比较特别的属性，<code>width、height</code>，这两者用于控制画布的大小，width的默认值是300，height的默认值为150。<strong>当这两个属性值有变化时，在该画布上已经完成的任何绘图都会擦除掉。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c1 = <span class="built_in">document</span>.getElementById(<span class="string">'c1'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'default width:'</span>, c1.width, <span class="string">'; default height:'</span>, c1.height);</div><div class="line">c1.width = <span class="number">500</span>;</div><div class="line">c1.height = <span class="number">600</span>;</div></pre></td></tr></table></figure>
<p><code>&lt;canvas&gt;</code> 的的height和width属性如果和用css设置的height和width样式不一致，那么就可能会产生扭曲。</p>
<h3 id="2-3、来个好玩的，画个桃心"><a href="#2-3、来个好玩的，画个桃心" class="headerlink" title="2.3、来个好玩的，画个桃心"></a>2.3、来个好玩的，画个桃心</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawHeart</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  context.fillStyle = <span class="string">'purple'</span>;</div><div class="line">  <span class="comment">//三次曲线</span></div><div class="line">  context.beginPath();</div><div class="line">  context.moveTo(<span class="number">75</span>, <span class="number">40</span>);</div><div class="line">  context.bezierCurveTo(<span class="number">75</span>, <span class="number">37</span>, <span class="number">70</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">25</span>);</div><div class="line">  context.bezierCurveTo(<span class="number">20</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">62.5</span>, <span class="number">20</span>, <span class="number">62.5</span>);</div><div class="line">  context.bezierCurveTo(<span class="number">20</span>, <span class="number">80</span>, <span class="number">40</span>, <span class="number">102</span>, <span class="number">75</span>, <span class="number">120</span>);</div><div class="line">  context.bezierCurveTo(<span class="number">110</span>, <span class="number">102</span>, <span class="number">130</span>, <span class="number">80</span>, <span class="number">130</span>, <span class="number">62.5</span>);</div><div class="line">  context.bezierCurveTo(<span class="number">130</span>, <span class="number">62.5</span>, <span class="number">130</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="number">25</span>);</div><div class="line">  context.bezierCurveTo(<span class="number">85</span>, <span class="number">25</span>, <span class="number">75</span>, <span class="number">37</span>, <span class="number">75</span>, <span class="number">40</span>);</div><div class="line">  context.fill();</div><div class="line">&#125;</div><div class="line">drawHeart();</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">### 2.4 附上测试代码</div><div class="line"></div><div class="line">`<span class="string">``</span>html</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Canvas Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">body</span> &#123;</div><div class="line">      <span class="attribute">text-align</span>: center;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.c1</span> &#123;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">      <span class="attribute">height</span>: <span class="number">600px</span>;</div><div class="line">      <span class="attribute">width</span>: <span class="number">800px</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"c1"</span> <span class="attr">onclick</span>=<span class="string">"alert('abc')"</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c1 = <span class="built_in">document</span>.getElementById(<span class="string">'c1'</span>);</div><div class="line"><span class="comment">// 如果不用id属性，我们可以用如下方式来获取canvas对象</span></div><div class="line"><span class="comment">//var c1 = document.getElementsByTagName('canvas')[0];</span></div><div class="line">c1.width = <span class="number">800</span>;</div><div class="line">c1.height = <span class="number">600</span>;</div><div class="line"><span class="keyword">var</span> context = c1.getContext(<span class="string">'2d'</span>);</div><div class="line"><span class="built_in">console</span>.log(context); <span class="comment">//可以看到context是一个CanvasRenderingContext2D对象</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRadian</span>(<span class="params">degrees<span class="regexp">/*角度值*/</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (<span class="built_in">Math</span>.PI / <span class="number">180</span>) * degrees;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//绘制红色矩形</span></div><div class="line">context.fillStyle = <span class="string">'red'</span>;</div><div class="line">context.fillRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="comment">//绘制蓝色矩形框</span></div><div class="line">context.strokeStyle = <span class="string">'blue'</span>;</div><div class="line">context.strokeRect(<span class="number">150</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="comment">//清空矩形区域（设置矩形区域为空白）</span></div><div class="line">context.clearRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="comment">//画线，设置起点。</span></div><div class="line">context.moveTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line"><span class="comment">//设置轨迹</span></div><div class="line">context.lineTo(<span class="number">500</span>, <span class="number">500</span>);</div><div class="line"><span class="comment">//画线</span></div><div class="line">context.stroke();</div><div class="line"></div><div class="line"><span class="comment">//绘制空心矩形</span></div><div class="line">context.beginPath();</div><div class="line">context.moveTo(<span class="number">400</span>, <span class="number">400</span>);</div><div class="line">context.lineTo(<span class="number">450</span>, <span class="number">400</span>);</div><div class="line">context.lineTo(<span class="number">450</span>, <span class="number">450</span>);</div><div class="line">context.lineTo(<span class="number">400</span>, <span class="number">450</span>);</div><div class="line">context.closePath();</div><div class="line">context.stroke();</div><div class="line"></div><div class="line"><span class="comment">//绘制实心梯形</span></div><div class="line">context.beginPath();</div><div class="line">context.moveTo(<span class="number">100</span>, <span class="number">400</span>);</div><div class="line">context.lineTo(<span class="number">200</span>, <span class="number">400</span>);</div><div class="line">context.lineTo(<span class="number">250</span>, <span class="number">500</span>);</div><div class="line">context.lineTo(<span class="number">50</span>, <span class="number">500</span>);</div><div class="line">context.fill();</div><div class="line"></div><div class="line"><span class="comment">//绘制圆弧</span></div><div class="line">context.beginPath();</div><div class="line">context.arc(<span class="number">550</span>, <span class="number">150</span>, <span class="number">100</span>, getRadian(<span class="number">90</span>), getRadian(<span class="number">360</span>), <span class="literal">true</span>);</div><div class="line">context.stroke();</div><div class="line">context.beginPath();</div><div class="line">context.arc(<span class="number">550</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">0</span>, getRadian(<span class="number">90</span>), <span class="literal">true</span>);</div><div class="line">context.stroke();</div><div class="line"></div><div class="line"><span class="comment">//绘制圆弧（必须要设定起始点）</span></div><div class="line">context.beginPath();</div><div class="line">context.fillRect(<span class="number">600</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">context.fillRect(<span class="number">700</span>, <span class="number">500</span>, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line">context.fillStyle = <span class="string">'blue'</span>;</div><div class="line">context.fillRect(<span class="number">700</span>, <span class="number">400</span>, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line"></div><div class="line">context.beginPath();</div><div class="line">context.moveTo(<span class="number">700</span>, <span class="number">400</span>);</div><div class="line">context.arcTo(<span class="number">600</span>, <span class="number">600</span>, <span class="number">700</span>, <span class="number">700</span>, <span class="number">500</span>);</div><div class="line">context.stroke();</div><div class="line"></div><div class="line"><span class="comment">//绘制矩形线条</span></div><div class="line">context.beginPath();</div><div class="line">context.rect(<span class="number">700</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">50</span>);</div><div class="line">context.stroke();</div><div class="line">context.fillStyle = <span class="string">'red'</span>;</div><div class="line">context.fill();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawHeart</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  context.fillStyle = <span class="string">'purple'</span>;</div><div class="line">  <span class="comment">//三次曲线</span></div><div class="line">  context.beginPath();</div><div class="line">  context.moveTo(<span class="number">75</span>, <span class="number">40</span>);</div><div class="line">  context.bezierCurveTo(<span class="number">75</span>, <span class="number">37</span>, <span class="number">70</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">25</span>);</div><div class="line">  context.bezierCurveTo(<span class="number">20</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">62.5</span>, <span class="number">20</span>, <span class="number">62.5</span>);</div><div class="line">  context.bezierCurveTo(<span class="number">20</span>, <span class="number">80</span>, <span class="number">40</span>, <span class="number">102</span>, <span class="number">75</span>, <span class="number">120</span>);</div><div class="line">  context.bezierCurveTo(<span class="number">110</span>, <span class="number">102</span>, <span class="number">130</span>, <span class="number">80</span>, <span class="number">130</span>, <span class="number">62.5</span>);</div><div class="line">  context.bezierCurveTo(<span class="number">130</span>, <span class="number">62.5</span>, <span class="number">130</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="number">25</span>);</div><div class="line">  context.bezierCurveTo(<span class="number">85</span>, <span class="number">25</span>, <span class="number">75</span>, <span class="number">37</span>, <span class="number">75</span>, <span class="number">40</span>);</div><div class="line">  context.fill();</div><div class="line">&#125;</div><div class="line">drawHeart();</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[01_Dotnet Core尝鲜]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/DotNetCore/01_Dotnet%20Core%E5%B0%9D%E9%B2%9C/</url>
      <content type="html"><![CDATA[<h1 id="0、About-Dotnet-Core"><a href="#0、About-Dotnet-Core" class="headerlink" title="0、About Dotnet Core"></a>0、About Dotnet Core</h1><p><code>Dotnet Core</code> 是新一代的 <code>.Net Framework</code>，是一个具有跨平台能力的应用程序开发框架。它本身是由多个子项目组成的。包括 <code>Core Fx</code>、<code>Core CLR</code>、<code>.Net Compiler Platform</code> 等等。</p>
<p><code>Dotnet Core</code> 具有高效的开发效率，高性能和跨平台能力，是 <code>.Net平台</code> 的一次大跃进。</p>
<h1 id="1、尝试-Dotnet-Core"><a href="#1、尝试-Dotnet-Core" class="headerlink" title="1、尝试 Dotnet Core"></a>1、尝试 Dotnet Core</h1><h3 id="1-1、Install"><a href="#1-1、Install" class="headerlink" title="1.1、Install"></a>1.1、Install</h3><p><code>Dotnet Core</code> 从发布至今，已经有很长一段时间了。期间也发布了beta，rc等版本。就在前不久，正式版也已经发布了，经过了之前大量的api变化，现在core已经非常稳定了。这个阶段，已经值得我们去尝试、去使用它了。</p>
<p>要尝试 <code>Dotnet core</code>, 我们先进入它的网站<a href="https://dotnet.github.io/" target="_blank" rel="external">https://dotnet.github.io/</a>，<a href="https://www.microsoft.com/net/core#windows" target="_blank" rel="external">https://www.microsoft.com/net/core#windows</a> 。</p>
<p>根据我们的操作系统版本，选择合适的开发包。我这里是Windows下开发，理所当然的下载 <a href="https://go.microsoft.com/fwlink/?LinkID=809122" target="_blank" rel="external">the .NET Core SDK for Windows</a> 。</p>
<p>安装好之后，在命令行输入 <code>dotnet --version</code> ，如果输出了版本信息，那就表示安装成功了。</p>
<p><strong>注意：如果之前尝试过Dotnet Core，请保证在安装最新版本的SDK之前，先卸载干净。</strong></p>
<h3 id="1-2、Console-App"><a href="#1-2、Console-App" class="headerlink" title="1.2、Console App"></a>1.2、Console App</h3><p>在安装好SDK之后，我们就可以开始创建项目了。新建一个文件夹，进入控制台，执行 <code>dotnet new</code>，即可看到在目录下生成了如下文件结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Program.cs</div><div class="line">project.json</div></pre></td></tr></table></figure>
<p>内容如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Program.cs</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> System;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            Console.WriteLine(<span class="string">"Hello World!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//project.json</div><div class="line"></div><div class="line">&#123;</div><div class="line">  "version": "1.0.0-*",</div><div class="line">  "buildOptions": &#123;</div><div class="line">    "debugType": "portable",</div><div class="line">    "emitEntryPoint": true</div><div class="line">  &#125;,</div><div class="line">  "dependencies": &#123;&#125;,</div><div class="line">  "frameworks": &#123;</div><div class="line">    "netcoreapp1.0": &#123;</div><div class="line">      "dependencies": &#123;</div><div class="line">        "Microsoft.NETCore.App": &#123;</div><div class="line">          "type": "platform",</div><div class="line">          "version": "1.0.0"</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      "imports": "dnxcore50"</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时我们可以通过 <code>dotnet restore</code> 来安装依赖。</p>
<p><strong>注意：就算project.json中的dependencies属性为空对象，我们也要执行 <code>dotnet restore</code>，该命令会生成project.lock.json文件。</strong></p>
<p><strong>注意2：如果我们的网络环境的走的代理，那么可能会在安装依赖这个步骤遇到407错误，此时我们需要配置Nuget的代理设置，找到 <code>%AppData%/NuGet/NuGet.Config</code> 文件，然后添加如下配置项：</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"http_proxy"</span> <span class="attr">value</span>=<span class="string">"s1firewall:8080"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"http_proxy.user"</span> <span class="attr">value</span>=<span class="string">"jh3r"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"http_proxy.password"</span> <span class="attr">value</span>=<span class="string">"xxx"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">config</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>通过这样的设置，就可以使用代理来安装依赖了。</strong></p>
<p>当我们安装好依赖之后，通过执行 <code>dotnet run</code> 来编译和运行我们的程序，此时可以在控制台看到输出： <code>Hello World!</code></p>
<p>以上，就是我们使用 <code>Dotnet Core</code> 的一般步骤了。</p>
<h3 id="1-3、Web-App"><a href="#1-3、Web-App" class="headerlink" title="1.3、Web App"></a>1.3、Web App</h3><p>在尝试了Console App之后，我们也来试试Web App 在 <code>Dotnet Core</code> 下是如何运行的。</p>
<p>首先，基本步骤如上，先创建一个项目模板。</p>
<p>接着，首先要使用Web功能，我们需要指定依赖，在project.json中的dependencies属性中增加依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;dependencies&quot;: &#123;</div><div class="line">  &quot;Microsoft.AspNetCore.Server.Kestrel&quot;: &quot;1.0.0&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：在设定依赖的时候，一定要注意版本号，如果依赖库的版本号不兼容Core的版本，那么很可能会出现一些莫名其妙的错误，而找不到原因。</strong></p>
<p>增加依赖之后，我们再次通过 <code>dotnet restore</code> 来安装依赖。</p>
<p>这个时候，我们来编写Web宿主程序，内容如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Program.cs</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</div><div class="line"><span class="keyword">namespace</span> <span class="title">WebApplication</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> host = <span class="keyword">new</span> WebHostBuilder()</div><div class="line">                .UseKestrel()</div><div class="line">                .UseStartup&lt;Startup&gt;() <span class="comment">//此处使用了类型Startup，来自于Startup.cs</span></div><div class="line">                .UseUrls(<span class="string">"http://localhost: 10000"</span>)</div><div class="line">                .Build();</div><div class="line">            host.Run();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Startup.cs</span></div><div class="line"></div><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</div><div class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">WebApplication</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></div><div class="line">        &#123;</div><div class="line">            app.Run((context) =&gt; </div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> context.Response.WriteAsync(<span class="string">"Hello, From Core."</span>);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编写好如上代码之后，我们在执行 <code>dotnet run</code>，访问 <code>http://localhost:10000</code> 就可以看到我们的Web程序已经成功运行起来了。</p>
<p>以上则是一个简单的Web程序所需要的代码。</p>
<h1 id="2、Other"><a href="#2、Other" class="headerlink" title="2、Other"></a>2、Other</h1><h3 id="2-1、Dotnet-Core-与-Node-js-的性能测试。"><a href="#2-1、Dotnet-Core-与-Node-js-的性能测试。" class="headerlink" title="2.1、Dotnet Core 与 Node.js 的性能测试。"></a>2.1、<code>Dotnet Core</code> 与 <code>Node.js</code> 的性能测试。</h3><p>在 <code>Dotnet Core</code> 的官方宣传中，号称比 <code>Node.js</code> 快8倍。实际上，通过计算从0到100000000的累加来看，两者的差距并不大（几十ms的差别，Node稍弱）。</p>
<p>由于时间环境关系，没有进行更复杂测试，但我想在高并发下，Node的机制可能会有更高的性能。在大量IO操作处理中，<code>Dotnet Core</code>会有绝对的优势【后续可验证】。</p>
<h3 id="2-2、如何直接运行Dotnet-Core程序？"><a href="#2-2、如何直接运行Dotnet-Core程序？" class="headerlink" title="2.2、如何直接运行Dotnet Core程序？"></a>2.2、如何直接运行Dotnet Core程序？</h3><p>在开发模式下，我们通过 <code>dotnet run</code> 来运行程序，那我们如何来运行发布好的程序呢？</p>
<p>首先，我们可以通过 <code>dotnet publish</code> 来生成好我们的应用程序（在Windows下生成的是dll，其他平台未测试）。</p>
<p>在发布模式，我们的程序所依赖的包，也会被一同发布到目录下，我们可以在 <code>/appRoot/bin/Debug/netcoreapp1.0/publish</code> 中找到我们发布好的文件。</p>
<p>此时，我们就可以将publish目录拷贝到其他电脑运行了。</p>
<p>由于发布好的文件入口点是 <code>.dll</code> 文件，我们要运行它的话，需要通过 <code>dotnet xxx.dll</code> 来进行启动。</p>
<p><strong>注意：在publish的时候，我们可以使用参数<code>dotnet publish -c Release</code> 生成Release版本的发布包，目录对应变更为 <code>bin/Release/</code></strong></p>
<p><strong>注意2：请不要删除publish目录下的文件，否则可能导致无法运行。经测试，<appname>.deps.json 和 <appname>.pdb可以删除，但依赖和 <appname>.runtimeconfig.json是绝对不能删除的。</appname></appname></appname></strong></p>
<h3 id="2-3-后续"><a href="#2-3-后续" class="headerlink" title="2.3 后续"></a>2.3 后续</h3><p>此文为 <code>Dotnet Core</code> 系列第一篇，后续计划将Web开发所需要用到的一些基本知识点，库等均在 <code>Dotnet Core</code> 调试通，且成文。</p>
<p><strong>加油，<code>Dotnet!</code></strong></p>
<p><strong>【6.30号更新】</strong></p>
<h3 id="2-4、如何创建web项目"><a href="#2-4、如何创建web项目" class="headerlink" title="2.4、如何创建web项目"></a>2.4、如何创建web项目</h3><p>在 1.3 中，我们知道如何把一个Console App 改造为一个Web项目，但这对应开发一个Web应用来说还不够。</p>
<p>其实，<code>dotnet new</code> 可以默认创建 Web 项目开发模板。</p>
<p>通过 <code>dotnet new -t --help</code> 我们可以看到 <code>dotnet new</code> 能帮我们创建的项目类型有如下四种：</p>
<ol>
<li>Console</li>
<li>Web</li>
<li>Lib</li>
<li>xunittest</li>
</ol>
<p>我们可以直接通过 <code>dotnet new -t Web</code> 来创建一个 Web 项目模板，简单快捷。</p>
<h3 id="2-5、如果在Linux下发布（CentOS7）"><a href="#2-5、如果在Linux下发布（CentOS7）" class="headerlink" title="2.5、如果在Linux下发布（CentOS7）"></a>2.5、如果在Linux下发布（CentOS7）</h3><p><code>Dotnet Core</code> 开发的程序，具有跨平台能力，那如何在非Windows上发布呢？各大操作系统方式并不同。</p>
<p>在CentOS7（仅支持7+）上发布非常简单。</p>
<p>首先是在CentOS7上安装 <code>Dotnet Core</code>，不知道如何安装？请查阅 <a href="https://www.microsoft.com/net/core#centos" target="_blank" rel="external">https://www.microsoft.com/net/core#centos</a> 。</p>
<p>安装好之后，只需要在Windows把开发好的程序，通过 <code>dotnet publish</code> 生成发布目录，然后将该目录拷贝到CentOS上即可。</p>
<p>最后，在CentOS上执行 <code>dotnet xxx.dll</code> 即可运行项目了。</p>
<p><strong>注意： xxx.dll是你开发的项目的主程序</strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6入门系列二（特性总览上）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/ES6%E5%85%A5%E9%97%A8/ES6%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%BA%8C%EF%BC%88%E7%89%B9%E6%80%A7%E6%80%BB%E8%A7%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>最近从coffee切换到js，代码量一下子变大了不少，也多了些许陌生感。为了在JS代码中，更合理的使用ES6的新特性，特在此对ES6的特性做一个简单的总览。</p>
<h2 id="1、箭头函数-Arrows"><a href="#1、箭头函数-Arrows" class="headerlink" title="1、箭头函数(Arrows)"></a>1、箭头函数(Arrows)</h2><p>使用 =&gt; 简写的函数称之为箭头函数，和C#的lambda，CoffeeScript的语法比较类似。</p>
<pre><code>var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

//简单使用
var arr2 = arr.map(x =&gt; x + 1);
console.log(arr2);
//等价于
arr2 = arr.map(function (x) {
  return x + 1;
});
console.log(arr2);

//此处必须用()包裹对象，否则语法错误
var arr3 = arr.map((x, i) =&gt; ({
  idx: i,
  value: x
}));
console.log(arr3);
//等价于
arr3 = arr.map(function (x, i) {
  return {
    idx: i,
    value: x
  };
});
console.log(arr3);

//如果函数是一个语句块
var arr4 = [];
arr.forEach(x =&gt; {
  if (x % 3 === 0) {
    arr4.push(x);
  }
});
console.log(arr4);
//等价于
arr4.length = 0;
arr.forEach(function (x) {
  if (x % 3 === 0) {
    arr4.push(x);
  }
});
console.log(arr4);

//此处this一直指向obj对象。和一般function不同，箭头函数共享词法作用域。
var obj = {
  name: &apos;test&apos;,
  foods: [&apos;fish&apos;, &apos;milk&apos;],
  eat() {
    this.foods.forEach(x =&gt;
      console.log(this.name + &apos;like eat &apos; + x) //注意。此地不能有分号，因为属于表达式，不是语句块。
    );
  }
};
obj.eat();
</code></pre><h2 id="2、类定义（classes）"><a href="#2、类定义（classes）" class="headerlink" title="2、类定义（classes）"></a>2、类定义（classes）</h2><p>在ES6中，可以直接使用class关键字定义类，并可以定义构造函数，静态方法，get/set 方法，实例方法等。</p>
<pre><code>&apos;use strict&apos;;
class Animal {
  constructor(name) {
    this.name = name;
  }
  eat() {
    console.log(this.name + &apos; should eat food.&apos;);
  }
};

class Dog extends Animal {
  //构造函数
  constructor(age) {
      super(&apos;Dog&apos;);
      this.age = age;
      //实例方法
      this.instanceFun = function () {
        console.log(&apos;Instance Function.&apos;);
      }
    }
    //静态方法
  static go() {
      console.log(&apos;Dog will go.&apos;);
    }
    //原型方法
  prototypeFunc() {
    console.log(&apos;Prototype Function.&apos;);
  }

  //get、set
  get dogName() {
    return &apos;Name: &apos; + this.name;
  }
  set dogName(value) {
    this.name = value;
  }

  //get
  get dogAge() {
    return &apos;Age: &apos; + this.age;
  }
}

var dog = new Dog(4);
Dog.go();
dog.eat();
dog.instanceFun();
dog.prototypeFunc();
console.log(dog.dogName);
dog.dogName = &apos;x&apos;;
console.log(dog.dogName);
console.log(dog.dogAge);
dog.dogAge = 5; //会失败，属性没有getter。
</code></pre><h2 id="3、增强的对象常量（Enhanced-Object-Literals）"><a href="#3、增强的对象常量（Enhanced-Object-Literals）" class="headerlink" title="3、增强的对象常量（Enhanced Object Literals）"></a>3、增强的对象常量（Enhanced Object Literals）</h2><pre><code>var obj = {
  name: &apos;obj&apos;,
  __proto__: {
    name: &apos;parent&apos;
  },

  toString() {
    // 可以通过super直接取到原型对象的属性
    return super.name + &apos;:&apos; + this.name;
  },

  [&apos;prop_&apos; + (() =&gt; 1)()]: 1 //动态属性
};

console.log(obj.toString());
console.log(obj.prop_1);
</code></pre><h2 id="4、模板字符串（Template-Strings）"><a href="#4、模板字符串（Template-Strings）" class="headerlink" title="4、模板字符串（Template Strings）"></a>4、模板字符串（Template Strings）</h2><p>简化了字符串的构造，拼接等。</p>
<pre><code>//基本字符串，\n有效。
var str = `Basic string &apos;\n&apos; in Javascript.`;
console.log(str);
// Basic string &apos;
// &apos; in Javascript.

//多行字符串
str = `Multiline 
strings`;
console.log(str);
// Multiline
// strings

//字符串插值
var name = &apos;Jay&apos;;
str = `Hello, ${name}`;
console.log(str); // &apos;Hello, Jay.&apos;
</code></pre><h2 id="5、解构（Destructuring）–-Node和Chrome中执行不成功，忽略"><a href="#5、解构（Destructuring）–-Node和Chrome中执行不成功，忽略" class="headerlink" title="5、解构（Destructuring）– Node和Chrome中执行不成功，忽略"></a>5、解构（Destructuring）– Node和Chrome中执行不成功，忽略</h2><p>允许使用模式匹配，来匹配数组和对象。</p>
<h2 id="6、Default-Rest-Spread-–-Node和Chrome中执行不成功，忽略"><a href="#6、Default-Rest-Spread-–-Node和Chrome中执行不成功，忽略" class="headerlink" title="6、Default + Rest + Spread – Node和Chrome中执行不成功，忽略"></a>6、Default + Rest + Spread – Node和Chrome中执行不成功，忽略</h2><h2 id="7、局部变量-常量（Let-Const）"><a href="#7、局部变量-常量（Let-Const）" class="headerlink" title="7、局部变量+常量（Let + Const）"></a>7、局部变量+常量（Let + Const）</h2><pre><code>&apos;use strict&apos;; //必须启用严格模式

{
  let x = 1;
}
console.log(x); //Error:x is not defined.

const PI = 3.14;
PI = 3.15; //Error: 无法对常量赋值
console.log(PI); //3.14
</code></pre><h2 id="8、迭代器-For-Of（Iterators-For-Of）"><a href="#8、迭代器-For-Of（Iterators-For-Of）" class="headerlink" title="8、迭代器 + For..Of（Iterators + For..Of）"></a>8、迭代器 + For..Of（Iterators + For..Of）</h2><p>比较类似于C#中的IEnumerable，使用for..of来访问迭代器。它不要求实现一个数组，而是使用和LINQ类似的懒加载。</p>
<pre><code>(function () {
  &apos;use strict&apos;;
  let test = {
    [Symbol.iterator]() {
      let pre = 0,
        cur = 1;
      return {
        next() {//此处方法名不能变
          pre = cur;
          cur = pre + cur;
          console.log(&apos;pre = &apos; + pre);
          console.log(&apos;cur = &apos; + cur);
          //返回值的属性名也不能改变
          return {
            done: false,
            value: cur
          };
        }
      }
    }
  };

  for (var n of test) {
    if (n &gt; 1000) {
      break;
    }
    console.log(n);
  }
})();

// 用于获取数组的键值
for (var item of[1, 3, 5, 7, 9]) {
  console.log(item);
}
</code></pre><h2 id="9、生成器（Generators）"><a href="#9、生成器（Generators）" class="headerlink" title="9、生成器（Generators）"></a>9、生成器（Generators）</h2><p>允许在function*()函数中使用yield关键字。</p>
<pre><code>function* foo(x) {
  var y = 2 * (yield(x + 1));
  var z = yield(y / 3);
  return (x + y + z);
}

var it = foo(5);

console.log(it.next()); // { value:6, done:false }
console.log(it.next(12)); // { value:8, done:false }
console.log(it.next(13)); // { value:42, done:true }
</code></pre><h2 id="10、unicode"><a href="#10、unicode" class="headerlink" title="10、unicode"></a>10、unicode</h2><p>增加了对unicode字符的支持。比如“𠮷”（这个和吉不一样哦！）</p>
<pre><code>console.log(&apos;𠮷&apos;.length); //2

// 正则表达式增加了u这个参数，匹配unicode字符。
console.log(&quot;𠮷&quot;.match(/./u)[0].length) // 2

// new form
&quot;\u{20BB7}&quot;==&quot;𠮷&quot;==&quot;\uD842\uDFB7&quot;

// new String ops
&quot;𠮷&quot;.codePointAt(0) == 0x20BB7

// for-of iterates code points
for(var c of &quot;𠮷&quot;) {
  console.log(c);
}
</code></pre><h2 id="11、参考资料"><a href="#11、参考资料" class="headerlink" title="11、参考资料"></a>11、参考资料</h2><p>1、ECMAScript 6 features <a href="https://github.com/lukehoban/es6features" target="_blank" rel="external">https://github.com/lukehoban/es6features</a></p>
<p>2、ECMAScript 6 入门 <a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6入门系列一（基础）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/ES6%E5%85%A5%E9%97%A8/ES6%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B8%80%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##1、let命令<br><strong>Tips:</strong></p>
<ol>
<li>块级作用域（只在当前块中有效）</li>
<li>不会变量提升（必须先申明在使用）</li>
<li>让变量独占该块，不再受外部影响</li>
<li>不允许重复声明</li>
</ol>
<p><strong>总之：let更像我们熟知的静态语言的的变量声明指令</strong></p>
<p>ES6新增了let命令，用来声明变量。用法类似于var，但所声明的变量，只能在let命令所在的代码块内有效。</p>
<p>let声明的变量只有块级作用域</p>
<pre><code>&apos;use strict&apos;
{
  let a = 1;
}
console.log(a); //结果是什么？
</code></pre><p>看一段熟悉的代码：</p>
<pre><code>var a = [];
for (var i = 0; i &lt; 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
console.log(a[6]()); //结果是什么？
</code></pre><p>如果改用let的话，那么看以下代码输出什么？</p>
<pre><code>&apos;use strict&apos;
var a = [];
for (let i = 0; i &lt; 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
console.log(a[6]()); // ?
</code></pre><p>同时，在使用let的时候，必须先申明再使用，不像var会变量提升：</p>
<pre><code>&apos;use strict&apos;
console.log(a);
let a = 1;
</code></pre><p>ES6中明确规定，如果区块存在let和const，那么该区块就形成封闭作用域，凡是在声明致歉就使用这些变量，就会报错。简称“暂时性死区”（temporal dead zone，简称TDZ）。</p>
<p>看一个不太容易发现的死区：（注：该代码未测试）</p>
<pre><code>function bar(x=y, y=2) {
  return [x, y];
}

bar(); // 报错
</code></pre><p>调用bar之所以报错，是因为参数x默认值等于另一个参数y，而此时y还没有声明，属于“死区”。</p>
<p>需要注意，函数参数作用域和函数体的作用域是分离的：</p>
<pre><code>let foo = &apos;outer&apos;;

function bar(func) {
  let foo = &apos;inner&apos;;
  console.log(func()); // outer
}

bar(function(){
  console.log(foo);
});
</code></pre><p>同时，let还不允许重复声明</p>
<pre><code>{
  let a = 1;
  var a = 1;
}
{
  let a = 1;
  let a = 2;
}
</code></pre><p>##2、const命令<br><strong>Tips：</strong></p>
<ol>
<li>const用于声明常量，一旦声明，值就不能改变</li>
<li>const具有块级作用域</li>
<li>const不能变量提升（先声明后使用）</li>
<li>不可重复声明</li>
</ol>
<p><strong>const看起来很像我们熟知的静态语言的只读对象</strong></p>
<p>const声明常量，一旦声明，值将是不可变的。</p>
<pre><code>&apos;use strict&apos;
const PI = 3.1415;
PI // 3.1415
PI = 3; //Error
</code></pre><p>const指令指向变量所在的地址，所以对该变量进行属性设置是可行的（未改变变量地址），如果想完全不可变化（包括属性），那么可以使用冻结。</p>
<pre><code>&apos;use strict&apos;
const C1 = {};
C1.a = 1;
console.log(C1.a); // 1 

//冻结对象，此时前面用不用const都是一个效果
const C2 = Object.freeze({}); 
C2.a = 1; //Error,对象不可扩展
console.log(C2.a);
</code></pre><p>##3、全局对象属性</p>
<p>JavaScript中，全局对象是最顶层的对象，浏览器中是window对象，Node中是global对象，ES5规定，所有全局变量都是全局对象的属性。</p>
<p>在ES6中，var和function申明的变量，属于全局对象的属性，let和const则不是全局对象的属性。</p>
<pre><code>&apos;use strict&apos;
let b = 2;
console.log(global.b); // undefined
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6入门系列三（特性总览下）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/ES6%E5%85%A5%E9%97%A8/ES6%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B8%89%EF%BC%88%E7%89%B9%E6%80%A7%E6%80%BB%E8%A7%88%E4%B8%8B%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h1><p>最近从coffee切换到js，代码量一下子变大了不少，也多了些许陌生感。</p>
<p>为了在JS代码中，更合理的使用ES6的新特性，特在此对ES6的特性做一个简单的总览。</p>
<h1 id="1、模块-Module-Chrome测试不可用"><a href="#1、模块-Module-Chrome测试不可用" class="headerlink" title="1、模块(Module - Chrome测试不可用)"></a>1、模块(Module - Chrome测试不可用)</h1><blockquote>
<p>在ES6中，有class的概念，不过这只是语法糖，并没有解决模块化问题。Module功能则是为了解决模块化问题而提出的。</p>
</blockquote>
<p>我们可以使用如下方式定义模块：</p>
<p>11_lib.js文件内容</p>
<pre><code>// 导出属性和方法
export var PI = 3.1415926;
export function calcCircularArea(r){
  return PI * r * r;
}
</code></pre><p>app.js文件内容</p>
<pre><code>//导出所有，使用别名调用
import * as lib from &apos;11_lib&apos;;
console.log(lib.calcCircularArea(2));
console.log(lib.PI);

//导出属性和方法
import {calcCircularArea, PI} from &apos;11_lib&apos;;
console.log(calcCircularArea(2));
console.log(PI);
</code></pre><h1 id="2、模块加载器-Module-Loaders-Chrome测试不可用"><a href="#2、模块加载器-Module-Loaders-Chrome测试不可用" class="headerlink" title="2、模块加载器(Module Loaders - Chrome测试不可用)"></a>2、模块加载器(Module Loaders - Chrome测试不可用)</h1><p>既然用了定义module的规范，那么也就需要一个模块加载器，需要支持如下内容：</p>
<ol>
<li>动态加载</li>
<li>状态隔离</li>
<li>全局命名空间隔离</li>
<li>编译钩子</li>
<li>嵌套虚拟化</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">System.import(<span class="string">'11_lib'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(m.calcCircularArea(<span class="number">2</span>));</div><div class="line">  <span class="built_in">console</span>.log(m.PI);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="3、图-集合-弱引用图-若引用集合-Map-Set-WeakMap-WeakSet"><a href="#3、图-集合-弱引用图-若引用集合-Map-Set-WeakMap-WeakSet" class="headerlink" title="3、图 + 集合 + 弱引用图 + 若引用集合(Map + Set + WeakMap + WeakSet)"></a>3、图 + 集合 + 弱引用图 + 若引用集合(Map + Set + WeakMap + WeakSet)</h1><p>在ES6中，新增了几种数据结构。</p>
<p><strong>Map</strong>是一种类似于Object的结构，Object本质上是键值对的集合，但是只能是字符串当做键，所以有一定的使用限制。Map的话，则可以拿任意类型来作为key。具体使用如下：</p>
<pre><code>var map = new Map();
var key = {key: &apos;hah&apos;};
map.set(key, &apos;1&apos;); //设置key-value
map.set(key, 2); //对已有key进行设置，表示覆盖
console.log(map.get(key)); //获取key的值
console.log(map.size);//获取map的元素个数
map.has(key); //判断map中有指定的key
map.delete(key); //删除map中指定的key
map.clear(); //清空map
</code></pre><p><strong>WeakMap</strong>和Map是比较类似的，唯一的区别是只接受对象作为键名（null除外），而且键名所指向的对象，不计入垃圾回收机制。</p>
<p><strong>Set</strong>是一种类似于数组，但成员的值都是唯一（引用唯一）的一种数据结构。具体使用如下：</p>
<pre><code>var set = new Set();//定义set
set.add(1).add(2).add(1).add(&apos;2&apos;); //添加数据
console.log(set.size);//查看set中元素的数量，结果应该是3，因为重复添加不计算，2和&apos;2&apos;不等。
set.delete(1); //删除set的值（通过value删除）。
set.has(1); //set是否包含某个value
set.keys(); //返回set的所有key
set.values(); //返回set的所有value
set.clear();//清空set
</code></pre><p><strong>WeakSet</strong>和Set也是比较类型的，和Set有两个区别，一个是成员只能是对象；二个是WeakSet是不可遍历的。</p>
<h1 id="4、代理（Proxies）-Chrome测试不可用"><a href="#4、代理（Proxies）-Chrome测试不可用" class="headerlink" title="4、代理（Proxies） (Chrome测试不可用)"></a>4、代理（Proxies） (Chrome测试不可用)</h1><p>代理允许用宿主的行为来创建对象，能够实现拦截，对象的虚拟化，日志和分析等功能。</p>
<h1 id="5、数据类型Symbols"><a href="#5、数据类型Symbols" class="headerlink" title="5、数据类型Symbols"></a>5、数据类型Symbols</h1><p>在ES5中，JS只有6中原始类型，在ES6中，新增了Symbols类型，成为了JS中的第7种原始类型。<br>该类型表示独一无二的值。使用如下：</p>
<p>var key = Symbol(); //定义Symbol对象<br>console.log(typeof key); //symbol ，表示为类型，而且不是string类型的。<br>key = Symbol(‘这是一个说明’); //可以在定义Symbol的时候，添加一个说明</p>
<p>Symbol不能与其他类型值进行运算，但是可以显式转换为字符串，和转换为布尔值</p>
<pre><code>console.log(key.toString());
console.log(String(key));

if(key){
  console.log(&apos;key is true&apos;);
}
</code></pre><p>在对象的内部，要使用Symbol值定义属性时，必须放在方括号中。</p>
<pre><code>var obj = {
  [key]: &apos;abc&apos;
};
</code></pre><h1 id="6、可以子类化的内置对象"><a href="#6、可以子类化的内置对象" class="headerlink" title="6、可以子类化的内置对象"></a>6、可以子类化的内置对象</h1><p>在ES6中，我们可以自定义类型来继承内置对象，这个时候，如果要自定义构造函数，必须要在构造函数中调用super(),来呼叫父类的构造。</p>
<pre><code>&apos;use strict&apos;;
class MyArray extends Array {
    // 如果要定义constuctor，那么就必须要使用super来执行父类的构造
    constructor(){
      super();
    }
}

var arr = new MyArray();
arr[1] = 12;
console.log(arr.length === 2);
</code></pre><h1 id="7、新增的API（Math-Number-String-Array-Object-APIs）"><a href="#7、新增的API（Math-Number-String-Array-Object-APIs）" class="headerlink" title="7、新增的API（Math + Number + String + Array + Object APIs）"></a>7、新增的API（Math + Number + String + Array + Object APIs）</h1><p>如下代码，一目了然：</p>
<pre><code>//数字类api
Number.EPSILON; //增加常量e
Number.isInteger(Infinity) // false
Number.isNaN(&quot;NaN&quot;) // false

//数学类api
Math.acosh(3) // 1.762747174039086
Math.hypot(3, 4) // 5
Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2

//字符串类api
&quot;abcde&quot;.includes(&quot;cd&quot;) // true
&quot;abc&quot;.repeat(3) // &quot;abcabcabc&quot;

//数组api
Array.from(document.querySelectorAll(&apos;*&apos;)) // Returns a real Array
Array.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior
[0, 0, 0].fill(7, 1) // [0,7,7]
[1, 2, 3].find(x =&gt; x == 3) // 3
[1, 2, 3].findIndex(x =&gt; x == 2) // 1
[1, 2, 3, 4, 5].copyWithin(3, 0) // [1, 2, 3, 1, 2]
[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].entries() // iterator [0, &quot;a&quot;], [1,&quot;b&quot;], [2,&quot;c&quot;]
[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].keys() // iterator 0, 1, 2
[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].values() // iterator &quot;a&quot;, &quot;b&quot;, &quot;c&quot;

//对象api
Object.assign(Point, { origin: new Point(0,0) })
</code></pre><h1 id="8、二进制和八进制字面量（Binary-and-Octal-Literals）"><a href="#8、二进制和八进制字面量（Binary-and-Octal-Literals）" class="headerlink" title="8、二进制和八进制字面量（Binary and Octal Literals）"></a>8、二进制和八进制字面量（Binary and Octal Literals）</h1><p>直接上示例：</p>
<pre><code>var n1 = 0b111110101; //0b前缀，表示二进制字面量
console.log(n1); //输出的时候，直接用10进制展示

var n2 = 0o12345; //0o前缀，表示八进制字面量
console.log(n2);
</code></pre><h1 id="9、承诺（Promises）"><a href="#9、承诺（Promises）" class="headerlink" title="9、承诺（Promises）"></a>9、承诺（Promises）</h1><p><strong>Promise</strong>是ES6中新增的异步编程库。</p>
<pre><code>//使用承诺定义一个异步任务
var p = new Promise((resolve, reject)=&gt;{
  return setTimeout(function(){
    reject(&apos;ok&apos;);
  }, 2000);
});

p.then((data)=&gt;{
  console.log(data);
}, (data)=&gt;{
  console.log(&apos;error&apos; + data);
}).then(()=&gt;{
  console.log(&apos;throw err&apos;);
  throw &apos;Error&apos;;
}).catch(err =&gt; {
  console.log(err);
});
</code></pre><h1 id="10、参考资料"><a href="#10、参考资料" class="headerlink" title="10、参考资料"></a>10、参考资料</h1><p>1、ECMAScript 6 features <a href="https://github.com/lukehoban/es6features" target="_blank" rel="external">https://github.com/lukehoban/es6features</a></p>
<p>2、ECMAScript 6 入门 <a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JS实现继承的几种方式]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/JS%E6%9C%AD%E8%AE%B0/JS%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JS作为面向对象的弱类型语言，继承也是其非常强大的特性之一。那么如何在JS中实现继承呢？让我们拭目以待。</p>
<h2 id="JS继承的实现方式"><a href="#JS继承的实现方式" class="headerlink" title="JS继承的实现方式"></a>JS继承的实现方式</h2><p>既然要实现继承，那么首先我们得有一个父类，代码如下：</p>
<pre><code>// 定义一个动物类
function Animal (name) {
  // 属性
  this.name = name || &apos;Animal&apos;;
  // 实例方法
  this.sleep = function(){
    console.log(this.name + &apos;正在睡觉！&apos;);
  }
}
// 原型方法
Animal.prototype.eat = function(food) {
  console.log(this.name + &apos;正在吃：&apos; + food);
};
</code></pre><h3 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h3><p><strong>核心：</strong> 将父类的实例作为子类的原型</p>
<pre><code>function Cat(){    
}
Cat.prototype = new Animal();
Cat.prototype.name = &apos;cat&apos;;

//　Test Code
var cat = new Cat();
console.log(cat.name);
console.log(cat.eat(&apos;fish&apos;));
console.log(cat.sleep());
console.log(cat instanceof Animal); //true 
console.log(cat instanceof Cat); //true
</code></pre><p>特点：</p>
<ol>
<li>非常纯粹的继承关系，实例是子类的实例，也是父类的实例</li>
<li>父类新增原型方法/原型属性，子类都能访问到</li>
<li>简单，易于实现</li>
</ol>
<p>缺点：</p>
<ol>
<li>要想为子类新增属性和方法，必须要在<code>new Animal()</code>这样的语句之后执行，不能放到构造器中</li>
<li>无法实现多继承</li>
<li>来自原型对象的引用属性是所有实例共享的（详细请看附录代码： <a href="javascript:void(0" target="_blank" rel="external">示例1</a>;)）</li>
<li>创建子类实例时，无法向父类构造函数传参</li>
</ol>
<p>推荐指数：★★（3、4两大致命缺陷）</p>
<h3 id="2、构造继承"><a href="#2、构造继承" class="headerlink" title="2、构造继承"></a>2、构造继承</h3><p><strong>核心：</strong>使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）</p>
<pre><code>function Cat(name){
  Animal.call(this);
  this.name = name || &apos;Tom&apos;;
}

// Test Code
var cat = new Cat();
console.log(cat.name);
console.log(cat.sleep());
console.log(cat instanceof Animal); // false
console.log(cat instanceof Cat); // true
</code></pre><p>特点：</p>
<ol>
<li>解决了1中，子类实例共享父类引用属性的问题</li>
<li>创建子类实例时，可以向父类传递参数</li>
<li>可以实现多继承（call多个父类对象）</li>
</ol>
<p>缺点：</p>
<ol>
<li>实例并不是父类的实例，只是子类的实例</li>
<li>只能继承父类的实例属性和方法，不能继承原型属性/方法</li>
<li>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</li>
</ol>
<p>推荐指数：★★（缺点3）</p>
<h3 id="3、实例继承"><a href="#3、实例继承" class="headerlink" title="3、实例继承"></a>3、实例继承</h3><p><strong>核心：</strong>为父类实例添加新特性，作为子类实例返回</p>
<pre><code>function Cat(name){
  var instance = new Animal();
  instance.name = name || &apos;Tom&apos;;
  return instance;
}

// Test Code
var cat = new Cat();
console.log(cat.name);
console.log(cat.sleep());
console.log(cat instanceof Animal); // true
console.log(cat instanceof Cat); // false
</code></pre><p>特点：</p>
<ol>
<li>不限制调用方式，不管是<code>new 子类()</code>还是<code>子类()</code>,返回的对象具有相同的效果</li>
</ol>
<p>缺点：</p>
<ol>
<li>实例是父类的实例，不是子类的实例</li>
<li>不支持多继承</li>
</ol>
<p>推荐指数：★★</p>
<h3 id="4、拷贝继承"><a href="#4、拷贝继承" class="headerlink" title="4、拷贝继承"></a>4、拷贝继承</h3><pre><code>function Cat(name){
  var animal = new Animal();
  for(var p in animal){
    Cat.prototype[p] = animal[p];
  }
  Cat.prototype.name = name || &apos;Tom&apos;;
}

// Test Code
var cat = new Cat();
console.log(cat.name);
console.log(cat.sleep());
console.log(cat instanceof Animal); // false
console.log(cat instanceof Cat); // true
</code></pre><p>特点：</p>
<ol>
<li>支持多继承</li>
</ol>
<p>缺点：</p>
<ol>
<li>效率较低，内存占用高（因为要拷贝父类的属性）</li>
<li>无法获取父类不可枚举的方法（不可枚举方法，不能使用for in 访问到）</li>
</ol>
<p>推荐指数：★（缺点1）</p>
<h3 id="5、组合继承"><a href="#5、组合继承" class="headerlink" title="5、组合继承"></a>5、组合继承</h3><p><strong>核心：</strong>通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</p>
<pre><code>function Cat(name){
  Animal.call(this);
  this.name = name || &apos;Tom&apos;;
}
Cat.prototype = new Animal();

// Test Code
var cat = new Cat();
console.log(cat.name);
console.log(cat.sleep());
console.log(cat instanceof Animal); // true
console.log(cat instanceof Cat); // true
</code></pre><p>特点：</p>
<ol>
<li>弥补了方式2的缺陷，可以继承实例属性/方法，也可以继承原型属性/方法</li>
<li>既是子类的实例，也是父类的实例</li>
<li>不存在引用属性共享问题</li>
<li>可传参</li>
<li>函数可复用</li>
</ol>
<p>缺点：</p>
<ol>
<li>调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）</li>
</ol>
<p>推荐指数：★★★★（仅仅多消耗了一点内存）</p>
<h3 id="6、寄生组合继承"><a href="#6、寄生组合继承" class="headerlink" title="6、寄生组合继承"></a>6、寄生组合继承</h3><p><strong>核心：</strong>通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点</p>
<pre><code>function Cat(name){
  Animal.call(this);
  this.name = name || &apos;Tom&apos;;
}
(function(){
  // 创建一个没有实例方法的类
  var Super = function(){};
  Super.prototype = Animal.prototype;
  //将实例作为子类的原型
  Cat.prototype = new Super();
})();

// Test Code
var cat = new Cat();
console.log(cat.name);
console.log(cat.sleep());
console.log(cat instanceof Animal); // true
console.log(cat instanceof Cat); //true
</code></pre><p>特点：</p>
<ol>
<li>堪称完美</li>
</ol>
<p>缺点：</p>
<ol>
<li>实现较为复杂</li>
</ol>
<p>推荐指数：★★★★（实现复杂，扣掉一颗星）</p>
<h2 id="附录代码："><a href="#附录代码：" class="headerlink" title="附录代码："></a>附录代码：</h2><p>示例一：</p>
<pre><code>function Animal (name) {
  // 属性
  this.name = name || &apos;Animal&apos;;
  // 实例方法
  this.sleep = function(){
    console.log(this.name + &apos;正在睡觉！&apos;);
  }
  //实例引用属性
  this.features = [];
}
function Cat(name){
}
Cat.prototype = new Animal();

var tom = new Cat(&apos;Tom&apos;);
var kissy = new Cat(&apos;Kissy&apos;);

console.log(tom.name); // &quot;Animal&quot;
console.log(kissy.name); // &quot;Animal&quot;
console.log(tom.features); // []
console.log(kissy.features); // []

tom.name = &apos;Tom-New Name&apos;;
tom.features.push(&apos;eat&apos;);

//针对父类实例值类型成员的更改，不影响
console.log(tom.name); // &quot;Tom-New Name&quot;
console.log(kissy.name); // &quot;Animal&quot;
//针对父类实例引用类型成员的更改，会通过影响其他子类实例
console.log(tom.features); // [&apos;eat&apos;]
console.log(kissy.features); // [&apos;eat&apos;]

原因分析：

关键点：属性查找过程

执行tom.features.push，首先找tom对象的实例属性（找不到），
那么去原型对象中找，也就是Animal的实例。发现有，那么就直接在这个对象的
features属性中插入值。
在console.log(kissy.features); 的时候。同上，kissy实例上没有，那么去原型上找。
刚好原型上有，就直接返回，但是注意，这个原型对象中features属性值已经变化了。
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6 Class如何管理私有数据]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/JS%E6%9C%AD%E8%AE%B0/ES6%20Class%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E7%A7%81%E6%9C%89%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>在ES5时代，要模拟对象的私有变量，是比较容易的，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> _age = <span class="number">20</span>; <span class="comment">//定义一个私有变量，外部无法访问。</span></div><div class="line">  <span class="keyword">this</span>.setAge = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    _age = value;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> _age;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在ES6中，虽然可以在 <code>Class</code> 的 <code>constructor</code> 中实现类似function的私有方法，但是实际上，ES6中并不推荐这种做法。这样极大的加重了对象的实例。</p>
<p>那我们就来看看在ES6中有多少方法可以实现私有数据管理。</p>
<h2 id="1、在构造函数中存储私有数据"><a href="#1、在构造函数中存储私有数据" class="headerlink" title="1、在构造函数中存储私有数据"></a>1、在构造函数中存储私有数据</h2><p>该方式，和在ES5中，没有什么区别。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">var</span> _age = <span class="number">20</span>;</div><div class="line">    <span class="keyword">this</span>.setAge = <span class="function"><span class="params">value</span> =&gt;</span> _age = value;</div><div class="line">    <span class="keyword">this</span>.getAge = <span class="function"><span class="params">_</span> =&gt;</span> _age;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方式有一个变种，就是利用构造参数来存储，减少重新定义变量。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(age)&#123;</div><div class="line">    <span class="keyword">this</span>.setAge = <span class="function"><span class="params">value</span> =&gt;</span> age = value;</div><div class="line">    <span class="keyword">this</span>.getAge = <span class="function"><span class="params">_</span> =&gt;</span> age;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>优点：</strong></p>
<ol>
<li>数据绝对安全，外部无法直接通过属性访问到。</li>
<li>不会与其他私有属性有任何冲突。如 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(); </div><div class="line">p.age = <span class="number">10</span>; </div><div class="line">p.getAge(); <span class="comment">//20</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>代码不怎么优雅，需要把方法设置为实例方法，才能访问到私有数据。</li>
<li>实例方法，比较浪费内存（每个实例都会拷贝一份）。</li>
</ol>
<h2 id="2、通过命名约定来使用私有数据"><a href="#2、通过命名约定来使用私有数据" class="headerlink" title="2、通过命名约定来使用私有数据"></a>2、通过命名约定来使用私有数据</h2><p>该方式是在ES6 Class 中，我个人比较推荐的一个方式，实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>._age = <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setAge(value)&#123;</div><div class="line">    <span class="keyword">this</span>._age = value;</div><div class="line">  &#125;</div><div class="line">  getAge()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._age;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>优点：</strong></p>
<ol>
<li>代码看起来非常不错，简单易懂。</li>
<li>能否在原型方法中访问。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li><p>并不安全，如果不遵守约定，直接操作_age，也是可行的，如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</div><div class="line">p._age = <span class="number">555</span>;</div><div class="line">p.getAge(); <span class="comment">// 555</span></div></pre></td></tr></table></figure>
</li>
<li><p>如果在对象上设置同名属性，会覆盖掉原本是私有属性。</p>
</li>
</ol>
<h2 id="3、利用WeakMap来存储私有数据"><a href="#3、利用WeakMap来存储私有数据" class="headerlink" title="3、利用WeakMap来存储私有数据"></a>3、利用WeakMap来存储私有数据</h2><p>该方式是利用WeakMap可以用Object来做key的特点，把this当做key来存储具体的私有属性。具体实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dataStore = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    dataStore.set(<span class="keyword">this</span>, &#123;<span class="attr">age</span>: <span class="number">20</span>&#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  setAge(value)&#123;</div><div class="line">    <span class="keyword">let</span> oldObj = dataStore.get(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">let</span> newObj = <span class="built_in">Object</span>.assign(oldObj, &#123;<span class="attr">age</span>: value&#125;);</div><div class="line">    dataStore.set(<span class="keyword">this</span>, newObj);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getAge()&#123;</div><div class="line">    <span class="keyword">return</span> dataStore.get(<span class="keyword">this</span>).age;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如何使用？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();</div><div class="line">p1.getAge(); <span class="comment">// 20</span></div><div class="line">p1.setAge(<span class="number">25</span>);</div><div class="line">p1.getAge(); <span class="comment">// 25</span></div></pre></td></tr></table></figure>
<p><strong>优点：</strong></p>
<ol>
<li>能够使用原型方法，内存占用小；</li>
<li>比命名约定属性名称安全性更高；</li>
<li>不会有命名冲突（允许同名实例属性）；</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>代码没有命名约定方式（方式2）优雅；</li>
<li>依赖外部对象；</li>
</ol>
<h2 id="4、利用Symbol来生成私有属性key。"><a href="#4、利用Symbol来生成私有属性key。" class="headerlink" title="4、利用Symbol来生成私有属性key。"></a>4、利用Symbol来生成私有属性key。</h2><p>该方式和命名约定方式没有本质区别，只是用 <code>Symbol</code> 来生成key，提高了key的安全性。具体实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> keyForAge = <span class="built_in">Symbol</span>(<span class="string">'age'</span>); </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>[keyForAge] = <span class="number">20</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  setAge(value)&#123;</div><div class="line">    <span class="keyword">this</span>[keyForAge] = value;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  getAge()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[keyForAge];</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>优点：</strong></p>
<ol>
<li>能够使用原型方法，内存占用小；</li>
<li><p>比命名约定属性名称安全性更高，但也并不安全；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">Object</span>.keys(p1); <span class="comment">// []，无法直接访问到属性名</span></div><div class="line">p1[keyForAge] = <span class="number">30</span>;</div><div class="line">p1.getAge(); <span class="comment">// 30</span></div><div class="line"><span class="built_in">Reflect</span>.ownKeys(p1); <span class="comment">// [Symbol(age)]，通过能方式能遍历Key</span></div></pre></td></tr></table></figure>
</li>
<li><p>不会有命名冲突（允许同名实例属性）；</p>
</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>代码没有命名约定方式（方式2）优雅；</li>
<li>依赖外部对象；</li>
<li>不是绝对安全；</li>
</ol>
<h2 id="5、Other"><a href="#5、Other" class="headerlink" title="5、Other"></a>5、Other</h2><p>能够达到的目的的方式有很多，也没有那个有绝对优势，根据实际的需求，来选择合适的方式才是最佳的方式。</p>
<p><strong>参考资料</strong></p>
<ol>
<li><a href="http://www.2ality.com/2016/01/private-data-classes.html" target="_blank" rel="external">http://www.2ality.com/2016/01/private-data-classes.html</a></li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之毒瘤]]></title>
      <url>http://hstarorg.github.io/blog/blog/2017/02/21/JS%E6%9C%AD%E8%AE%B0/JavaScript%E4%B9%8B%E6%AF%92%E7%98%A4/</url>
      <content type="html"><![CDATA[<h2 id="0、导言"><a href="#0、导言" class="headerlink" title="0、导言"></a>0、导言</h2><p>JavaScript中有许多难以避免的问题特性。接下来就一一揭示。</p>
<h2 id="1、全局变量"><a href="#1、全局变量" class="headerlink" title="1、全局变量"></a>1、全局变量</h2><p>在所有JavaScript的糟糕特性中，最为糟糕的就是全局变量的依赖。全局变量使得在同一个程序中运行独立的子程序变得更难。</p>
<h2 id="2、作用域"><a href="#2、作用域" class="headerlink" title="2、作用域"></a>2、作用域</h2><p>JavaScript是类C的语法，但是却没有提供类C的块级作用域。</p>
<h2 id="3、自动插入分号"><a href="#3、自动插入分号" class="headerlink" title="3、自动插入分号"></a>3、自动插入分号</h2><p>JavaScript有一个自动修复机制，会试图通过自动插入分号来修正有缺损的程序，但是它有可能掩盖更为严重的错误。</p>
<h2 id="4、保留字"><a href="#4、保留字" class="headerlink" title="4、保留字"></a>4、保留字</h2><p>有太多的单词在JavaScript中被保留，它们不能用来命名变量或者函数（在大部分执行环境下，部分关键字是可用的）。</p>
<h2 id="5、Unicode字符"><a href="#5、Unicode字符" class="headerlink" title="5、Unicode字符"></a>5、Unicode字符</h2><p>JavaScript设计之初，Unicode预计只会有65536个字符。实际上，到现在Unicode有多大百万个字符。这也就导致了JavaScript会认为一对字符是两个不同的字符（Unicode把一对字符视为一个单一的字符）</p>
<h2 id="6、typeof"><a href="#6、typeof" class="headerlink" title="6、typeof"></a>6、typeof</h2><p>不要指望typeof返回的类型。比如null或者是检测对象，另外检测正则可能会返回function或者是object。</p>
<h2 id="7、parseInt"><a href="#7、parseInt" class="headerlink" title="7、parseInt"></a>7、parseInt</h2><p>parseInt把一个字符串转换为整数，会在遇到非数字时停止解析。另外如果第一个字符是0，还会按照8进制来取值。</p>
<h2 id="8、运算符（-）"><a href="#8、运算符（-）" class="headerlink" title="8、运算符（+）"></a>8、运算符（+）</h2><p>+运算符可以用于加法运算或者是字符串连接，究竟如何执行会取决于其参数类型。</p>
<h2 id="9、-浮点数"><a href="#9、-浮点数" class="headerlink" title="9、 浮点数"></a>9、 浮点数</h2><p>二进制浮点数不能正确的处理十进制小数，因此0.1+0.2 不等于0.3。</p>
<h2 id="10、NaN"><a href="#10、NaN" class="headerlink" title="10、NaN"></a>10、NaN</h2><p>NaN是一个特殊的数量值，它表示不是一个数字。也是唯一一个不等于自身的JavaScript数值。</p>
<h2 id="11、伪数组"><a href="#11、伪数组" class="headerlink" title="11、伪数组"></a>11、伪数组</h2><p>JavaScript没有真正的数组，就连Array也是通过object来模拟的，如果完全达不到真正的数组的地步。同时typeof运算符也不能辨别数组和对象。</p>
<h2 id="12、假值"><a href="#12、假值" class="headerlink" title="12、假值"></a>12、假值</h2><p>JavaScript中包含诸多的假值，如: 0, NaN, ‘’, false, null, undefined</p>
<h2 id="13、hasOwnProperty"><a href="#13、hasOwnProperty" class="headerlink" title="13、hasOwnProperty"></a>13、hasOwnProperty</h2><p>hasOwnProperty方法被用做一个过滤器来避开for..in语句的隐患，但hasOwnProperty是一个普通的方法，所以是可以被重写的。</p>
<h2 id="14、对象"><a href="#14、对象" class="headerlink" title="14、对象"></a>14、对象</h2><p>JavaScript的对象，永远不会是真的空对象，因为可以从原形链取得成员属性。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[前端构建之gulp与常用插件]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/03/14/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%5B20140311%5D%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E4%B9%8Bgulp%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>##gulp是什么？</p>
<p><a href="http://gulpjs.com/" target="_blank" rel="external">http://gulpjs.com/</a> 相信你会明白的！</p>
<p>与著名的构建工具grunt相比，有什么优势呢？</p>
<ol>
<li>易于使用，代码优于配置</li>
<li>高效，不会产生过多的中间文件，减少I/O压力</li>
<li>易于学习，API非常少，你能在很短的事件内学会gulp</li>
</ol>
<p>##那些常用的gulp插件</p>
<p>###No.1、run-sequence</p>
<p><strong>Links</strong>: <a href="https://www.npmjs.com/package/run-sequence" target="_blank" rel="external">https://www.npmjs.com/package/run-sequence</a></p>
<p><strong>作用</strong>：让gulp任务，可以相互独立，解除任务间的依赖，增强task复用</p>
<p><strong>推荐指数</strong>：★★★★★</p>
<p>###No.2、browser-sync</p>
<p><strong>Links</strong>: <a href="http://www.browsersync.io/" target="_blank" rel="external">http://www.browsersync.io/</a></p>
<p><strong>作用</strong>：静态文件服务器，同时也支持浏览器自动刷新</p>
<p><strong>推荐指数</strong>：★★★★★</p>
<p>###No.3、del</p>
<p><strong>Links</strong>：<a href="https://www.npmjs.com/package/del" target="_blank" rel="external">https://www.npmjs.com/package/del</a></p>
<p><strong>作用</strong>：删除文件/文件夹</p>
<p><strong>推荐指数</strong>：★★★★★</p>
<p>###No.4、gulp-coffee</p>
<p><strong>Links</strong>: <a href="https://github.com/wearefractal/gulp-coffee" target="_blank" rel="external">https://github.com/wearefractal/gulp-coffee</a></p>
<p><strong>作用</strong>：编译coffee代码为Js代码，使用coffeescript必备</p>
<p><strong>推荐指数</strong>：★★★★</p>
<p>###No.5、coffee-script</p>
<p><strong>Links</strong>: <a href="https://www.npmjs.com/package/coffee-script" target="_blank" rel="external">https://www.npmjs.com/package/coffee-script</a></p>
<p><strong>作用</strong>：gulpfile默认采用js后缀，如果要使用gulpfile.coffee来编写，那么需要此模块</p>
<p><strong>推荐指数</strong>：★★★</p>
<p>###No.6、gulp-nodemon</p>
<p><strong>Links</strong>: <a href="https://www.npmjs.com/package/gulp-nodemon" target="_blank" rel="external">https://www.npmjs.com/package/gulp-nodemon</a></p>
<p><strong>作用</strong>：自动启动/重启你的node程序，开发node服务端程序必备</p>
<p><strong>推荐指数</strong>：★★★★★</p>
<p>###No.7、yargs</p>
<p><strong>Links</strong>: <a href="https://www.npmjs.com/package/yargs" target="_blank" rel="external">https://www.npmjs.com/package/yargs</a></p>
<p><strong>作用</strong>：用于获取启动参数，针对不同参数，切换任务执行过程时需要</p>
<p><strong>推荐指数</strong>：★★★</p>
<p>###No.8、gulp-util</p>
<p><strong>Links</strong>: <a href="https://www.npmjs.com/package/gulp-util" target="_blank" rel="external">https://www.npmjs.com/package/gulp-util</a></p>
<p><strong>作用</strong>：gulp常用的工具库</p>
<p><strong>推荐指数</strong>：★★★★★</p>
<p>###No.9、gulp-uglify</p>
<p><strong>Links</strong>: <a href="https://www.npmjs.com/package/gulp-uglify" target="_blank" rel="external">https://www.npmjs.com/package/gulp-uglify</a></p>
<p><strong>作用</strong>：通过UglifyJS来压缩JS文件</p>
<p><strong>推荐指数</strong>：★★★★</p>
<p>###No.9、gulp-concat</p>
<p><strong>Links</strong>: <a href="https://www.npmjs.com/package/gulp-concat" target="_blank" rel="external">https://www.npmjs.com/package/gulp-concat</a></p>
<p><strong>作用</strong>：合并JS</p>
<p><strong>推荐指数</strong>：★★★★</p>
<p>###No.10、gulp-sourcemaps</p>
<p><strong>Links</strong>: <a href="https://www.npmjs.com/package/gulp-sourcemaps" target="_blank" rel="external">https://www.npmjs.com/package/gulp-sourcemaps</a></p>
<p><strong>作用</strong>：处理JS时，生成SourceMap</p>
<p><strong>推荐指数</strong>：★★★★</p>
<p>###No.11、gulp-less</p>
<p><strong>Links</strong>：<a href="https://www.npmjs.com/package/gulp-less" target="_blank" rel="external">https://www.npmjs.com/package/gulp-less</a></p>
<p><strong>作用</strong>：将less预处理为css</p>
<p><strong>推荐指数</strong>：★★★★</p>
<p>###No.12、gulp-sass</p>
<p><strong>Links</strong>：<a href="https://www.npmjs.com/package/gulp-sass" target="_blank" rel="external">https://www.npmjs.com/package/gulp-sass</a></p>
<p><strong>作用</strong>：将sass预处理为css</p>
<p><strong>推荐指数</strong>：★★★★</p>
<p>###No.13、gulp-autoprefixer</p>
<p><strong>Links</strong>：<a href="https://www.npmjs.com/package/gulp-autoprefixer" target="_blank" rel="external">https://www.npmjs.com/package/gulp-autoprefixer</a></p>
<p><strong>作用</strong>：使用Autoprefixer来补全浏览器兼容的css。</p>
<p><strong>推荐指数</strong>：★★★★</p>
<p>###No.14、gulp-minify-css</p>
<p><strong>Links</strong>：<a href="https://www.npmjs.com/package/gulp-minify-css" target="_blank" rel="external">https://www.npmjs.com/package/gulp-minify-css</a></p>
<p><strong>作用</strong>：压缩css。</p>
<p><strong>推荐指数</strong>：★★★★</p>
<p>###No.15、connect-history-api-fallback</p>
<p><strong>Links</strong>：<a href="https://www.npmjs.com/package/connect-history-api-fallback" target="_blank" rel="external">https://www.npmjs.com/package/connect-history-api-fallback</a></p>
<p><strong>作用</strong>：开发angular应用必须，用于支持HTML5 history API.</p>
<p><strong>推荐指数</strong>：★★★</p>
<p>##一般的gulpfile文件（采用coffee编写）</p>
<p>首先是，node应用程序：</p>
<pre><code>gulp = require(&apos;gulp&apos;)
runSequence = require(&apos;run-sequence&apos;)

coffee = require(&apos;gulp-coffee&apos;)
gutil = require(&apos;gulp-util&apos;)
del = require(&apos;del&apos;)
nodemon = require(&apos;gulp-nodemon&apos;)
argv = require(&apos;yargs&apos;).argv
rename = require(&apos;gulp-rename&apos;)
browserSync = require(&apos;browser-sync&apos;)
reload = browserSync.reload

# 处理参数
isDebug = not (argv.r || false)

# --入口任务-----------------------------------------------------------------
gulp.task(&apos;default&apos;, (callback)-&gt;
  runSequence(
    [&apos;clean&apos;]
    [&apos;coffee-server&apos;, &apos;copy-server&apos;, &apos;copy-client&apos;, &apos;coffee-client&apos;, &apos;copy-views&apos;]
    &apos;serve&apos;
    [&apos;browserSync&apos;, &apos;watch&apos;]
    callback
  )
)
# --构建相关任务---------------------------------------
gulp.task(&apos;clean&apos;, (callback)-&gt;
  del([&apos;./dist/&apos;], callback)
)

gulp.task(&apos;coffee-server&apos;, -&gt;
  gulp.src([
    &apos;./src/**/*.coffee&apos;
    &apos;!./src/public/**/*.coffee&apos;
    &apos;!./src/views/**&apos;
  ])
  .pipe(coffee({bare: true}).on(&apos;error&apos;, gutil.log))
  .pipe(gulp.dest(&apos;./dist/&apos;))
)

gulp.task(&apos;copy-server&apos;, -&gt;
  gulp.src([
    &apos;./src/config*/*.json&apos;
    &apos;./src/database*/*.*&apos;
  ])
  .pipe(gulp.dest(&apos;./dist/&apos;))
)

gulp.task(&apos;copy-client&apos;, -&gt;
  gulp.src([
    &apos;./src/public*/**/*&apos;
    &apos;!./src/public*/**/*.coffee&apos;
  ])
  .pipe(gulp.dest(&apos;./dist/&apos;))
)

gulp.task(&apos;coffee-client&apos;, -&gt;
  gulp.src([
    &apos;./src/public*/**/*.coffee&apos;
  ])
  .pipe(coffee({bare: true}).on(&apos;error&apos;, gutil.log))
  .pipe(gulp.dest(&apos;./dist/&apos;))
)

gulp.task(&apos;copy-views&apos;, -&gt;
  gulp.src(&apos;./src/views/**/*.html&apos;)
  .pipe(rename({extname: &apos;.vash&apos;}))
  .pipe(gulp.dest(&apos;./dist/views&apos;))
)


# --启动程序,打开浏览器任务----------------------------------------------------
nodemon_instance = undefined
gulp.task(&apos;serve&apos;, (callback)-&gt;
  called = false
  if not nodemon_instance
    nodemon_instance = nodemon({
      script: &apos;./dist/index.js&apos;
      ext: &apos;none&apos;
    })
    .on(&apos;restart&apos;, -&gt;
      console.log(&apos;restart server......................&apos;)
    )
    .on(&apos;start&apos;, -&gt;
      if not called
        called = true
        callback()
    )
  else
    nodemon_instance.emit(&quot;restart&quot;)
    callback()
  nodemon_instance
)

gulp.task(&apos;browserSync&apos;, -&gt;
  browserSync({
    proxy: &apos;localhost:3000&apos;
    port: 8888
  #files: [&apos;./src/public/**/*&apos;]
    open: true
    notify: true
    reloadDelay: 500 # 延迟刷新
  })
)



# --监视任务------------------------------------------------
gulp.task(&apos;watch&apos;, -&gt;
  gulp.watch([
    &apos;./src/**/*.*&apos;
    &apos;!./src/**/*.coffee&apos;
  ], [&apos;reload-client&apos;])
  gulp.watch(&apos;./src/**/*.coffee&apos;, [&apos;reload-server&apos;])
)

gulp.task(&apos;reload-client&apos;, (callback) -&gt;
  runSequence(
    [&apos;copy-client&apos;, &apos;coffee-client&apos;, &apos;copy-views&apos;]
    &apos;bs-reload&apos;
    callback
  )
)

gulp.task(&apos;reload-server&apos;, (callback) -&gt;
  runSequence(
    [&apos;copy-server&apos;, &apos;coffee-server&apos;]
    &apos;serve&apos;
    &apos;bs-reload&apos;
    callback
  )
)

gulp.task(&apos;bs-reload&apos;, -&gt;
  browserSync.reload()
)
</code></pre><p>接下来是前端网站：</p>
<pre><code>gulp = require(&apos;gulp&apos;)
gutil = require(&apos;gulp-util&apos;)
coffee = require(&apos;gulp-coffee&apos;)
del = require(&apos;del&apos;)
runSequence = require(&apos;run-sequence&apos;)
browserSync = require(&apos;browser-sync&apos;)
historyApiFallback = require(&apos;connect-history-api-fallback&apos;)
# 入口点
gulp.task(&apos;default&apos;, -&gt;
  runSequence(
    [&apos;clean&apos;]
    [&apos;copy&apos;]
    [&apos;serve&apos;]
  )
)

gulp.task(&apos;copy&apos;, -&gt;
  gulp.src([
    &apos;./src/**/*.*&apos;
    &apos;!./src/**/*.coffee&apos;
    &apos;!./src/**/*.less&apos;
  ])
  .pipe(gulp.dest(&apos;./dist&apos;))
)

gulp.task(&apos;clean&apos;, (callback)-&gt;
  del([&apos;./dist/&apos;], callback)
)

gulp.task(&apos;serve&apos;, -&gt;
  browserSync({
    server: {
      baseDir: &quot;./dist&quot;
      middleware: [historyApiFallback]
    }
    port: 2222
  })
)

gulp.task(&apos;watch&apos;, -&gt;
  # do something...
)
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular：指令、Controller数据共享]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/03/13/Angular%E7%9B%B8%E5%85%B3/Angular%EF%BC%9A%E6%8C%87%E4%BB%A4%E3%80%81Controller%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB/</url>
      <content type="html"><![CDATA[<h2 id="1、Directive与Controller数据共享"><a href="#1、Directive与Controller数据共享" class="headerlink" title="1、Directive与Controller数据共享"></a>1、Directive与Controller数据共享</h2><p>在指令中，不仅仅需要指令配置信息，很多时候也需要获取$scope的相关数据。那么，如何在指令中拿到$scope的数据呢？</p>
<h3 id="1-1、Directive和Controller使用同一个scope"><a href="#1-1、Directive和Controller使用同一个scope" class="headerlink" title="1.1、Directive和Controller使用同一个scope"></a>1.1、Directive和Controller使用同一个scope</h3><pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;Angular Demo&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div ng-controller=&quot;DemoCtrl&quot;&gt;
      &lt;d1&gt;&lt;/d1&gt;
    &lt;/div&gt;

    &lt;!-- 脚本区域 --&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
      angular.module(&apos;app&apos;, [])
      .directive(&apos;d1&apos;, [function(){
        return {
          restrict: &apos;E&apos;,
          scope: false, //defualt value is false
          template: &apos;&lt;h1&gt;Hi,{{name}}&lt;/h1&gt;&apos;,
          link: function(scope, iElement, iAttrs){
            console.log(&apos;directive scope id = &apos; + scope.$id);
          }
        }
      }])
      .controller(&apos;DemoCtrl&apos;, [&apos;$scope&apos;, function($scope){
        console.log(&apos;controller scope id = &apos; + $scope.$id);
        $scope.name = &apos;Jay&apos;;
      }]);

      //可以采用如此方式启动angular扫描，或者直接使用ng-app=&quot;app&quot;
      angular.bootstrap(document.body, [&apos;app&apos;]);
    &lt;/script&gt;
    &lt;!-- 脚本区域 End --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>执行以上代码，页面显示Hi Jay，并在控制台打印</p>
<pre><code>controller scope id = 2
directive scope id = 2
</code></pre><p>在指令中，默认会直接使用上级的scope，从控制台来看，先执行controller的scope，再执行directive的scope。因为id一致，所以是同一个scope。既然是同一个scope，那么共享数据自然就不是问题了。该方式，适合业务性质的directive，如果是公共的directive，不建议使用此方式，可能会导致scope杂乱。</p>
<h3 id="1-2、在指令作用域中使用-，将当前属性作为字符串传递"><a href="#1-2、在指令作用域中使用-，将当前属性作为字符串传递" class="headerlink" title="1.2、在指令作用域中使用@，将当前属性作为字符串传递"></a>1.2、在指令作用域中使用@，将当前属性作为字符串传递</h3><pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;Angular Demo&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div ng-controller=&quot;DemoCtrl&quot;&gt;
      &lt;d1 name=&quot;{{key}}&quot;&gt;&lt;/d1&gt;
    &lt;/div&gt;

    &lt;!-- 脚本区域 --&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
      angular.module(&apos;app&apos;, [])
      .directive(&apos;d1&apos;, [function(){
        return {
          restrict: &apos;E&apos;,
          scope: {
            name: &apos;@&apos;
          },
          template: &apos;&lt;h1&gt;Hi,{{name}}&lt;/h1&gt;&apos;,
          link: function(scope, iElement, iAttrs){
            console.log(&apos;directive scope id = &apos; + scope.$id);
          }
        }
      }])
      .controller(&apos;DemoCtrl&apos;, [&apos;$scope&apos;, function($scope){
        console.log(&apos;controller scope id = &apos; + $scope.$id);
        $scope.key = &apos;Jay&apos;;

      }]);

      //可以采用如此方式启动angular扫描，或者直接使用ng-app=&quot;app&quot;
      angular.bootstrap(document.body, [&apos;app&apos;]);
    &lt;/script&gt;
    &lt;!-- 脚本区域 End --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>以上代码，主要修改了指令的scope，从输出来看，指令和controller各自是自己独有的作用域。</p>
<p><code>scope = {name: &#39;@&#39;}</code>，等价于</p>
<pre><code>link:function(scope, iElement, iAttrs){
    scope.name = iAttrs.name;
}
</code></pre><p>Controller中的key的变化，会即时影响到Directive的变化，但是Directive的变化并不会反向影响到Controller，结果近似于单向绑定。</p>
<h3 id="1-3、在指令的作用域中使用-，进行数据的双向绑定"><a href="#1-3、在指令的作用域中使用-，进行数据的双向绑定" class="headerlink" title="1.3、在指令的作用域中使用=，进行数据的双向绑定"></a>1.3、在指令的作用域中使用=，进行数据的双向绑定</h3><pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;Angular Demo&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div ng-controller=&quot;DemoCtrl&quot;&gt;
      key = {{key}}
      &lt;d1 name=&quot;key&quot;&gt;&lt;/d1&gt;
    &lt;/div&gt;

    &lt;!-- 脚本区域 --&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
      angular.module(&apos;app&apos;, [])
      .directive(&apos;d1&apos;, [function(){
        return {
          restrict: &apos;E&apos;,
          scope: {
            name: &apos;=&apos;
          },
          template: &apos;&lt;h1&gt;Hi,{{name}}&lt;/h1&gt;&lt;input type=&quot;text&quot; ng-model=&quot;name&quot; /&gt;&apos;,
          link: function(scope, iElement, iAttrs){
            console.log(&apos;directive scope id = &apos; + scope.$id);
          }
        }
      }])
      .controller(&apos;DemoCtrl&apos;, [&apos;$scope&apos;, function($scope){
        console.log(&apos;controller scope id = &apos; + $scope.$id);
        $scope.key = &apos;Jay&apos;;

      }]);

      //可以采用如此方式启动angular扫描，或者直接使用ng-app=&quot;app&quot;
      angular.bootstrap(document.body, [&apos;app&apos;]);
    &lt;/script&gt;
    &lt;!-- 脚本区域 End --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>以上代码的变化在于，使用了scope: {name: ‘=’}，该代码将父作用域的属性和指令的属性进行双向绑定。所以指令中文本框的值的变化，将会同步影响controller中key的变化。</p>
<p><strong>注意：在使用指令的时候，html代码，并不是和示例1.1一致了，如果是双向绑定，那么应该使用&lt;d1 name=”key” /&gt;，而不是&lt;d1 name=”“&gt;。</strong></p>
<h3 id="1-4、在Directive中调用Controller的方法"><a href="#1-4、在Directive中调用Controller的方法" class="headerlink" title="1.4、在Directive中调用Controller的方法"></a>1.4、在Directive中调用Controller的方法</h3><pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;Angular Demo&lt;/title&gt;
  &lt;/head&gt;
  &lt;body ng-app=&quot;app&quot;&gt;
    &lt;div ng-controller=&quot;DemoCtrl&quot;&gt;
      key = {{key}}
      &lt;d1 name=&quot;key&quot; show-name=&quot;show(key)&quot;&gt;&lt;/d1&gt;
    &lt;/div&gt;

    &lt;!-- 脚本区域 --&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
      angular.module(&apos;app&apos;, [])
      .directive(&apos;d1&apos;, [function(){
        return {
          restrict: &apos;E&apos;,
          scope: {
            name: &apos;=&apos;,
            showName: &apos;&amp;&apos;
          },
          template: &apos;&lt;h1&gt;Hi,{{name}}&lt;/h1&gt;&lt;input type=&quot;text&quot; ng-model=&quot;name&quot; /&gt;&apos; 
          + &apos;&lt;button ng-click=&quot;showName(name)&quot;&gt;Show&lt;/button&gt;&apos;,
          link: function(scope, iElement, iAttrs){
            console.log(&apos;directive scope id = &apos; + scope.$id);
          }
        }
      }])
      .controller(&apos;DemoCtrl&apos;, [&apos;$scope&apos;, function($scope){
        console.log(&apos;controller scope id = &apos; + $scope.$id);
        $scope.key = &apos;Jay&apos;;
        $scope.show = function(name){
            alert(name);
        };
      }]);
    &lt;/script&gt;
    &lt;!-- 脚本区域 End --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>点击指令生成的按钮，会执行controller的show方法，利用在scope: {showName: ‘&amp;’}，可以将父级作用域的方法绑定到指令中。</p>
<p><strong>注意，一定要注意属性命令，在html中书写showName，那么在iAttrs中对应showname，只有在html中书写show-name,在会在iAttrs中对应showName。</strong></p>
<h2 id="2、在controller中，拿到directive的作用域"><a href="#2、在controller中，拿到directive的作用域" class="headerlink" title="2、在controller中，拿到directive的作用域"></a>2、在controller中，拿到directive的作用域</h2><h3 id="2-1、拿到scope的元素，调用isolateScope获取scope"><a href="#2-1、拿到scope的元素，调用isolateScope获取scope" class="headerlink" title="2.1、拿到scope的元素，调用isolateScope获取scope"></a>2.1、拿到scope的元素，调用isolateScope获取scope</h3><pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;Angular Demo&lt;/title&gt;
  &lt;/head&gt;
  &lt;body ng-app=&quot;app&quot;&gt;
    &lt;div ng-controller=&quot;DemoCtrl&quot;&gt;
      key = {{key}}
      &lt;button ng-click=&quot;click()&quot;&gt;Click&lt;/button&gt;
      &lt;hr /&gt;
      &lt;d1 id=&quot;d1&quot; name=&quot;key&quot; show-name=&quot;show(key)&quot;&gt;&lt;/d1&gt;
    &lt;/div&gt;

    &lt;!-- 脚本区域 --&gt;
    &lt;script src=&quot;//ajax.aspnetcdn.com/ajax/jQuery/jquery-2.1.3.min.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
      angular.module(&apos;app&apos;, [])
      .directive(&apos;d1&apos;, [function(){
        return {
          restrict: &apos;E&apos;,
          scope: {}, //等价于 scope: true
          template: &apos;&lt;h1&gt;Hi,{{name}}&apos;,
          link: function(scope, iElement, iAttrs){
            scope.name = &apos;directive name&apos;;
            console.log(&apos;directive scope id = &apos; + scope.$id);
          }
        }
      }])
      .controller(&apos;DemoCtrl&apos;, [&apos;$scope&apos;, function($scope){
        console.log(&apos;controller scope id = &apos; + $scope.$id);
        $scope.click = function(){
          var dirScope = $(&apos;#d1&apos;).isolateScope();
          alert(dirScope.name);
        }
      }]);
    &lt;/script&gt;
    &lt;!-- 脚本区域 End --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>此代码中，利用$(‘#d1’).isolateScope，拿到了该指令的scope，所以可以随时方式，该方式在多种指令中也有效。</p>
<p><strong>如果判断应该用isolateScope()还是scope()获取作用域？一个最简单的方式，用F12查看源码，找到该元素，然后查看class是ng-isolate-scope还是ng-scope</strong></p>
<h2 id="3、-指令之间相互获取数据"><a href="#3、-指令之间相互获取数据" class="headerlink" title="3、 指令之间相互获取数据"></a>3、 指令之间相互获取数据</h2><h3 id="3-1、通过directive依赖来共享数据"><a href="#3-1、通过directive依赖来共享数据" class="headerlink" title="3.1、通过directive依赖来共享数据"></a>3.1、通过directive依赖来共享数据</h3><pre><code>&lt;script&gt;
      angular.module(&apos;app&apos;, [])
      .directive(&apos;d1&apos;, [function(){
        return {
          restrict: &apos;E&apos;,
          require: &apos;^ngModel&apos;,
          scope: {}, //等价于 scope: true
          template: false,
          link: function(scope, iElement, iAttrs, ngModelCtrl){

          }
        }
      }])
      .controller(&apos;DemoCtrl&apos;, [&apos;$scope&apos;, function($scope){

      }]);
&lt;/script&gt;
</code></pre><h3 id="3-2、通过如2-1的方式获取数据"><a href="#3-2、通过如2-1的方式获取数据" class="headerlink" title="3.2、通过如2.1的方式获取数据"></a>3.2、通过如2.1的方式获取数据</h3><h2 id="4、-其他Hacky的方式"><a href="#4、-其他Hacky的方式" class="headerlink" title="4、 其他Hacky的方式"></a>4、 其他Hacky的方式</h2><ol>
<li>通过<code>$parent</code>访问父级作用域</li>
<li>通过<code>$$prevSibling</code>访问该作用域的上一个兄弟作用域</li>
<li>通过<code>$$nextSibling</code>访问该作用域的下一个兄弟作用域</li>
<li>通过<code>$$childHead</code>访问儿子作用域的第一个</li>
<li>通过<code>$$childTail</code>访问儿子作用域的最后一个</li>
</ol>
<h2 id="5、参考资料"><a href="#5、参考资料" class="headerlink" title="5、参考资料"></a>5、参考资料</h2><ol>
<li><p><a href="http://tech.blinemedical.com/sharing-data-between-child-and-parent-directives-and-scopes-in-angularjs/" target="_blank" rel="external">SHARING DATA BETWEEN CHILD AND PARENT DIRECTIVES AND SCOPES (IN ANGULARJS)</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/bigdataZJ/p/AngularJS1.html" target="_blank" rel="external">directive和controller如何通信</a></p>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Angular：如何编写一个指令]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/03/13/Angular%E7%9B%B8%E5%85%B3/%5B20140917%5DAngular%EF%BC%9A%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="Angular是什么？"><a href="#Angular是什么？" class="headerlink" title="Angular是什么？"></a>Angular是什么？</h2><p>AngularJS是一个用JavaScript编写的客户端MVC框架，它运行于Web浏览器，能够极大的帮助我们（开发者）编写模块化，单页面，Ajax风格的Web Applications。</p>
<p>PS：<strong>AngularJS适合开发CRUD的SPA</strong></p>
<h2 id="Angular-Directive是什么？"><a href="#Angular-Directive是什么？" class="headerlink" title="Angular Directive是什么？"></a>Angular Directive是什么？</h2><p>Angular Directive是构建在DOM元素（属性、标签名、注释和CSS类）上的标记，告诉AngularJS的HTML编译器($compile) 附加指定的行为到元素或者甚至变换这个元素和它的子集。</p>
<p>PS：<strong>通过扩展HTML标签的方式提供可复用的web组件</strong></p>
<p>PS2：<strong>指令的作用：提供语义化标签</strong></p>
<h2 id="完整的Directive参数"><a href="#完整的Directive参数" class="headerlink" title="完整的Directive参数"></a>完整的Directive参数</h2><pre><code>var directiveModule=angular.module(&apos;Newkit.negHotkeys&apos;);
directiveModule.directive(&apos;negHotkeys&apos;,function(injectables){
    var directiveDefineObject={
        restrict:(string), 
        priority:(number),
        template:(string),
        templateUrl:(string),
        replace:(bool),
        transclude:(bool),
        scope:(bool or object),
        controller:(function),
        require:(string),
        link:(function)
        compile:(function)
    };
    return directiveDefineObject;
});
</code></pre><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><ul>
<li>restrict：(string)指令的使用方式，可选值：元素[E]、属性[A]、样式类[C]、注释[M]，并且可以采用组合的方式使用，示例：’AE’</li>
<li>priority：(number)优先级，描述了多个指令时，指令的执行顺序。数字越大，优先级越高，默认值0。</li>
<li>template：(string)文本模板</li>
<li>templateUrl：(string)模板文件地址，如果设置了该属性，那么将会忽略template的配置。</li>
<li>replace：(bool)指示是否替换元素，如果设置为true,则替换，否则（设置为false或不设置）追加到元素内部</li>
<li>transclude：(bool)是否将指令的子节点移动到一个新模板内部，如果在模板中指定了ng-transclude，那么会将元素原本的内容移动到新的模板内部，具体看示例二</li>
<li>scope：(bool or object)设置作用域，如果设置为false[默认值]，则使用现有的作用域；如果设置为true，则创建一个新的作用域。设置为object时，设定作用域绑定策略</li>
<li>controller：创建一个控制器，它会暴露一个API，实现在多个指令之间进行通信</li>
<li>require：设置依赖的指令。不设置，则无依赖，示例：’?\^testDirective’，其中，?表示该指令可选，^表示需要遍历DOM树查找指令</li>
<li>link：链接函数，function(scope,iElement,iAttrs){}，其中的i表示实例，所以在link中接收的是实例元素和实例元素属性</li>
<li>compile：编译函数，function(tElement,tAttrs,transclude){}，其中t表示模板，所以在compile中使用的是模板元素。在编译过程中，可以返回preLink(链接前)，postLink(链接后)函数，compile函数只会调用一次，而link函数的调用次数等于things中的元素个数，所以多余共同的东西，那么最好放在compile函数中实现（出于效率考虑） <strong>注：设置了compile属性之后，指令将忽略link属性，同时compile函数的返回值将作为link函数使用</strong></li>
</ul>
<h2 id="Angular-Directive-示例"><a href="#Angular-Directive-示例" class="headerlink" title="Angular Directive 示例"></a>Angular Directive 示例</h2><h3 id="示例一-简单指令"><a href="#示例一-简单指令" class="headerlink" title="示例一(简单指令)"></a>示例一(简单指令)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!--demo1指令定义--&gt;</div><div class="line">angular.module(<span class="string">'app'</span>).directive(<span class="string">'demo1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">restrict</span>:<span class="string">'AE'</span>,<span class="comment">/*标签或者属性*/</span></div><div class="line">    template:<span class="string">'&lt;div&gt;Hello&lt;/div&gt;'</span>,</div><div class="line">    <span class="attr">replace</span>:<span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="xml"><span class="comment">&lt;!--使用--&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>	</div><div class="line">    <span class="tag">&lt;<span class="name">demo1</span>&gt;</span><span class="tag">&lt;/<span class="name">demo1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-demo1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--结果(指令将满足条件的元素替换为了新的内容)--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">demo1</span>=<span class="string">""</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="操作步骤分析"><a href="#操作步骤分析" class="headerlink" title="操作步骤分析"></a>操作步骤分析</h3><ol>
<li>定义一个模块app，并创建了一个指令demo1。</li>
<li>设定该指令可采用元素的标签和属性申明，并设置了一个文本模板，同时设置了replace=true。</li>
<li>在html中，采用标签如<em>&lt;demo1&gt;&lt;/demo1&gt;</em>和属性<em>&lt;div demo1&gt;&lt;/div&gt;</em>来实现调用</li>
</ol>
<h3 id="示例二（变换）"><a href="#示例二（变换）" class="headerlink" title="示例二（变换）"></a>示例二（变换）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!--demo2指令定义--&gt;</div><div class="line">angular.module(<span class="string">'app.directive.demo2'</span>,[]).directive(<span class="string">'demo2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>:<span class="string">'E'</span>,</div><div class="line">        <span class="attr">template</span>:<span class="string">'&lt;div&gt;This is Demo2&lt;div ng-transclude&gt;&lt;/div&gt;&lt;/div&gt;'</span>,</div><div class="line">        <span class="attr">transclude</span>:<span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;!--使用--&gt;</div><div class="line">&lt;demo2&gt;</div><div class="line">    &lt;span&gt;原始的内容，&lt;/span&gt;&lt;br/&gt;</div><div class="line">    &lt;span&gt;还会在这里。&lt;/span&gt;</div><div class="line">&lt;/demo2&gt;</div><div class="line">&lt;demo2&gt;&lt;/demo2&gt;</div><div class="line"></div><div class="line">&lt;!--页面生成的HTML--&gt;</div><div class="line">  &lt;demo2&gt;</div><div class="line">  &lt;div&gt;This is Demo2</div><div class="line">    &lt;div ng-transclude=""&gt;</div><div class="line">          &lt;span class="ng-scope"&gt;原始的内容，&lt;/span&gt;&lt;br class="ng-scope"&gt;</div><div class="line">          &lt;span class="ng-scope"&gt;还会在这里。&lt;/span&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/demo2&gt;</div><div class="line">&lt;demo2&gt;</div><div class="line">  &lt;div&gt;This is Demo2</div><div class="line">    &lt;div ng-transclude=""&gt;&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/demo2&gt;</div></pre></td></tr></table></figure>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol>
<li>通过在指令中设置transclude=true，同时在template中包含<em>&lt;div ng-transclude&gt;</em>，实现了将元素内部元素移动到了ng-transclude元素内部，并创建了新的作用域</li>
</ol>
<h3 id="示例三（link与compile）"><a href="#示例三（link与compile）" class="headerlink" title="示例三（link与compile）"></a>示例三（link与compile）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*指令*/</span></div><div class="line">angular.module(<span class="string">'app.directive.demo3'</span>,[]).directive(<span class="string">'demo3Link'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> &#123;</div><div class="line">       <span class="attr">restrict</span>:<span class="string">'E'</span>,</div><div class="line">       <span class="attr">template</span>:<span class="string">'&lt;div&gt;This is Demo3Link&lt;/div&gt;'</span>,</div><div class="line">       <span class="attr">link</span>:<span class="function"><span class="keyword">function</span>(<span class="params">scope,iElement,iAttrs</span>)</span>&#123;</div><div class="line">           iElement.html(<span class="string">'&lt;div&gt;good link&lt;/div&gt;'</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;).directive(<span class="string">'demo3Compile'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">return</span> &#123;</div><div class="line">           <span class="attr">restrict</span>:<span class="string">'E'</span>,</div><div class="line">           <span class="attr">template</span>:<span class="string">'&lt;div&gt;This is Demo3Compile&lt;/div&gt;'</span>,</div><div class="line">           <span class="attr">compile</span>:<span class="function"><span class="keyword">function</span>(<span class="params">tElement,tAttrs,transclude</span>)</span>&#123;</div><div class="line">               tElement.html(<span class="string">'&lt;div&gt;test demo3 compile&lt;/div&gt;'</span>);</div><div class="line">               <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">scope,iElement,iAttrs</span>)</span>&#123;</div><div class="line">                   <span class="comment">//iElement.html('&lt;div&gt;good compile&lt;/div&gt;');</span></div><div class="line">               &#125;;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;);</div><div class="line"></div><div class="line"><span class="comment">/*使用*/</span></div><div class="line">&lt;demo3-link&gt;&lt;/demo3-link&gt;</div><div class="line">   &lt;demo3-link&gt;&lt;/demo3-link&gt;</div><div class="line">   &lt;demo3-compile&gt;&lt;/demo3-compile&gt;</div><div class="line"></div><div class="line">/*页面生成的HTML*/</div><div class="line">   &lt;demo3-link&gt;&lt;div&gt;good link&lt;/div&gt;&lt;/demo3-link&gt;</div><div class="line">   &lt;demo3-link&gt;&lt;div&gt;good link&lt;/div&gt;&lt;/demo3-link&gt;</div><div class="line">   &lt;demo3-compile&gt;&lt;div&gt;test demo3 compile&lt;/div&gt;&lt;/demo3-compile&gt;</div></pre></td></tr></table></figure>
<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>compile用于在编译期处理模板内容，并能设置preLink和postLink函数，此时将不能设置link函数，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">compile:function(tElement,tAttrs,transclude)&#123;</div><div class="line">    tElement.html(&apos;&lt;div&gt;test demo3 compile&lt;/div&gt;&apos;);</div><div class="line">    return &#123;</div><div class="line">        pre:function preLink(scope,iElement,iAttrs)&#123;</div><div class="line">            console.log(&apos;preLink&apos;);</div><div class="line">        &#125;,</div><div class="line">        post:function postLink(scope,iElement,iAttrs)&#123;</div><div class="line">            console.log(&apos;postLink&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>link用于对替换后的元素进行操作，如果参数是iElement。</p>
<h3 id="示例四（简单加法计算器）"><a href="#示例四（简单加法计算器）" class="headerlink" title="示例四（简单加法计算器）"></a>示例四（简单加法计算器）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/*代码在这里*/</div><div class="line">angular.module(&apos;app.directive.demo4&apos;,[]).directive(&apos;demo4&apos;,function()&#123;</div><div class="line">    return &#123;</div><div class="line">        restrict:&apos;E&apos;,</div><div class="line">        template:&apos;&lt;fieldset&gt;&lt;legend&gt;计算两个数之和&lt;/legend&gt;&apos; +</div><div class="line">            &apos;&lt;div&gt;&lt;input type=&quot;text&quot; ng-model=&quot;num1&quot;&gt;+&lt;input type=&quot;text&quot; ng-model=&quot;num2&quot;&gt;=&lt;span&gt;&#123;&#123;total&#125;&#125;&lt;/span&gt;&lt;/div&gt;&apos; +</div><div class="line">            &apos;&lt;/fieldset&gt;&apos;,</div><div class="line">        replace:true,</div><div class="line">        link:function(scope,iElement,iAttrs)&#123;</div><div class="line">            scope.num1=0;</div><div class="line">            scope.num2=0;</div><div class="line">            scope.total=0;</div><div class="line">            scope.$watch(&apos;num1+num2&apos;,function(to,from)&#123;</div><div class="line">                scope.total=+scope.num1+(+scope.num2)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">/*HTML在这里*/</div><div class="line">&lt;demo4&gt;&lt;/demo4&gt;、</div><div class="line"></div><div class="line">/*效果请自行测试*/</div></pre></td></tr></table></figure>
<h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>可以利用指令完成特定的功能了。</p>
<h3 id="示例五（negHotkeys指令代码）"><a href="#示例五（negHotkeys指令代码）" class="headerlink" title="示例五（negHotkeys指令代码）"></a>示例五（negHotkeys指令代码）</h3><p><a href="http://trgit/backend_framework/web_platform/blob/master/src/framework/js/directives/custom/negHotKeys.coffee" target="_blank" rel="external">代码在这里</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>指令依附于模块</li>
<li>一个模块可以有多个指令，但是需要采用示例三的写法</li>
<li>指令可以语义化标签，实现html组件化</li>
<li>其他…</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[AngularJS：Looking under the hood]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/03/13/Angular%E7%9B%B8%E5%85%B3/AngularJS%EF%BC%9ALooking%20under%20the%20hood/</url>
      <content type="html"><![CDATA[<p>原文地址：<a href="https://www.binpress.com/tutorial/angular-js-looking-under-the-hood/153" target="_blank" rel="external">https://www.binpress.com/tutorial/angular-js-looking-under-the-hood/153</a></p>
<p><strong>用AngularJS写得越多，你就越惊叹于它的神奇。我对Angular能做的一些奇妙的事情非常好奇，然后我决定分析它的源代码，看看我能否揭示它的一些秘密。我记录了我在23000多行Angular源码中发现的真正有用的，能够解释Angular先进（和隐藏）的方面的一些内容。</strong></p>
<h2 id="1、Dependency-Injection-annotation-process"><a href="#1、Dependency-Injection-annotation-process" class="headerlink" title="1、Dependency Injection annotation process"></a>1、Dependency Injection annotation process</h2><p>依赖注入（DI）是除开用代码获取或创建依赖之外的一条不同的请求依赖的方式。简单的说，依赖是作为一个注入对象传递给我们的。Angular允许我们在我们的应用程序中通过像Controllers和Directives的方法来使用DI。我们能创建自己的依赖，同时允许Angular在请求它们的时候被注入。</p>
<p>在Angular中，一个最常用的被请求的依赖是 <em>$scope</em>。例如：</p>
<pre><code>function MainCtrl ($scope){
    //access to $scope
}
angular.module(&apos;app&apos;).controller(&apos;MainCtrl&apos;, MainCtrl);
</code></pre><p>对于没有使用过Angular提供的依赖注入的JavaScript开发者来说，这看起来像一个局部变量名。实际上，它仅仅是我们所请求的依赖名称的一个占位符。Angular查找这些占位符，然后通过DI将它们转换为真正的依赖对象，让我们来仔细看看。</p>
<h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><p>直到我们压缩我们的应用前，方法参数都运行正常。当你压缩你的代码，你的方法定义将会用字符表示参数而不是单词-这意味着Angular不能找到你想要的！Angular使用了一个方式来解决，调用function的 <em>toString()</em> 方法。这将返回函数的字符串形式！接下来我们就能访问正在被请求的参数。Angular</p>
<pre><code>var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
</code></pre><p>Angular做的第一件事就是将函数转换为字符串，这是JavaScript中非常有用的一个特性。这将给我们一个字符串类型的函数，如：</p>
<pre><code>&apos;function MainCtrl ($scope) {...}&apos;
</code></pre><p>接下来，Angular使用如下方法，移除所有的注释：</p>
<pre><code>fnText = fn.toString().replace(STRIP_COMMENTS, &apos;&apos;);
</code></pre><p>紧接着，Angular从处理好的function中分割参数来创建真正有用的部分，</p>
<pre><code>argDecl = fnText.match(FN_ARGS);
</code></pre><p>Angular接下来使用 <em>.split()</em> 来移除空白字符，同时返回我们请求的参数数组。为了更完美，Angular使用了一个内部的forEach方法来迭代这个数组，并匹配参数名称然后将它们添加到 <em>$inject</em> 数组中。</p>
<pre><code>forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
  arg.replace(FN_ARG, function(all, underscore, name) {
    $inject.push(name);
  });
});
</code></pre><p>这是你能想象的一个昂贵的处理流程。对每个函数的4个正则查找和一很多转换会造成性能损耗。当我们得到了Angular抽象的 <em>$inject</em> 数组，我们可以直接切入且田填充 <em>$inject</em> 数组来保存Angular困难和开销时间长的操作。</p>
<h3 id="inject-对象"><a href="#inject-对象" class="headerlink" title="$inject 对象"></a>$inject 对象</h3><p>我们可以通过在函数上添加 <em>$inject</em>属性来指定依赖自身，其中，如果存在的话，Angular使用DI注解。这是很容易的最可读的语法。例子如下：</p>
<pre><code>function SomeCtrl ($scope) {
}
SomeCtrl.$inject = [&apos;$scope&apos;];
angular.module(&apos;app&apos;, [])
    .controller(&apos;SomeCtrl&apos;, [&apos;$scope&apos;, SomeCtrl]);
</code></pre><p>这样节省了Angular的许多工作-替代了检查方法参数，或者是操纵数组（详情请查看下一章节：Array Arguments）,它仅仅返回和运行指定的 <em>$inject</em> 数组。简单，高性能。</p>
<p>理想情况下，由于依赖注入在我们自己的时间和Angular的转换时间上开销很大，我们可以使用任务运行工具如Grunt.js或者是Gulp.js 来自动化注入任务或者是数组语法。</p>
<p><strong>Note：这个并没有实例化被依赖的所有服务，Angular所做的只是标注相关的名字-框架的其他部分关心对象注入。</strong></p>
<h3 id="Array-Arguments"><a href="#Array-Arguments" class="headerlink" title="Array Arguments"></a>Array Arguments</h3><p>最后一个例子使用了我们通常看见的数组索引对应函数参数序号的语法，例如：</p>
<pre><code>[&apos;$scope&apos;, function($scope){}]
</code></pre><p>数组的顺序是非常重要的，因为函数的参数将会按照同样的顺序，以此来避免依赖被错误的实例化和可能引发的错误。</p>
<pre><code>function SomeCtrl ($scope, $rootScope) {    
}    
angular.module(&apos;app&apos;, [])
    .controller(&apos;SomeCtrl&apos;, [&apos;$scope&apos;, ‘$rootScope’, SomeCtrl]);
</code></pre><p>我们需要做的是传递函数作为数组的最后一个项，Angular会删除这个函数，并遍历数组所注明的依赖名称，就好像我们创建的 <em>$inject</em> 属性。当Angular解析一个方法的时候，它会检查参数是不是一个数组，如果是，那么最后一项是函数，其他的则是依赖。</p>
<pre><code>else if (isArray(fn)) {
  last = fn.length - 1;
  assertArgFn(fn[last], &apos;fn&apos;);
  $inject = fn.slice(0, last);
}
</code></pre><h2 id="2、Factory-vs-Service"><a href="#2、Factory-vs-Service" class="headerlink" title="2、Factory vs Service"></a>2、Factory vs Service</h2><p>Factory 和 Service 非常类似，但往往开发人员都难以理解它们。</p>
<p>当 <em>.service()</em> 已经实例化，那么 <em>new Service()</em> 将被引擎调用，返回一个新实例给我们。本质上，<em>。.service()</em> 是作为构造函数被使用的。</p>
<p>service 基本上是一个 factory，然而它是创建时被实例化，因为，你需要在 service 中使用this来注册变量和函数，来替代在factory中返回一个对象的方式。</p>
<p>factory 是非常接近面向对象中的“工厂模式”，当你注入了这个 factory ,你就获得了完整的方法，允许你创建你需要的新的实例-本质上是通过一个对象创建多个新对象。</p>
<p>你可以看下在Angular源码中的内部的工作：</p>
<pre><code>function factory(name, factoryFn) { 
    return provider(name, { $get: factoryFn }); 
}
function service(name, constructor) {
    return factory(name, [&apos;$injector&apos;, function($injector) {
        return $injector.instantiate(constructor);
    }]);
}
</code></pre><h2 id="3、New-scope-creation-from-rootScope"><a href="#3、New-scope-creation-from-rootScope" class="headerlink" title="3、New $scope creation from $rootScope"></a>3、New $scope creation from $rootScope</h2><p>Angular中所有的scope都是 <em>$rootScope</em> 的下级。 <em>$rootScope</em> 是通过 <em>new Scope()</em>创建的，进一步的子 scope 是通过 <em>$scope.$new()</em> 创建的。</p>
<pre><code>var $rootScope = new Scope();
</code></pre><p>在 <em>$new</em> 方法里面，Angular设置了一个原型链来允许允许 scope 引用它们的父亲，它们的自己跟踪（作为生命周期），和以前的兄弟 scope 。</p>
<p>从下面的代码，如果你请求了一个隔离的 scope ，它会创建一个 <em>new Scope()</em> ,否则，它会创建一个从父级继承的子 scope 。</p>
<p>我省略了一些不必要的代码，但这里的是重点：</p>
<pre><code>$new: function(isolate) {
    var child;

    if (isolate) {
      child = new Scope();
      child.$root = this.$root;
    } else {
      // Only create a child scope class if somebody asks for one,
      // but cache it to allow the VM to optimize lookups.
      if (!this.$$ChildScope) {
        this.$$ChildScope = function ChildScope() {
          this.$$watchers = null;
        };
        this.$$ChildScope.prototype = this;
      }
      child = new this.$$ChildScope();
    }
    child[&apos;this&apos;] = child;
    child.$parent = this;
    return child;
  }
</code></pre><p>当你使用<em>$scope.$new()</em>来测试Controller的时候，这也是非常好的能了解测试目的。这有助于明确对我来说Angular是如何创建新的scope的，为什么用Angular mocks 模块来嘲笑测试驱动开发（TDD）。</p>
<h2 id="4、Digest-Cycle"><a href="#4、Digest-Cycle" class="headerlink" title="4、Digest Cycle"></a>4、Digest Cycle</h2><p>Digest Cycle 经常作为 <em>$digest</em> 被我们看到，这是Angular双向绑定的能力。当一个模型值更新的时候，它会运行，检查它最后已知的值，如果值有变化，呼叫适当的监听器。这是基本的脏检查 - 它针对所有有可能的值来检查，如果是脏值，那么呼叫相关的监听器，直到他没有脏值。我们快速看一下它是如何工作的：</p>
<pre><code>$scope.name = &apos;Todd&apos;;

$scope.$watch(function() {
    return $scope.name;
}, function (newValue, oldValue) {
    console.log(&apos;$scope.name was updated!&apos;);
} );
</code></pre><p>当你调用 <em>$scope.$watch</em>，你注册了两件事。参数一是一个函数，返回你想要监视的值（当你提供一个字符串的时候，Angualr会将他转换为函数）。当 $digest 运行时，监视的参数将被调用，返回任何你想要的值。参数二是当你的参数一变化时，想要执行的函数。看一下Angular是怎样注册watch的。</p>
<pre><code>$watch: function(watchExp, listener, objectEquality) {
    var get = $parse(watchExp);

    if (get.$$watchDelegate) {
      return get.$$watchDelegate(this, listener, objectEquality, get);
    }
    var scope = this,
        array = scope.$$watchers,
        watcher = {
          fn: listener,
          last: initWatchVal,
          get: get,
          exp: watchExp,
          eq: !!objectEquality
        };

    lastDirtyWatch = null;

    if (!isFunction(listener)) {
      watcher.fn = noop;
    }

    if (!array) {
      array = scope.$$watchers = [];
    }
    // we use unshift since we use a while loop in $digest for speed.
    // the while loop reads in reverse order.
    array.unshift(watcher);

    return function deregisterWatch() {
      arrayRemove(array, watcher);
      lastDirtyWatch = null;
    };
 }
</code></pre><p>这个函数推送你提供的参数到 scope 的 <em>$$watchers</em> 数组中，同时，返回一个方法允许你停止watch。</p>
<p>然后，每当<em>$scope.$apply</em>或者<em>$scope.$digest</em> 运行时，digest cycle将被运行。</p>
<h3 id="未完…待续…"><a href="#未完…待续…" class="headerlink" title="未完…待续…"></a>未完…待续…</h3>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[AngularJS官方FAQ]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/03/13/Angular%E7%9B%B8%E5%85%B3/AngularJS%E5%AE%98%E6%96%B9FAQ/</url>
      <content type="html"><![CDATA[<h2 id="相关：最佳实践，反模式"><a href="#相关：最佳实践，反模式" class="headerlink" title="相关：最佳实践，反模式"></a>相关：最佳实践，反模式</h2><h3 id="1、为什么会觉得jQuery插件缺失？"><a href="#1、为什么会觉得jQuery插件缺失？" class="headerlink" title="1、为什么会觉得jQuery插件缺失？"></a>1、为什么会觉得jQuery插件缺失？</h3><p>请记住：当你在使用jQuery插件时，请在AngularJS之前加载jQuery库</p>
<p><strong>分析：</strong> 因为AngularJS自带jqLite（可以理解为jQuery的精简版），如果先引入AngularJS的话，那么AngularJS会采用jqLite，而不是完整的jQuery库。</p>
<h3 id="2、如何从一个Controller中访问DOM元素？"><a href="#2、如何从一个Controller中访问DOM元素？" class="headerlink" title="2、如何从一个Controller中访问DOM元素？"></a>2、如何从一个Controller中访问DOM元素？</h3><p>不要从Controller中执行DOM的选择/遍历。HTML还没有被渲染。查一查”directive“</p>
<h3 id="3、为什么Angular说-controller-directive等缺失？"><a href="#3、为什么Angular说-controller-directive等缺失？" class="headerlink" title="3、为什么Angular说 controller/directive等缺失？"></a>3、为什么Angular说 controller/directive等缺失？</h3><p>调用 <code>angular.module(&#39;myApp&#39;,[])</code> 总是会创建一个新的模块（同时干掉已有的重名模块）。相反，使用一个参数的方式调用 angular.module(‘myApp’) 来引用已经存在的模块。</p>
<h3 id="4、如何渲染未转义的数据？"><a href="#4、如何渲染未转义的数据？" class="headerlink" title="4、如何渲染未转义的数据？"></a>4、如何渲染未转义的数据？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$sce.trustAsHtml(data)</div><div class="line">如何禁用$sce?</div><div class="line">app.config([<span class="string">'$sceProvider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$sceProvider</span>) </span>&#123;</div><div class="line">    $sceProvider.enabled(<span class="literal">false</span>);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<h3 id="5、当array-object-resource-result变化时，应该如何监视？"><a href="#5、当array-object-resource-result变化时，应该如何监视？" class="headerlink" title="5、当array/object/$resource-result变化时，应该如何监视？"></a>5、当array/object/$resource-result变化时，应该如何监视？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$scope.$watch 有第三个参数设置来监视值变化（非引用变化）</div><div class="line">$watch(watchExpression, listener, [objectEquality]);</div><div class="line">[objectEquality]设置为<span class="literal">true</span>，则使用angular.equals对象相等，而不是使用引用相等比较。</div></pre></td></tr></table></figure>
<h3 id="6、怎样才能序列化表单数据提交？"><a href="#6、怎样才能序列化表单数据提交？" class="headerlink" title="6、怎样才能序列化表单数据提交？"></a>6、怎样才能序列化表单数据提交？</h3><p><strong>不要这么做！</strong> 不要尝试手动收集输入框值。仅仅只需要在每一个表单元素上附加 <code>ng-model=&quot;data.myField</code>，在需要使用的地方，使用 <code>$scope.data</code> 即可</p>
<h3 id="7、总是在-ng-models-上使用-gt-最佳实践"><a href="#7、总是在-ng-models-上使用-gt-最佳实践" class="headerlink" title="7、总是在 ng-models 上使用(.) =&gt;最佳实践"></a>7、总是在 ng-models 上使用(.) =&gt;最佳实践</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">ng-model</span>=<span class="string">"book.price"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">ng-model</span>=<span class="string">"book.name"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="8、应该如何从-service-中访问-scope-？"><a href="#8、应该如何从-service-中访问-scope-？" class="headerlink" title="8、应该如何从 service 中访问 scope ？"></a>8、应该如何从 service 中访问 scope ？</h3><p><code>$rootScope</code> 相当于 <code>ng-app</code> 标记，它能够被引导或者是服务注入，可以用于在所有的 scopes 上添加新功能和值</p>
<p><strong>注意：避免这样做–这相当于定义全局变量</strong></p>
<h3 id="9、module-factory-和-module-service-不同点是什么？"><a href="#9、module-factory-和-module-service-不同点是什么？" class="headerlink" title="9、module().factory() 和 module().service() 不同点是什么？"></a>9、<code>module().factory()</code> 和 <code>module().service()</code> 不同点是什么？</h3><p><a href="https://groups.google.com/forum/?fromgroups#!topic/angular/56sdORWEoqg" target="_blank" rel="external">查看讨论信息</a></p>
<h3 id="10、如何防止无样式的内容闪现（页面显示双大括号绑定表达式）？"><a href="#10、如何防止无样式的内容闪现（页面显示双大括号绑定表达式）？" class="headerlink" title="10、如何防止无样式的内容闪现（页面显示双大括号绑定表达式）？"></a>10、如何防止无样式的内容闪现（页面显示双大括号绑定表达式）？</h3><p>在一些地方使用 <code>ng-bind</code> 来替换双括号表达式</p>
<h3 id="11、为什么-lt-a-ng-click-quot-go-lt-￼5-gt-quot-gt-不工作？"><a href="#11、为什么-lt-a-ng-click-quot-go-lt-￼5-gt-quot-gt-不工作？" class="headerlink" title="11、为什么 &lt;a ng-click=&quot;go()&quot;&gt; 不工作？"></a>11、为什么 <code>&lt;a ng-click=&quot;go()&quot;&gt;</code> 不工作？</h3><p>仅有的 <code>ng-*</code> 属性中，需要 <code></code> 的只有 <code>ng-src</code> 和 <code>ng-href</code>，因为最终的结果必须是一个字符串，不是一个表达式。所以其他的不能工作。</p>
<h3 id="12、嵌套-routes-views"><a href="#12、嵌套-routes-views" class="headerlink" title="12、嵌套 routes/views?"></a>12、嵌套 routes/views?</h3><p>或许吧</p>
<h3 id="13、可以在行内指定模板或者是分部视图吗？"><a href="#13、可以在行内指定模板或者是分部视图吗？" class="headerlink" title="13、可以在行内指定模板或者是分部视图吗？"></a>13、可以在行内指定模板或者是分部视图吗？</h3><p>可以。可以采用 <code>&lt;script id=&quot;some/partial.html&quot; type=&quot;text/ng-template&quot;&gt;&lt;/script&gt;</code> ，Angular会使用它来替换。</p>
<h3 id="14、-如何在-ngResource-地址中使用端口？"><a href="#14、-如何在-ngResource-地址中使用端口？" class="headerlink" title="14、 如何在 ngResource 地址中使用端口？"></a>14、 如何在 ngResource 地址中使用端口？</h3><pre><code>如下：$resource(&apos;example.com\\:8080&apos;)
</code></pre><h3 id="15、为什么插件触发的change事件似乎不工作？"><a href="#15、为什么插件触发的change事件似乎不工作？" class="headerlink" title="15、为什么插件触发的change事件似乎不工作？"></a>15、为什么插件触发的change事件似乎不工作？</h3><p>Angular监视 <a href="https://developer.mozilla.org/en-US/docs/Web/Events/input" target="_blank" rel="external">input</a> 事件，不是’change’ 事件。</p>
<h3 id="16、不要使用jQuery来切换crap-待定：无效元素-，在行内使用一些变量标记。"><a href="#16、不要使用jQuery来切换crap-待定：无效元素-，在行内使用一些变量标记。" class="headerlink" title="16、不要使用jQuery来切换crap(待定：无效元素)，在行内使用一些变量标记。"></a>16、不要使用jQuery来切换crap(待定：无效元素)，在行内使用一些变量标记。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-click</span>=<span class="string">"flags.open=!flags.open"</span>&gt;</span>...<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:flags.open&#125;"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="17、如何从DOM检查上查看-scope-？"><a href="#17、如何从DOM检查上查看-scope-？" class="headerlink" title="17、如何从DOM检查上查看 scope ？"></a>17、如何从DOM检查上查看 scope ？</h3><p>Google Chrome:安装 Batarang extension,检查一个DOM元素，然后在console中键入$scope</p>
<p>Firefox/Firebug：检查一个DOM元素，然后在console中键入 <code>angular.element($0).scope()</code><br>或者 <code>$($0).scope()</code></p>
<p>IE10+: 使用F12工具，检查一个元素。然后在console中键入 <code>angular.element($0).scope()</code><br>或者 <code>$($0).scope()</code></p>
<h3 id="18、你有一些好的指令示例-库吗？"><a href="#18、你有一些好的指令示例-库吗？" class="headerlink" title="18、你有一些好的指令示例/库吗？"></a>18、你有一些好的指令示例/库吗？</h3><p><a href="http://angular-ui.github.com/" target="_blank" rel="external">AngularUI</a> 是非常棒的AngularJS工具集合（甚至是更好的示例代码）</p>
<h3 id="19、IE？"><a href="#19、IE？" class="headerlink" title="19、IE？"></a>19、IE？</h3><p>针对IE8.0或者更早，你需要<a href="https://docs.angularjs.org/guide/ie" target="_blank" rel="external">阅读这个</a>和<a href="http://angular-ui.github.io/#ieshiv" target="_blank" rel="external">使用这个</a></p>
<h3 id="20、必须对路由使用"><a href="#20、必须对路由使用" class="headerlink" title="20、必须对路由使用#?"></a>20、必须对路由使用#?</h3><p>参考 <a href="https://docs.angularjs.org/api/ng/provider/$locationProvider" target="_blank" rel="external">$locationProvider</a></p>
<h3 id="21、你应该在尝试用指令包装jQuery插件前，优先尝试使用AngularUI-Passthru-Directive-uiJq"><a href="#21、你应该在尝试用指令包装jQuery插件前，优先尝试使用AngularUI-Passthru-Directive-uiJq" class="headerlink" title="21、你应该在尝试用指令包装jQuery插件前，优先尝试使用AngularUI Passthru Directive (uiJq) "></a>21、你应该在尝试用指令包装jQuery插件前，优先尝试使用<a href="http://angular-ui.github.io/#directives-jq" target="_blank" rel="external">AngularUI Passthru Directive (uiJq) </a></h3><h3 id="22、为什么我的-scope-watch-递归触发"><a href="#22、为什么我的-scope-watch-递归触发" class="headerlink" title="22、为什么我的 $scope.$watch() 递归触发?"></a>22、为什么我的 $scope.$watch() 递归触发?</h3><p>如果你在 $scope.$watch(newVal,oldVal)中改变 newVal ，它会重复触发。在 $watch 运行后，$scope 会重新评估，被观察对象将被重新触发。</p>
<h3 id="23、何时我需要使用-scope-apply"><a href="#23、何时我需要使用-scope-apply" class="headerlink" title="23、何时我需要使用 $scope.$apply() ?"></a>23、何时我需要使用 $scope.$apply() ?</h3><p>仅仅需要在没有angular 事件/回调时 使用 $scope.$apply()。它通常不属于任何地方。</p>
<h3 id="24、启用了-html5Mode-，如何获取-lt-a-href-gt-的后退行为？"><a href="#24、启用了-html5Mode-，如何获取-lt-a-href-gt-的后退行为？" class="headerlink" title="24、启用了 html5Mode ，如何获取&lt;a href /&gt;的后退行为？"></a>24、启用了 html5Mode ，如何获取&lt;a href /&gt;的后退行为？</h3><p>如果你想一个链接能够全页面刷新，那么只需要在a标记上添加 target=”_self”</p>
<h3 id="25、如何-preventDefualt-或-stopPropagation"><a href="#25、如何-preventDefualt-或-stopPropagation" class="headerlink" title="25、如何 .preventDefualt() 或 .stopPropagation() ?"></a>25、如何 .preventDefualt() 或 .stopPropagation() ?</h3><p>所有的 ng-click 和相关的绑定都注入了 $event 事件对象，你可以用它来调用 .preventDefualt()，甚至是对象传递给你的方法。</p>
<h3 id="26、AngularJS在我的Chrome扩展中不工作！"><a href="#26、AngularJS在我的Chrome扩展中不工作！" class="headerlink" title="26、AngularJS在我的Chrome扩展中不工作！"></a>26、AngularJS在我的Chrome扩展中不工作！</h3><p>你需要使用 <a href="http://docs.angularjs.org/api/ng.directive:ngCsp" target="_blank" rel="external">ng-csp</a></p>
<h3 id="27、如何缓存-http-和html-分部视图"><a href="#27、如何缓存-http-和html-分部视图" class="headerlink" title="27、如何缓存 $http 和html 分部视图"></a>27、如何缓存 $http 和html 分部视图</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用装饰器，添加缓存功能</span></div><div class="line">myAppModule.config(<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider, $provide</span>) </span>&#123;</div><div class="line">  $provide.decorator(<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$delegate</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> get = $delegate.get;</div><div class="line">    $delegate.get = <span class="function"><span class="keyword">function</span>(<span class="params">url, config</span>)</span>&#123;</div><div class="line">      url += (url.indexOf(<span class="string">'?'</span>) !== <span class="number">-1</span>) ? <span class="string">'?'</span> : <span class="string">'&amp;'</span>;</div><div class="line">      url += <span class="string">'v='</span> + cacheBustVersion;</div><div class="line">      <span class="keyword">return</span> get(url, config);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> $delegate;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="1、拒绝-解决一个-q-defer-不通过"><a href="#1、拒绝-解决一个-q-defer-不通过" class="headerlink" title="1、拒绝/解决一个 $q.defer() 不通过"></a>1、拒绝/解决一个 $q.defer() 不通过</h3><p>你必须在处理它们的时候添加 <code>$scope.$apply()</code></p>
<h3 id="2、Jasmine-spyOn-不执行-spy’d-功能"><a href="#2、Jasmine-spyOn-不执行-spy’d-功能" class="headerlink" title="2、Jasmine spyOn() 不执行 spy’d 功能"></a>2、Jasmine spyOn() 不执行 spy’d 功能</h3><p>不一定是AngularJS的问题，但是你需要追加 <code>.addCallThrough()</code></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[用AngularJS开发Web应用程序]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/03/13/Angular%E7%9B%B8%E5%85%B3/%E7%94%A8AngularJS%E5%BC%80%E5%8F%91Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>##章节一：Angular 禅道##</p>
<p>###本章生词###<br>    serve = 提供<br>    take a brief = 先简要的<br>    introduction = 介绍<br>    concept = 概念<br>    a lot of = 许多<br>    material = 材料<br>    cover = 概括<br>    painless = 无痛的<br>    plenty = 丰富、大量<br>    unique = 独特的<br>    doubt = 疑问<br>    shape = 塑造<br>    explain = 解释<br>    expect = 预计<br>    get familiar with = 熟悉<br>    become aware = 察觉<br>    sophisticated = 复杂<br>    dependency injection = 依赖注入nuance<br>    nuance = 细微之处<br>    general = 一般<br>    purpose = 目的<br>    shines = 耀眼<br>    recent = 最近<br>    addition = 此外<br>    mostly = 主要的<br>    due = 由于<br>    innovative = 创新<br>    yet = 但<br>    attract = 吸引<br>    ease = 缓解<br>    solid = 扎实<br>    engineering = 工程<br>    practice = 实践<br>    indeed = 的确<br>    respects = 方面<br>    explicit = 明确的<br>    capable = 能<br>    figure out = 弄清楚<br>    interesting = 有趣的<br>    interpret = 解析<br>    mistaken = 错误，谬<br>    several = 几个，数个<br>    typically = 通常<br>    treasure = 宝藏<br>    testability = 可测试性<br>    built-in support 内置支持<br>    thoroughly = 彻底的<br>    relatively = 比较的<br>    actor = 演员<br>    personal = 个人的<br>    turned out = 横空出世</p>
<hr>
<p>这个章节介绍了AngularJS，包括框架和它背后的项目。首先，我们先简要的了解项目本身：谁become aware驱动了它，在哪儿可以找到源代码和文档，如何寻求帮助等等。</p>
<p>这个章节的大部分是介绍AngularJS框架，它的核心概念和编码模式。包含有许多概括（总结）性的材料，使得学习进程快速无障碍，同时也有丰富的代码示例。</p>
<p>AngularJS是一个独特的框架，毫无疑问的引领一个Web开发潮流。这也是为什么章节的最后部分解释了是什么让AngularJS如此特别，它和其它外部框架之间的差异和我们能在未来如何设想它。</p>
<p>这个章节包含了以下几个主题：</p>
<ol>
<li>如何用AngularJS书写一个简单的Hello World 程序。在做这个的过程中，你将了解到在哪儿找到框架源代码、文档以及社区。</li>
<li>熟悉AngularJS应用程序的基本构造块：Templates、Directives、Scopes和Controllers。</li>
<li>察觉AngularJS复杂的依赖注入系统以及它所有的细微之处。</li>
<li>理解AngularJS与其他框架或库（特别是jQuery）之间的差异，是什么使得它如此特别。</li>
</ol>
<p>###AngularJS简介###<br>AngularJS是一个用JavaScript编写的客户端MVC框架，它运行于Web浏览器，能够极大的帮助我们（开发者）编写模块化，单页面，Ajax风格的Web Applications。它是一个平常的框架，不过如果用于编写CRUD类型的web app，那么它将非常耀眼。</p>
<p>###熟悉框架###<br>AngularJS是最近的客户端mvc框架的例外，但是它吸引了许多注意力，主要是由于它创新的模板系统，减轻了开发，同时有很扎实的工程实践。的确，它的模板系统独特于许多方面：</p>
<ol>
<li>使用HTML作为模板语言</li>
<li>不要求明确的DOM刷新，AngularJS 能跟踪用户操作、浏览器事件和模型变化，来选择何时和那个模板将被刷新</li>
<li>它有非常有趣的和可扩展的组件子系统，它能教会浏览器如何解析新的HTML标签和属性</li>
</ol>
<p>模板子系统可能是AngularJS中最常见的部分，但是不要错误的认为AngularJS是单页Web程序所需要的包含数个工具和常用服务的完整框架包。</p>
<p>AngularJS同样有一些隐藏的宝藏，依赖注入（DI=dependency injection）和可测试特性的强烈关注。DI的内置支持能够非常容易的访问从一个极小的、彻底的可测试服务创建的web app。</p>
<p>###项目发展路线###<br>AngularJS是客户端MVC框架中比较新的成员；它的1.0版本发布于2012年6月。实际上，这个框架作为谷歌雇员Misko Hevery的个人项目开始于2009年。最初的idea是如此的好，在写作本文的同时，这个项目已经被Google正式支持，并且有Google的完整团队全职维护这个框架。</p>
<p>AngularJS是托管在<a href="https://github.com/angular/angular.js" target="_blank" rel="external">GitHub</a>上的，基于MIT协议的开源项目</p>
<p>###社区###</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[AngularJS教程：1W字综合指南]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/03/13/Angular%E7%9B%B8%E5%85%B3/AngularJS%E6%95%99%E7%A8%8B%EF%BC%9A1W%E5%AD%97%E7%BB%BC%E5%90%88%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h1 id="AngularJSj教程：1W字指南（译）"><a href="#AngularJSj教程：1W字指南（译）" class="headerlink" title="AngularJSj教程：1W字指南（译）"></a>AngularJSj教程：1W字指南（译）</h1><p><strong>原文地址：</strong><a href="http://www.airpair.com/angularjs" target="_blank" rel="external">http://www.airpair.com/angularjs</a></p>
<h2 id="1、AngularJS简介"><a href="#1、AngularJS简介" class="headerlink" title="1、AngularJS简介"></a>1、AngularJS简介</h2><p>Angular 是用于编写引人注目的Web应用程序的是客户端 MVW JavaScript框架。它由Google创建好维护，（offers a futuristic spin on the web and its upcoming features and standards.<br>Read more at <a href="http://www.airpair.com/angularjs#tY7q00WpGrTLB71Z.99）" target="_blank" rel="external">http://www.airpair.com/angularjs#tY7q00WpGrTLB71Z.99）</a></p>
<p>MVW 即 Model-View-Whatever,它是能在开发应用程序时，为我们提供灵活性的一种设计模式。我们可以选择MVC(Model-View-Controller)或者是MVVM(Model-View-ViewModel)方式。</p>
<p>本教程可以作为一个最终的资源来开始学习AngularJS,它的概念和它背后的API，同时能帮助您学习如何实现现代的Web应用程序。</p>
<p>AngularJS自身作为增强HTML的一个框架。它从多种语言包括JavaScript和服务端语言中获得灵感，使得HTML也成为了动态语言。这意味着我们获得了一个完全的数据数据方式来开发应用程序，不再需要刷新实体，更新DOM和其他费时任务如浏览器bug和不一致。我们可以只关注数据，让数据关心HTML的方式来编写我们的应用程序。</p>
<h2 id="2、JavaScript框架中的工程概念"><a href="#2、JavaScript框架中的工程概念" class="headerlink" title="2、JavaScript框架中的工程概念"></a>2、JavaScript框架中的工程概念</h2><p>AngularJS在处理提供数据绑定和其他工程概念上，和其他框架如Backbone.js和Ember.js采取了不同了做法。我们坚持使用熟悉的、令人喜欢的HTML，使Angular拦截它，并增强它。Angular将纯粹的JavaScript对象用于数据绑定，保证任何模型变化都会更新DOM。当模型值更新了一次，Angular会更新来自应用程序的状态来源对象。</p>
<h3 id="2-1、MVC-和-MVVM"><a href="#2-1、MVC-和-MVVM" class="headerlink" title="2.1、MVC 和 MVVM"></a>2.1、MVC 和 MVVM</h3><p>如果你已经习惯了构建静态网站，你可能更熟悉手动一块一块的构建HTML，通过数据一遍一遍的打印相同的HTML。这可能是grid中的列，一个导航结构，一个链接列表或者是图片等等。在这个实例中，你需要习惯一点小东西的变化都需要手动更新HTML的痛苦，你必须更新模板来保持其他用途的一致性。你还要为每个导航项目杜绝相同的HTML。</p>
<p>深呼吸一下，通过Angular我们能实现恰当的关注点分离以及动态HTML。这意味着数据在模Model中，HTML是作为一个微小的模板被渲染为View，我们能使用Controller来连接它们两个，并驱动Model和View值的变化。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（十三）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/03/12/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20150312%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##No.61、不要阻塞I/O事件队列</p>
<p><strong>Tips：</strong>：</p>
<ol>
<li>异步API使用回调函数来延缓处理代价高昂的操作以避免阻塞主应用程序</li>
<li>JavaScript并发的接收事件，但会使用一个事件队列按序地处理事件处理程序</li>
<li>在应用程序事件队列中绝不要使用阻塞的I/O</li>
</ol>
<p>JavaScript程序是构建在事件之上的。在其他一些语言中，我们可能常常会实现如下代码：</p>
<pre><code>var result = downFileSync(&apos;http://xxx.com&apos;); 
console.log(result);
</code></pre><p>以上代码，如果downFileSync需要5分钟，那么程序就会停下来等待5分钟。这样的函数就被称为同步函数（或阻塞函数）。如果在浏览器中实现这样的函数，那么结果就是浏览器卡住，等待下载完成后，再继续响应。那么，这将极大的影响体验。所以，在JavaScript中，一般使用如下方式：</p>
<pre><code>downFileAsync(&apos;http://xxx.com&apos;, function(result){
  console.log(result);
});
console.log(&apos;async&apos;);
</code></pre><p>以上代码执行中，就算下载文件要5分钟，那么程序也会立马打印出“async”，然后在下载完成的时候，打印result出来。这样才能保证执行环境能正确响应客户的操作。</p>
<p>JavaScript并发的一个最重要的规则是绝不要在应用程序事件队列中使用阻塞I/O的API。在浏览器中，甚至基本没有任何阻塞的API是可用的。其中XMLHttpRequest库有一个同步版本的实现，被认为是一种不好的实现，影响Web应用程序的交互性。</p>
<p>在现代浏览器（IE10+(含)、Chrome、FireFox）中，提供了Worker的API，该API使得产生大量的并行计算称为可能。</p>
<p><em>如何使用？</em></p>
<p>首先，编写两个文件,第一个是task.js,如下：</p>
<pre><code>//task.js
console.time(&apos;t1&apos;);
var sum = 0;
for(var i = 0; i &lt; 500000000; i++){
  sum += i;
}
console.log(&apos;test&apos;);
console.timeEnd(&apos;t1&apos;);
postMessage(&apos;worker result:&apos; + sum);
</code></pre><p>然后是index.html，用于调用worker，代码如下：</p>
<pre><code>// index.html
&lt;button onclick=&quot;alert(&apos;aa&apos;)&quot;&gt;Test&lt;/button&gt;
&lt;script&gt;
  var worker = new Worker(&apos;test.js&apos;); 
  worker.onmessage = function(evt){
    console.log(evt.data);
  };
&lt;/script&gt;
</code></pre><p>在index.html的JavaScript脚本中。使用<code>var worker = new Worker(&#39;test.js&#39;);</code>来实例化一个Worker，Worker的构造为：new Worker([string] url),然后注册一个onmessage事件，用于处理test.js的通知，就是test.js中的postMessage函数。test.js中的每一次执行postMessage函数都会触发一次Worker的onmessage回调。</p>
<p>在静态服务器中访问index.html,可以看到输出为：</p>
<pre><code>test
t1: 2348.633ms
worker result:124999999567108900
</code></pre><p>再来看看Worker的优缺点，我们可以做什么：</p>
<ol>
<li>可以加载一个JS进行大量的复杂计算而不挂起主进程，并通过postMessage，onmessage进行通信</li>
<li>可以在worker中通过importScripts(url)加载另外的脚本文件</li>
<li>可以使用 setTimeout(), clearTimeout(), setInterval(), and clearInterval()</li>
<li>可以使用XMLHttpRequest来发送请求</li>
<li>可以访问navigator的部分属性</li>
</ol>
<p>有那些局限性：</p>
<ol>
<li>不能跨域加载JS</li>
<li>worker内代码不能访问DOM</li>
<li>各个浏览器对Worker的实现不大一致，例如FF里允许worker中创建新的worker,而Chrome中就不行</li>
<li>不是每个浏览器都支持这个新特性</li>
</ol>
<p>更多信息，请参考：</p>
<ol>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Performance/Using_web_workers" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/Guide/Performance/Using_web_workers</a></li>
<li><a href="http://www.cnblogs.com/feng_013/archive/2011/09/20/2175007.html" target="_blank" rel="external">http://www.cnblogs.com/feng_013/archive/2011/09/20/2175007.html</a></li>
</ol>
<p>##No.62、在异步序列中使用嵌套或命名的回调函数<br><strong>Tips：</strong>：</p>
<ol>
<li>使用嵌套或命名的回调函数按顺序地执行多个异步操作</li>
<li>尝试在过多的嵌套的回调函数和尴尬的命名的非嵌套回调函数之间取得平衡</li>
<li>避免将可被并行执行的操作顺序化</li>
</ol>
<p>想象一下如下需求，异步请数据库查找一个地址，并异步下载。由于是异步，我们不可能发起两个连续请求，那么js代码很可能是这样的：</p>
<pre><code>db.lookupAsync(&apos;url&apos;, function(url){
  downloadAsync(url, function(result){
    console.log(result);
  });
});
</code></pre><p>我们使用嵌套，成功解决了这个问题，但是当这样的依赖很多时，我们的代码可能是这样：</p>
<pre><code>db.lookupAsync(&apos;url&apos;, function(url){
  downloadAsync(&apos;1.txt&apos;, function(){
    downloadAsync(&apos;2.txt&apos;, function(){
      downloadAsync(&apos;3.txt&apos;, function(){
        //do something...
      });
    });
  });
});
</code></pre><p>这样就陷入了回调地狱。要减少过多的嵌套的方法之一就是将回调函数作为命名的函数，并将它们需要的附加数据作为额外的参数传递。比如：</p>
<pre><code>db.lookupAsync(&apos;url&apos;, downloadUrl);

function downloadUrl(url){
  downloadAsync(url, printResult);
}

function printResult(result){
  console.log(result);
}
</code></pre><p>这样能控制嵌套回调的规模，但是还是不够直观。实际上，在node中解决此类问题是用现有的模块，如async。</p>
<p>##No.63、当心丢弃错误<br><strong>Tips：</strong>：</p>
<ol>
<li>通过编写共享的错误处理函数来避免复制和粘贴错误处理代码</li>
<li>确保明确地处理所有的错误条件以避免丢弃错误</li>
</ol>
<p>一般情况下，我们的错误处理代码如下：</p>
<pre><code>try{
  a();
  b();
  c();
}catch(ex){
  //处理错误
}
</code></pre><p>对于异步的代码，不可能将错误包装在一个try中，事实上，异步的API甚至根本不可能抛出异常。<strong>异步的API倾向于将错误表示为回调函数的特定参数，或使用一个附加的错误处理回调函数（有时被称为errbacks）</strong>。代码如下:</p>
<pre><code>downloadAsync(url, function(result){
  console.log(result);
}, function(err){ //提供一个单独的错误处理函数
  console.log(&apos;Error:&apos; + err);
});
</code></pre><p>多次嵌套时，错误处理函数会被多次复制，所以可以将错误处理函数提取出来，减少重复代码，代码如下：</p>
<pre><code>downloadAsync(&apos;1.txt&apos;, function(result){
  downloadAsync(&apos;2.txt&apos;, function(result2){
    console.log(result + result2);
  }, onError);
}, onError);
</code></pre><p><strong>在node中，异步API的回调函数第一个参数表示err，这已经成为一个大众标准</strong></p>
<p>##No.64、对异步循环使用递归<br><strong>Tips：</strong>：</p>
<ol>
<li>循环不能是异步的</li>
<li>使用递归函数在时间循环的单独轮次中执行迭代</li>
<li>在事件循环的单独伦次中执行递归，并不会导致调用栈溢出</li>
</ol>
<p>针对异步下载文件，如果要使用循环，大概是如下代码：</p>
<pre><code>function downloadFilesSync(urls){
  for(var i = 0, len = urls.length; i &lt; len; i++){
    try{
      return downloadSync(urls[i]);
    }catch(ex){
    }
  }
}
</code></pre><p>以上代码并不能正确工作，因为方法一调用，就会启动所有的下载，并不能等待一个完成，再继续下一个。</p>
<p>要实现功能，看看下面的递归代码：</p>
<pre><code>function downloadFilesSync(urls){
  var len = urls.length;
  function tryNextURL(i) {
    if (i &gt;= n) {
      console.log(&apos;Error&apos;);
      return; //退出
    }
    downloadAsync(urls[i], function(result){
      console.log(result);
      //下载成功后，尝试下一个。    
      tryNextURL(i + 1);
    });
  }
  tryNextURL(0);// 启动递归
}
</code></pre><p>类似这样的实现，就能解决批量下载的问题了。</p>
<p>##No.65、不要再计算时阻塞事件队列<br><strong>Tips：</strong>：</p>
<ol>
<li>避免在主事件队列中执行代码高昂的算法</li>
<li>在支持Worker API的平台，该API可以用来在一个独立的事件队列中运行长计算程序</li>
<li>在Worker API 不可用或代价高昂的环境中，考虑将计算程序分解到事件循环的多个轮次中</li>
</ol>
<p>打开浏览器控制台，执行 <code>while(true){}</code>，会是什么效果？</p>
<p><strong>好吧，浏览器卡死了！！！</strong></p>
<p>如果有这样的需求，那么优先选择使用Worker实现吧。由于有些平台不支持类似Worker的API，那么可选的方案是将算法分解为多个步骤。代码如下：</p>
<pre><code>//首先，将逻辑分为几个步骤
function step1(){console.log(1);}
function step2(){console.log(2);}
function step3(){console.log(3);}
var taskArr = [step1, step2, step3];

var doWork = function(tasks){
  function next(){
    if(tasks.length === 0){
      console.log(&apos;Tasks finished.&apos;);
      return;
    }
    var task = tasks.shift();
    if(task){
      task();
      setTimeout(next, 0);
    }   
  }
  setTimeout(next, 0);
}
//启动任务
doWork(taskArr);
</code></pre><p>##No.66、使用计数器来执行并行操作<br><strong>Tips：</strong>：</p>
<ol>
<li>JavaScript应用程序中的事件发生是不确定的，即顺序是不可预测的</li>
<li>使用计数器避免并行操作中的数据竞争</li>
</ol>
<p>先看一个简单的示例：</p>
<pre><code>function downFiles(urls){
  var result = [],len = urls.length;
  if(len === 0){
    console.log(&apos;urls argument is a empty array.&apos;);
    return;
  }
  urls.forEach(function(url){
    downloadAsync(url, function(text){
      result.push(text);
      if(result.length === len){
        console.log(&apos;download all files.&apos;);
      }
    });
  });
}
</code></pre><p>有什么问题呢？result的结果和urls是顺序并不匹配，所以，我们不知道怎么使用这个result。</p>
<p>如何改进？请看如下代码，使用计数器，代码如下：</p>
<pre><code>function downFiles(urls){
  var result = [],len = urls.length;
  var count = 0;// 定义计数器
  if(len === 0){
    console.log(&apos;urls argument is a empty array.&apos;);
    return;
  }
  urls.forEach(function(url, i){
    downloadAsync(url, function(text){
      result[i] = text;
      count++;
      //计数器等于url个数，那么退出
      if(count === len){
        console.log(&apos;download all files.&apos;);
      }
    });
  });
}
</code></pre><p>##No.67、绝不要同步地调用异步的回调函数<br><strong>Tips：</strong>：</p>
<ol>
<li>即使可以立即得到数据，也绝不要同步地调用异步回调函数</li>
<li>同步地调用异步的回调函数扰乱了预期的操作序列，并可能导致意想不到的交错代码</li>
<li>同步地调用异步的回调函数可能导致栈溢出或错误的处理异常</li>
<li>使用异步的API，比如setTimeout函数来调用异步回调函数，使其运行于另外一个回合</li>
</ol>
<p>如果异步下载代码，优先从缓存拿数据，那么代码很可能是：</p>
<pre><code>var cache = new Dict();

function downFileWithCache(url, onsuccess){
  if (cache.has(url)){
    onsuccess(cache.get(url));
    return;
  }
  return downloadAsync(url, function(text){
    cache.set(url, text);
    onsuccess(text);
  });
}
</code></pre><p>以上代码，同步的调用了回调函数，可能会导致一些微妙的问题，<strong>异步的回调函数本质上是以空的调用栈来调用，因此将异步的循环实现为递归函数是安全的，完全没有累计赵越调用栈控件的危险。</strong>同步的调用不能保证这一点，所以，更好的代码如下：</p>
<pre><code>var cache = new Dict();

function downFileWithCache(url, onsuccess){
  if (cache.has(url)){
    setTimeout(onsuccess.bind(null, cache.get(url)), 0)
    return;
  }
  return downloadAsync(url, function(text){
    cache.set(url, text);
    onsuccess(text);
  });
}
</code></pre><p>##No.68、使用promise模式清洁异步逻辑<br><strong>Tips：</strong>：</p>
<ol>
<li>promise代表最终值，即并行操作完成时最终产生的结果</li>
<li>使用promise组合不同的并行操作</li>
<li>使用promise模式的API避免数据竞争</li>
<li>在要求有意的竞争条件时使用select（也被称为choose）</li>
</ol>
<p>一直以来，JavaScript处理异步的方式都是callback，当异步任务很多的时候，维护大量的callback将是一场灾难。所以Promise规范也应运而生，<a href="http://www.ituring.com.cn/article/66566" target="_blank" rel="external">http://www.ituring.com.cn/article/66566</a> 。</p>
<p>Promise已经纳入了ES6，而且高版本的Chrome、Firefox都已经实现了Promise，只不过和现如今流行的类Promise类库相比少些API。</p>
<p>看下最简单的Promise代码（猜猜最后输出啥？）：</p>
<pre><code>var p1 = new Promise(function(resolve, reject){
  setTimeout(function(){
    console.log(&apos;1&apos;);
    resolve(&apos;2&apos;);
  }, 3000);
});

p1.then(function(val){
  console.log(val);
});
</code></pre><p>如果代码是这样呢？</p>
<pre><code>var p1 = new Promise(function(resolve, reject){
  setTimeout(function(){
    console.log(&apos;1&apos;);
    //resolve(&apos;2&apos;);
    reject(&apos;3&apos;);
  }, 3000);
});

p1.then(function(val){
  console.log(val);
}, function(val){
  console.log(val);
});
</code></pre><p>再来看一个Promise.all的示例：</p>
<pre><code>Promise.all([new Promise(function(resolve, reject){
  setTimeout(function(){
    console.log(1);
    resolve(1);
  }, 2000);
}), new Promise(function(resolve, reject){
  setTimeout(function(){
    console.log(2);
    resolve(2);
  }, 1000);
}), Promise.reject(3)])
.then(function(values){
  console.log(values);
});
</code></pre><p><code>Promise.all([]).then(fn)</code><strong>只有当所有的异步任务执行完成之后，才会执行then。</strong></p>
<p>接着看一个Promise.race的示例：</p>
<pre><code>Promise.race([new Promise(function(resolve, reject){
  setTimeout(function(){
    console.log(&apos;p1&apos;);
    resolve(1);
  }, 2000);
}), new Promise(function(resolve, reject){
  setTimeout(function(){
    console.log(&apos;p2&apos;);
    resolve(2);
  }, 1000);
})])
.then(function(value){
  console.log(&apos;value = &apos; + value);
});
</code></pre><p>结果是：</p>
<pre><code>p2
value = 2
p1
</code></pre><p><code>Promise.race([]).then(fn)</code><strong>会同时执行所有的异步任务，但是只要完成一个异步任务，那么就调用then。</strong></p>
<p><strong>promise.catch(onRejected)是promise.then(undefined, onRejected) 的语法糖。</strong></p>
<p>更多关于Promise的资料请参考：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p>
<p>第三方Promise库有许多，如：Q, when.js 等</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（十二）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/03/04/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20150304%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##No.56、避免不必要的状态<br><strong>Tips：</strong></p>
<ol>
<li>尽可能地使用无状态的API</li>
<li>如果API是有状态的，标示出每个操作与哪些状态有关联</li>
</ol>
<p>无状态的API简洁，更容易学习和使用，也不需要考虑其他的状态。如：</p>
<pre><code>&apos;test&apos;.toUpperCase(); // &apos;TEST&apos;
</code></pre><p>有状态的API往往会导致额外的声明，并增加复杂度。</p>
<p>##No.57、使用结构类型设计灵活的接口<br><strong>Tips：</strong></p>
<ol>
<li>使用结构类型（也称为鸭子类型）来设计灵活的对象接口</li>
<li>结构接口更灵活、更轻量，所以应该避免使用继承</li>
<li>针对单元测试，使用mock对象即接口的替代实现来提供可复验的行为</li>
</ol>
<p>直接上代码：</p>
<pre><code>function Wiki(format){
  this.format = format;
}

Wiki.prototype.show = function(source){
  var page = this.format(source);
  return {
    title: page.getTitle(),
    author: page.getAuthor(),
    content: page.getContent()
  }
}
</code></pre><p>将format设计为结构类型，可以极大的增加设计的灵活性。</p>
<p>##No.58、区分数组对象和类数组对象<br><strong>Tips：</strong></p>
<ol>
<li>绝不重载与其他类型有重叠的结构类型</li>
<li>当重载一个结构类型与其他类型时，先测试其他类型</li>
<li>当重载其他对象类型时，接收真数组而不是类数组对象</li>
</ol>
<p><strong>API绝不应该重载与其他类型有重叠的类型</strong></p>
<p>最简单的判断数组与类数组，代码如下：</p>
<pre><code>x instanceof Array
</code></pre><p>但是，在一些允许多个全局对象的环境中可能会有标准的Array构造函数和原型对象的多份副本。那么就有可能导致以上的测试结果不可信，所以在ES5引入了Array.isArray函数来判断是否是Array对象，通过检查对象内部[[Class]]属性值是否为Array来判定。在不支持ES5的环境中，可以使用标准的Object.prototype.toString方法测试一个对象是否为数组。</p>
<pre><code>function isArray(x){
  return toString.call(x) === &apos;[object Array]&apos;;
}
</code></pre><p>##No.59、避免过度的强制转换<br><strong>Tips：</strong></p>
<ol>
<li>避免强制转换和重载的混用</li>
<li>考虑防御性地监视非预期的输入</li>
</ol>
<p>看以下的函数：</p>
<pre><code>function square(x){
  return x*x;
}

console.log(square(&apos;3&apos;));  // 9 
</code></pre><p>强制转换无疑是很方便的。但很多时候却会导致含糊不清。</p>
<pre><code>function fun(x){
  x = Number(x);
  if(typeof x === &apos;number&apos;){
    return x-1;
  }else{
    return x;
  }
}
</code></pre><p>由于进行了Number(x)，那么后面的else是无法执行到的。如果不知道这个函数的细节，那么使用该函数则具有一定的模糊性。<br>事实上，如果我们要更小心的设计API，我们可以强制只接受数字和对象。</p>
<pre><code>function fun(x){
  if(typeof x === &apos;number&apos;){
    return x-1;
  }else if(typeof x === &apos;object&apos; &amp;&amp; x){
    return x;
  }else{
    throw new TypeError(&apos;expected number or array-like.&apos;);
  }
}
</code></pre><p>这种风格更加谨慎的示例，被称为防御性编程。</p>
<p>##No.60、支持方法链<br><strong>Tips：</strong></p>
<ol>
<li>使用方法链来连接无状态的操作</li>
<li>通过在无状态的方法中返回新对象来支持方法链</li>
<li>通过在有状态的方法中返回this来支持方法链</li>
</ol>
<p>无状态的API部分能力是讲复杂操作分解为更小的操作。如replace：</p>
<pre><code>function escapeHtml(str){
  return str.replace(/&amp;/g, &apos;&amp;amp;&apos;)
            .replace(/&lt;/g, &apos;&amp;lt;&apos;);
}
</code></pre><p>如果不采用方法链方式，代码应该是以下这样：</p>
<pre><code>function escapeHtml(str){
  var str1 = str.replace(/&amp;/g, &apos;&amp;amp;&apos;);
  var str2 = str1.replace(/&lt;/g, &apos;&amp;lt;&apos;);
  return str2;
}
</code></pre><p>同样的功能，将会产生多个临时变量。消除临时变量使得代码更加可读，中间结果只是得到最终结果中的一个重要步骤而已。</p>
<p>在有状态的API中设置方法链也是可行的。技巧是方法在更新对象时返回this，而不是undefined。如：</p>
<pre><code>element.setBackgroundColor(&apos;gray&apos;)
       .setColor(&apos;red&apos;)
       .setFontweight(&apos;bold&apos;);  
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（十一）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/02/14/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20150214%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##No.51、在类数组对象上附庸通用的数组方法<br><strong>Tips:</strong></p>
<ol>
<li>对于类数组对象，通过提取方法对象并使用其call方法来复用通用的Array方法</li>
<li>任意一个具有索引属性和恰当length属性的对象都可以使用通用的Array方法</li>
</ol>
<p>Array.proteotype中的标准方法被设计成其他对象可复用的方法，即使这些对象没有继承Array。很实际的一个例子就是 <code>arguments</code> ,示例如下：</p>
<pre><code>//define
function fun(){
  console.log(arguments);  // [1, 2, 3]
  console.log(arguments instanceof Array) // false
  arguments.forEach(function(argv){  //TypeError
    console.log(argv)
  });
}

//call
fun(1, 2, 3);
</code></pre><p>从结果来看，输出arguments和数组非常相似，通过instanceof来看，确实不是数组，所以arguments是类数组对象，但是在执行forEach的时候却TypeError。why？</p>
<p>因为 <code>arguments</code> 没有继承Array.prototype,所以并不能直接调用forEach方法，但是可以提取forEach方法的引用并使用其call来调用，代码如下：</p>
<pre><code>//define
function fun(){
  [].forEach.call(arguments, function(argv){
    console.log(argv);
  });
}

//call
fun(1, 2, 3);
</code></pre><p>除了arguments之外，dom的NodeList也是类数组对象：</p>
<pre><code>var nodes = document.getElementsByTagName(&apos;a&apos;);
console.log(nodes);
console.log(nodes instanceof Array); // false
</code></pre><p>那么，到底怎样使得一个对象“看起来像数组”呢？有以下两个规则：</p>
<ol>
<li>具有一个范围在0到2^32 - 1 的整型length属性</li>
<li>length属性大于该对象的最大索引。索引是一个范围在0到2^32 -2 的整数，它的字符串表示的是该对象的一个key。</li>
</ol>
<p>鉴于以上规则，那么我们可以自己创建类数组对象：</p>
<pre><code>var arrayLike = {0: &apos;a&apos;, 1: &apos;b&apos;, 2: &apos;c&apos;, length: 3};
var result = [].map.call(arrayLike, function(el){
  return el.toUpperCase();
});
console.log(result); // [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]
</code></pre><p>特例，数组连接方法concat不是完全通用的。因为它会检查对象的[[Class]]属性，要想连接类数组对象，我们就需要先将类数组处理为数组：</p>
<pre><code>var arrLike = {0: &apos;a&apos;, length: 1};
var arr = [].slice.call(arrLike);
console.log([&apos;A&apos;].concat(arr)); // [&apos;A&apos;, &apos;a&apos;]
</code></pre><p>##No.52、数组字面量优于数组构造函数<br><strong>Tips:</strong></p>
<ol>
<li>如果数组构造函数的第一个参数是数字则数组的构造函数行为是不同的</li>
<li>使用数组字面量替代数组构造函数</li>
</ol>
<p>原因如下：</p>
<p><strong>[] 比 new Array简洁</strong></p>
<pre><code>var arr = [];
var arr = new Array();
</code></pre><p><strong>使用new Array()，必须要确保没有人重新包转过Array变量</strong></p>
<pre><code>funciton f(Array){
    return new Array(1, 2, 3, 4, 5);
}
f(String); //new String(1)
</code></pre><p><strong>使用new Array()，必须要确保没有人修改过全局的Array变量</strong></p>
<pre><code>Array = String
new Array(1, 2, 3); // new String(1)
</code></pre><p><strong>使用new Array时，由于第一个参数类型不同，会导致二义性</strong></p>
<pre><code>new Array(&apos;hello&apos;) 和 [&apos;hello&apos;] 等价
[1] 和 new Array(1) 不等价，前者创建包含元素的1的数组，后则创建长度为1的数组。
</code></pre><p><strong>所以，优先使用字面量，因为数组字面量具有更规范、更一致的语义。</strong></p>
<p>##No.53、保持一致的约定<br><strong>Tips：</strong></p>
<ol>
<li>在变量命名和函数签名中使用一致的约定</li>
<li>不要偏离用户在他们的开发平台中很可能遇到的约定</li>
</ol>
<p>有良好的编码习惯，使用业界常规的编码规范，同时注意参数的顺序等。一句话概述：<strong>保持代码的一致性</strong>。</p>
<p>##No.54、将undefined看做“没有值”<br><strong>Tips：</strong></p>
<ol>
<li>避免使用undefined表示任何非特定值</li>
<li>使用描述性的字符串值或命名布尔属性的对象，而不要使用undefined 或 null来代表特定应用标志</li>
<li>提供参数默认值应该采用测试undefined的方式，而不是检查arguments.length。</li>
<li>在允许0、NaN或空字符串为有效参数的地方，绝不要通过真值测试来实现参数默认值。</li>
</ol>
<p>undefined很特殊，当JavaScript无法提供具体的值时没救产生undefined。<br>如只定义变量，不赋值；或者是对象中不存在属性；再者，函数无return语句都会产生undefined。</p>
<pre><code>var x;
console.log(x); //undefined
var o = {};
console.log(o.p1); //undefined
function fun(){

}
console.log(fun()); //undefined
</code></pre><p>未给函数参数提供实参则该函数参数值为undefined</p>
<pre><code>function fun(x){
    return x;
}
console.log(fun()); //undefined
</code></pre><p>将undefined看做缺少某个特定的值是公约。将它用于其他目的具有很高的风险：</p>
<pre><code>//假设highlight为设置元素高亮
element.highlight(&apos;yellow&apos;); //设置为黄色

//如果要设置为随机颜色
//方式一、如果遇到undefined则设置为随机
element.highlight(undefined);

//这样的方式通常会产生歧义
element.highlight(config.highlightColor);
//使用如上语句时，我们的期望一般是没有提供配置则使用默认色，但是由于undefined代表随机，那么破坏了这种常规思维。让代码变得难以理解。

//更好的做法
element.highlight(&apos;random&apos;);
//或者是
element.highlight({random: true});
</code></pre><p>另一个提防undefined的地方是可选参数的实现。</p>
<pre><code>function fun(a, b){
  if(arguments.length &lt; 2){
    b = &apos;xx&apos;;
  }
}
</code></pre><p>如果使用 fun(a);调用，基本符合预期；但是如果使用fun(a, ‘undefind’);则不会执行if之内的语句，导致结果错误，如果测试是否为undefined有助于打造更为健壮的API。</p>
<p>针对可选参数这个问题，另外一个合理的替代方案是：</p>
<pre><code>function fun(a, b){
  b = b || &apos;xxx&apos;;
}
</code></pre><p>但是要注意，真值测试并不总是安全的。如果一个函数应该接受空字符串，0，NaN为合法值，那么真值测试就不该使用了。</p>
<pre><code>//Bad Use
function Point(x, y){
  this.x = x || 200;
  this.y = y || 200;
}
</code></pre><p>以上代码有什么问题呢，因为使用 new Point(0, 0);会导致使用默认值，这样就偏离了预期。所以需要更严格的测试：</p>
<pre><code>function Point(x, y){
  this.x = x === undefined ? 200 : x;
  this.y = y === undefined ? 200 : y;
}
</code></pre><p>##No.55、接收关键字参数的选项对象<br><strong>Tips：</strong></p>
<ol>
<li>使用选项对象似的API更具可读性、更容易记忆</li>
<li>所有通过选项对象提供的参数应当被视为可选的</li>
<li>使用extend函数抽象出从选项对象中提取值的逻辑</li>
</ol>
<p>首先来看一个复杂的函数调用：</p>
<pre><code>fun(200, 200, &apos;action&apos;, &apos;green&apos;, true);
</code></pre><p>一眼望去，完全不知所云。在体会到C#的可选参数的便利性的时候，肯定会想JavaScript要是有这样的用法就好了。</p>
<p>幸运的是，JavaScript提供了一个简单、轻量的惯用法：选项对象。基本达到了可选参数的效果。</p>
<pre><code>fun({
  width: 200,
  height: 200,
  action: &apos;action&apos;,
  color: &apos;green&apos;,
  ignoreError: true
});
</code></pre><p>相对来说，更繁琐一点，但是更易于阅读。另外一个好处就是，参数都是可选的。</p>
<p>如果有必选参数，那么在设计API的时候。建议将它们独立于选项之外，其他语言也可借鉴这种思路。</p>
<pre><code>// options 为可选参数
function fun(width, height, options){
}
</code></pre><p>通过extend组合可选参数和默认参数，可以让函数变得简洁和健壮。</p>
<pre><code>function fun(width, height, options){
  var defaults = {
    color: &apos;green&apos;,
    ignoreError: false,
    action: &apos;&apos;
  }
  //$.extend 可以理解为jQuery的方法
  options = $.extend({}, defaults, options);
  //do something...
}
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（十）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/01/23/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20150123%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E5%8D%81%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##No.46、使用数组而不要使用字典来存储有序集合<br><strong>Tips:</strong></p>
<ol>
<li>使用for…in 循环来枚举对象属性应当与顺序无关</li>
<li>如果聚集运算字典中的数据，确保聚集操作与顺序无关</li>
<li>使用数组而不是字典来存储有序集合</li>
</ol>
<p>由于标准允许JavaScript引擎自由选择顺序，那么如果用字典存储有序数据，就会导致兼容性问题。</p>
<p>##No.47、绝不要在Object.prototype中增加可枚举的属性<br><strong>Tips：</strong></p>
<ol>
<li>避免在Object.prototype中增加属性</li>
<li>考虑编写一个函数代理Object.prototype方法</li>
<li>如果你是在需要在prototype中增加属性，请使用ES5中的Object.defineProperty方法将它们定义为不可枚举的属性</li>
</ol>
<p><code>for...in</code>循环非常便利，但是容易受到原型污染。如果在Object.prorotype中增加可枚举属性的话，将会导致大多数<code>for...in</code>循环受到污染。</p>
<p>如果是在是要在Object.prototype上定义属性的话，可以使用如下代码：</p>
<pre><code>Object.defineProperty(Object.prototype, &apos;allKeys&apos;, {
  value: function(){
    var arr = [];
    for(var key in this){
      arr.push(key);
    }
    return arr;
  },
  writable: true,
  enumerable: false, //设置属性为不可枚举
  configurable: true
});
</code></pre><p>测试代码：</p>
<pre><code>var obj = {a: 1, b: 2};
console.log(obj.allKeys()); // [&apos;a&apos;, &apos;b&apos;]
</code></pre><p>##No.48、避免在枚举期间修改对象<br><strong>Tips：</strong></p>
<ol>
<li>当使用<code>for...in</code> 循环枚举一个对象的属性时，确保不要修改该对象</li>
<li>当迭代一个对象时，如果该对象的内容可能会在循环期间被改变，应该使用while循环或经典的for循环来代替<code>for...in</code></li>
<li>为了在不断变化的数据结构中能够预测枚举，考虑使用一个有序的数据结构，例如数组，而不要使用字典</li>
</ol>
<p>在大部分编译型语言中，如果在迭代时修改对象属性，是会出现编译错误的。在js中，没有这样的编译机制，但是也尽量保证不要修改迭代对象。</p>
<p>如果在被枚举时添加了新对象，并不一定能保证新添加的对象能被访问到：</p>
<pre><code>var obj = {a: 1, b: 2};
for(var p in obj){
  console.log(p);
  obj[p + &apos;1&apos;] = obj[p] + 1;
}
</code></pre><p>遇到这样的场景，应当使用while和标准的for循环。</p>
<p>##No.49、数组迭代要优先使用for循环而不是<code>for...in</code>循环<br><strong>Tips:</strong></p>
<ol>
<li>迭代数组的索引属性应当总是使用for循环而不是<code>for...in</code>循环</li>
<li>考虑在循环之前将数组的长度存储在一个局部变量中以避免重新计算数组长度</li>
</ol>
<p>猜测下面一段代码的结果？</p>
<pre><code>var arr = [5, 6, 8, 10, 9];
var sum = 0;
for(var a in arr){
  sum += a;
}
console.log(sum);
</code></pre><p>要达到正确的结果，那么应该使用for循环</p>
<pre><code>var arr = [5, 6, 8, 10, 9];
var sum = 0;
for(var i = 0, len = arr.length; i &lt; len; i++){
  sum += arr[i];
}
console.log(sum); //38
</code></pre><p>再看一个比较极端的例子：</p>
<pre><code>var arr = [5, 6, 8, 10, 9];
arr.len = 4;
for(var p in arr){
  console.log(p);
}
</code></pre><p>这个时候用<code>for...in</code>,完全是达不到预期效果的</p>
<p>再来看一个对于数组长度缓存的测试代码：</p>
<pre><code>var count = 0;
console.time(&apos;t1&apos;);
while(count &lt; 10000){
  var arr = [5, 6, 8, 10, 9];
  var sum = 0;
  count++;
  for(var i = 0, len = arr.length; i &lt; len; i++){
    sum += arr[i];
  }
}
console.timeEnd(&apos;t1&apos;);

count = 0;
console.time(&apos;t2&apos;);
while(count &lt; 10000){
  var arr = [5, 6, 8, 10, 9];
  var sum = 0;
  count++;
  for(var i = 0; i &lt; arr.length; i++){
    sum += arr[i];
  }
}
console.timeEnd(&apos;t2&apos;);
</code></pre><p>结果，请自行复制代码执行。。。</p>
<p>##No.50、迭代方法优于循环<br><strong>Tips：</strong></p>
<ol>
<li>使用迭代方法（如Array.prototype.forEach和Array.prototype.map）替换for循环使得代码更可读，并且避免了重复循环控制逻辑</li>
<li>使用自定义的迭代函数来抽象未被标准库支持的常见循环模式</li>
<li>在需要提前终止循环的情况下，仍然推荐使用传统的循环。另外some和every方法也可用于提前退出</li>
</ol>
<p>在使用循环的时候，在确定循环的终止条件时容易引入一些简单的错误：</p>
<pre><code>for(var i = 0; i &lt;= n; i++){}
for(var i = 1; i&lt; n; i++){}
</code></pre><p>比较庆幸的是，闭包是一种为这些模式建立迭代抽象方便的、富有表现力的手法。</p>
<p>我们可以用以下代码来代替：</p>
<pre><code>var arr = [1, 2, 3];
arr.forEach(function(v, i){
  console.log(v);
});
</code></pre><p>如果要创建新数组，那么可以用以下方式：</p>
<pre><code>var arr = [1, 2, 3];
var arrNew = [];
//方式一
arr.forEach(function(v, i){
  arrNew.push(v);
});
//方式二
for(var i = 0, len = arr.length; i &lt; len; i++){
  arrNew.push(arr[i]);
}
</code></pre><p>为了简化这种普遍操作，ES5中引入了Array.prototype.map方法：</p>
<pre><code>var arr = [1, 2, 3];
var arrNew = arr.map(function(v){
  return v;
});
</code></pre><p>同样，如果想提取满足条件的元素，ES5也提供了filter方法：</p>
<pre><code>var arr = [1, 2, 3];
var arrNew = arr.filter(function(v){
  return v &gt; 1;
});
console.log(arrNew);
</code></pre><p>在ES5中，针对数组也提供了some和every ,可以用来终止循环，但是实际意义等同于C#的Linq方法All和Any：</p>
<pre><code>var arr = [1, 2, 3];

//数组元素有一个&gt;1就返回true，并终止循环
var b = arr.some(function(a){
  return a&gt;1;
});
console.log(b); //true

//数组元素每个都&lt;3，则返回true，否则返回false，并提前终止循环
b = arr.every(function(a){
  return a&lt;3;
});
console.log(b); //false
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（九）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/01/10/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20150110%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##No.41、将原型视为实现细节<br><strong>Tips：</strong></p>
<ol>
<li>对象是接口，原型是实现</li>
<li>避免检查你无法控制的对象的原型结构</li>
<li>避免检查实现在你无法控制的对象内部的属性</li>
</ol>
<p>我们可以获取对象的属性值和调用其方法，这些操作都不是特别在意属性存储在原型继承结构的哪个位置。只要其属性值保存很定，那么这些操作的行为也不变。简言之，原型是一种对象行为的实现细节。</p>
<p>正是由于以上的特性，所以如果修改了实现细节，那么依赖于这些对象的使用者就会被破坏，而且还很难诊断这类bug。所以一般来说，对于使用者，最好不要干涉那些属性。</p>
<p>##No.42、避免使用轻率的猴子补丁<br><strong>Tips：</strong></p>
<ol>
<li>避免使用轻率的猴子补丁</li>
<li>记录程序库所执行的所有猴子补丁</li>
<li>考虑通过将修改设置于一个导出函数中，使猴子补丁成为可选的</li>
<li>使用猴子补丁为缺失的标准API提供polyfills</li>
</ol>
<p><strong>何为猴子补丁？</strong></p>
<p>由于对象共享原型，因为每一个对象都可以增加、删除或修改原型的属性。这个有争议的实践通常被称为猴子补丁。</p>
<p>猴子补丁的吸引力在于它的强大，如果数组缺少一个有用的方法，那么我们可以自己扩展它。但是在多个库同时对数组进行不兼容扩展时，问题就来了，有可能调用方法之后的结果和预期不一致。</p>
<p>危险的猴子补丁有一个特别可靠而且有价值的使用场景：polyfill。补齐标准所支持的方法。</p>
<p>##No.43、使用Object的直接实例构造轻量级的字典<br><strong>Tips:</strong></p>
<ol>
<li>使用对象字面量构建轻量级字典</li>
<li>轻量级字典应该是Object.prototype的直接子类，以使for…in循环免受原型污染</li>
</ol>
<p>JavaScript对象的核心是一个字符串属性名称与属性值的映射表。</p>
<pre><code>var dict = {
  key1: &apos;value1&apos;,
  key2: &apos;value2&apos;
};
for(var key in dict){
  console.log(&apos;key=&apos;+ key + &apos;,value=&apos; + dict[key]);
}
</code></pre><p>在使用for…in时，要小心原型污染。</p>
<pre><code>function Dict(){
  Dict.prototype.count = function(){
    var c = 0;
    for(var p in this){
      c++;
    }
    return c;
  }  
}

var dict = new Dict();
dict.name = &apos;jay&apos;;
console.log(dict.count()); //结果是2，因为for...in会枚举出所有的属性，包括原型上的。
</code></pre><p>所有人都不应当增加属性到Object.prototype上，因为这样做可能会污染for…in循环，那么我们通过使用Object的直接实例，可以将风险仅仅局限于Object.prototype。</p>
<p>##No.44、使用null原型以防止原型污染<br><strong>Tips：</strong></p>
<ol>
<li>在ES5中，使用Object.create(null)创建的自由原型的空对象是不太容易被污染的</li>
<li>在一些较老的环境中，考虑使用{<strong>proto</strong>: null}</li>
<li>要注意<code>__proto__</code>既不标准，也不是完全可移植的，并且可能会在未来的JavaScript环境中去除</li>
<li>绝不要使用<code>__proto__</code>名作为字典的key，因为一些环境将其作为特殊的属性对待</li>
</ol>
<p>对构造函数的原型属性设置null或者是undefined是无效的：</p>
<pre><code>function Dict(){

}
Dict.prototype = null;
var dict = new Dict();
console.log(Object.getPrototypeOf(dict) === null); // false
console.log(Object.getPrototypeOf(dict) === Object.prototype); //true
</code></pre><p>在ES5中，提供了标准方法来创建一个没有原型的对象：</p>
<pre><code>var dict = Object.create(null);
console.log(Object.getPrototypeOf(dict) === null); // true
</code></pre><p>在不支持Object.create函数的旧的JS环境中，可以使用如下方式创建没有原型的对象：</p>
<pre><code>var dict = {__proto__: null}
console.log(Object.getPrototypeOf(dict) === null); // true
</code></pre><p><strong>注意：在支持Object.create函数的环境中，尽可能的坚持使用标准的Object.create函数</strong></p>
<p>##No.45、使用hasOwnProperty方法来避免原型污染<br><strong>Tips：</strong></p>
<ol>
<li>使用hasOwnProperty方法避免原型污染</li>
<li>使用词法作用域和call方法避免覆盖hasOwnProperty方法</li>
<li>考虑在封装hasOwnProperty测试样板代码的类中实现字典操作</li>
<li>使用字典类避免将<code>__proto__</code>作为key来使用</li>
</ol>
<p>即使是一个空的对象字面量也继承了Object.prototype的大量属性：</p>
<pre><code>var dict = {}
console.log(&apos;a&apos; in dict); // false
console.log(&apos;toString&apos; in dict); // true
console.log(&apos;valueOf&apos; in dict); // true
</code></pre><p>不过，Object.prototype提供了方法来测试字典条目：</p>
<pre><code>var dict = {}
console.log(dict.hasOwnProperty(&apos;a&apos;)); // false
console.log(dict.hasOwnProperty(&apos;toString&apos;)); // false
console.log(dict.hasOwnProperty(&apos;valueOf&apos;)); // false
</code></pre><p>但是，如果在字典中存储一个同为“hasOwnProperty”的属性，那么：</p>
<pre><code>var dict = {
  hasOwnProperty: null
}
console.log(dict.hasOwnProperty(&apos;a&apos;)); // TypeError
</code></pre><p>最安全的方法则是使用call：</p>
<pre><code>var dict = {
  hasOwnProperty: null
}
console.log({}.hasOwnProperty.call(dict, &apos;hasOwnProperty&apos;)); // true、
</code></pre><p>最后，我们来看一个复杂的但更安全的字典类：</p>
<pre><code>function Dict(elements){
  this.elements = elements || {};
  this.hasSpecialProto = false;
  this.specialProto = undefined;
}

Dict.prototype.has = function(key){
  if(key === &apos;__proto__&apos;){
    return this.hasSpecialProto;
  }
  return {}.hasOwnProperty.call(this.elements, key);
};

Dict.prototype.get = function(key){
  if(key === &apos;__proto__&apos;){
    return this.specialProto;
  }
  return this.has(key) ? this.elements[key] : undefined;
};

Dict.prototype.set = function(key, value){
  if(key === &apos;__proto__&apos;){
    this.hasSpecialProto = true;
    this.specialProto = value;
  }else{
    this.elements[key] = value;
  }
};

Dict.prototype.remove = function(key){
  if(key === &apos;__proto__&apos;){
    this.hasSpecialProto = false;
    this.specialProto = undefined;
  }else{
    delete this.elements[key];
  }
};

// 测试代码
var dict = new Dict();
console.log(dict.has(&apos;__proto__&apos;)); // false
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Web离线存储的几种方式]]></title>
      <url>http://hstarorg.github.io/blog/blog/2015/01/07/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%5B20150107%5DWeb%E7%A6%BB%E7%BA%BF%E5%AD%98%E5%82%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>随着HTML5的正式定稿，我们也可以大量使用HTML离线网络应用程序的特性。</p>
<h1 id="1、Application-Cache"><a href="#1、Application-Cache" class="headerlink" title="#1、Application Cache"></a>#1、Application Cache</h1><p><a href="http://www.w3schools.com/html/html5_app_cache.asp" target="_blank" rel="external">Application Cache</a> 可以很简单让我们的WebApp具有离线的能力。</p>
<p><strong>支持的浏览器：</strong>IE10+，FireFox，Chrome，Safari，Opera</p>
<p><strong>优点：</strong></p>
<ol>
<li>离线浏览 – 用户可以再离线时使用Application</li>
<li>速度 – 由于缓存了资源，如果加载很快</li>
<li>减少服务端数据加载 – 浏览器只需要从服务器加载更新过的数据</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>Manifest文件有变化时才更新</li>
<li>一次必须更新Manifest中的所有文件，下次才生效</li>
</ol>
<p><strong>如何使用？</strong></p>
<p>Step1:在html上指定manifest文件 (index.html)</p>
<pre><code>&lt;html manifest=&quot;appCacheList.manifest&quot;&gt;
&lt;/html&gt;
</code></pre><p>Step2:设定manifest文件内容 (appCache.manifest)</p>
<pre><code>CACHE MANIFEST

# 离线缓存的内容
./all.css
./1.jpg
./index.js

# NETWORK:*，表示其他内容从网络获取
NETWORK:
*

# 第一个uri是资源，第二个是fallback
FALLBACK:
/html/ /offline.html
</code></pre><p>手动更新缓存：</p>
<pre><code>if ( window.applicationCache.status == window.applicationCache.UPDATEREADY ){
    window.applicationCache.update();
}
</code></pre><p><strong>注意：</strong></p>
<ol>
<li>不同的浏览器对Application Cache的大小不一致，请注意。</li>
<li>更多细节可参考<a href="http://kayosite.com/web-app-by-jquery-mobile-and-html5-offline-web-applications.html" target="_blank" rel="external">http://kayosite.com/web-app-by-jquery-mobile-and-html5-offline-web-applications.html</a></li>
</ol>
<h1 id="2、Local-Storage"><a href="#2、Local-Storage" class="headerlink" title="#2、Local Storage"></a>#2、Local Storage</h1><p><a href="http://www.w3schools.com/html/html5_webstorage.asp" target="_blank" rel="external">Local Storage</a>使得我们可以在浏览器中保存数据。</p>
<p><strong>支持的浏览器：</strong>IE10+，FireFox，Chrome，Safari，Opera</p>
<p><strong>优点：</strong></p>
<ol>
<li>容量大</li>
<li>易用</li>
<li>强大</li>
<li>原生支持</li>
<li>仅存在本地，不会与服务器发生交互</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>浏览器兼容性差</li>
<li>安全性差（不要存储敏感数据）</li>
</ol>
<p><strong>如何使用？</strong></p>
<p>首先通过 <code>window.localStorage</code> 来判断浏览器是否支持Local Storage。然后由于该方式具有浏览器兼容性，建议用一个通用的库，来屏蔽兼容性。</p>
<pre><code>// 对基本方法的封装，需要判断浏览器，屏蔽它们的细节差异。
(function(window){
  if(!window.localStorage){
    throw new Error(&apos;Your brower can\&apos;t support local storage!&apos;);
  }
  var ls = window.localStorage;
  var localStorageKit = {
    getLength: function(){
      return ls.length;
    },
    clear: function(){
      ls.clear();
      return true;
    },
    set: function(k, v){
      ls.setItem(k, v);
    },
    get: function(k){
      return ls.getItem(k);
    },
    remove: function(k){
      ls.removeItem(k);
    },
    getKeyByIndex: function(index){
      return ls.key(index);
    }
  };
  window.lsKit = localStorageKit;
})(window);
</code></pre><p>基本操作方式与cookie无太多差异。</p>
<p><strong>Session Storage：</strong><br>Session Storage和Local Storage非常类似，操作方式也一致。由于其中保存的存只是当前会话有效，那么此处就不细说。</p>
<h1 id="3、Web-SQL"><a href="#3、Web-SQL" class="headerlink" title="#3、Web SQL"></a>#3、Web SQL</h1><p><a href="http://en.wikipedia.org/wiki/Web_SQL_Database" target="_blank" rel="external">Web Sql Database</a>，是html5环境下可以用js执行CRUD的web数据库。数据库核心是SQLite。</p>
<p><strong>优点：</strong></p>
<ol>
<li>本地数据库</li>
<li>可以处理复杂的关系型数据</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>暂时只有chrome才支持，对于Android大行其道的移动端，这应该是可以避免的缺点(貌似最新版本的Opera和Safari也支持了)</li>
</ol>
<p><strong>如何使用？</strong></p>
<p>首先，先介绍Web sql的三个核心方法：</p>
<ol>
<li>openDatabase：这个方法使用现有数据库或创建新数据库创建数据库对象。</li>
<li>transaction：这个方法允许我们根据情况控制事务提交或回滚。</li>
<li><p>executeSql：这个方法用于执行真实的SQL查询。</p>
<p> var db = openDatabase(‘mydb’, ‘1.0’, ‘Test DB’, 2 <em> 1024 </em> 1024);<br> var msg;<br> db.transaction(function (tx) {<br>   tx.executeSql(‘CREATE TABLE IF NOT EXISTS LOGS (id unique, log)’);<br>   tx.executeSql(‘INSERT INTO LOGS (id, log) VALUES (1, “foobar”)’);<br>   tx.executeSql(‘INSERT INTO LOGS (id, log) VALUES (2, “logmsg”)’);<br>   console.log(‘Log message created and row inserted.’);<br> });<br> db.transaction(function (tx) {<br>   tx.executeSql(‘SELECT * FROM LOGS’, [], function (tx, results) {</p>
<pre><code>var len = results.rows.length, i;
console.log(&apos;Found rows: &apos; + len);
for (i = 0; i &lt; len; i++){
  console.log(results.rows.item(i).log)
}
</code></pre><p>   }, null);<br> });</p>
</li>
</ol>
<p>当成数据库用，就行。</p>
<h1 id="4、IndexedDB"><a href="#4、IndexedDB" class="headerlink" title="#4、IndexedDB"></a>#4、IndexedDB</h1><p><a href="http://www.w3.org/TR/IndexedDB/" target="_blank" rel="external">IndexedDB</a>是结构化的本地数据存储。是基于平面文件的数据库，采用了分层的键值存储和基本的索引。</p>
<p><strong>优点：</strong></p>
<ol>
<li>标准化</li>
<li>存储复杂数据</li>
<li>支持索引</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>不支持SQL</li>
<li>相对来说，操作较复杂</li>
</ol>
<p><strong>如何使用？</strong></p>
<pre><code>// 打开数据库，第一个参数为数据库名，第二个为数据库版本号
var dbRequest = window.indexedDB.open(&apos;testDb&apos;, 2);

dbRequest.onupgradeneeded=function(e){
    // 创建数据仓库
    var db=e.target.result;
    if(!db.objectStoreNames.contains(&apos;users&apos;)){
        var store=db.createObjectStore(&apos;users&apos;,{keyPath: &apos;id&apos;});
        store.createIndex(&apos;nameIndex&apos;,&apos;name&apos;,{unique:true}); 
        store.createIndex(&apos;ageIndex&apos;,&apos;age&apos;,{unique:false}); 
    }
    console.log(&apos;upgrade successfully!&apos;);
};

dbRequest.onsuccess = function(e){
  console.log(&apos;Open database successfully!&apos;);
  // 这里拿到了数据库
  var db = e.target.result;
  var storeName = &apos;users&apos;;
  // 写入数据
  var tran = db.transaction(storeName, &apos;readwrite&apos;);
  var users = tran.objectStore(storeName);
  for(var i = 0; i &lt; 5; i++){
    users.add({
      id: i,
      name: &apos;user&apos; + i,
      age: Math.floor(Math.random() * 10) + 18
    });
  }

  //查询数据
  var userStore = db.transaction(storeName).objectStore(storeName);
  var request = userStore.openCursor();
  request.onsuccess = function(e){
    var cursor = e.target.result;
    if(cursor){
      console.log(cursor.key);
      console.log(cursor.value);
      cursor.continue();
    }
  }
}
</code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="http://html5online.com.cn/articles/2012080901.html" target="_blank" rel="external">HTML 5中几种用于在客户端本地存储数据的API之间的比较</a></p>
<p><a href="http://www.cnblogs.com/dolphinX/p/3415761.html" target="_blank" rel="external">HTML5本地存储——IndexedDB（一：基本使用）</a></p>
<p><a href="http://www.cnblogs.com/dolphinX/p/3416889.html" target="_blank" rel="external">HTML5本地存储——IndexedDB（二：索引）</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（八）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2014/12/27/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20141227%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E5%85%AB%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##NO.36、只将实例状态存储在实例对象中<br><strong>Tips：</strong></p>
<ol>
<li>共享可变数据可能会出问题，因为原型是被其所有的实例共享的</li>
<li>将可变的实例存储在实例对象中</li>
</ol>
<p>一般来说，由于原型属性指向的对象是所有实例共享的。所以不建议在原型指向的对象中存储共享数据。下面给一个简单的例子：</p>
<pre><code>var Person = function(name){
    this.name = name;
};
Person.prototype = {
    children: [],
    addChild: function(childName){
        this.children.push(childName);
    },
    getChildren: function(){
        return this.children;
    }
};

var p1 = new Person(&apos;P1&apos;);
var p2 = new Person(&apos;P2&apos;);
p2.addChild(&apos;P2_C1&apos;);
console.log(p1.getChildren());
</code></pre><p>结果比较明显。p2的孩子成p1的了。标准做法是将children存储在实例对象中。</p>
<pre><code>var Person = function(name){
    this.name = name;
    this.children = [];
};
Person.prototype = {
    addChild: function(childName){
        this.children.push(childName);
    },
    getChildren: function(){
        return this.children;
    }
};
</code></pre><p>##No.37、认识到this变量的隐式绑定问题<br><strong>Tips：</strong></p>
<ol>
<li>this变量的作用域总是有其最近的封闭函数所确定</li>
<li>使用一个局部变量（通常命名为self,me,that）使得this的绑定对于内部函数是可用的。</li>
</ol>
<p>老规矩，看一个简单的示例：</p>
<pre><code>var testObj = {
    a1: 0,
    fun1: function(){
        function fun2(){
            console.log(this.a1);
        }
        fun2();
    }
};
testObj.fun1();
</code></pre><p>为什么会这样呢？因为this变量是以不同的方式被绑定的。每个函数都有一个this变量的隐式绑定。this变量是隐式的绑定到最近的封闭函数。针对以上的问题，可以有集中方法来处理，参考如下：</p>
<pre><code>//通过将this用变量self保存的方式实现
var testObj = {
    a1: 0,
    fun1: function(){
        var self = this;
        function fun2(){
            console.log(self.a1);
        }
        fun2();
    }
};
testObj.fun1();

//通过call方法指定接收者（也可以用apply）
var testObj = {
    a1: 0,
    fun1: function(){
        function fun2(){
            console.log(this.a1);
        }
        fun2.call(this);
    }
};
testObj.fun1();

//通过bind来实现
var testObj = {
    a1: 1,
    fun1: function(){
        function fun2(){
            console.log(this.a1);
        }
        fun2.bind(this)();
    }
};
testObj.fun1();
</code></pre><p>##No.38、在子类的构造函数中调用父类的构造函数<br><strong>Tips：</strong></p>
<ol>
<li>在子类构造函数中显式地传入this作为显式的接收者调用父类的构造函数</li>
<li>使用Object.create函数来构造子类的原型对象以避免调用父类的构造</li>
</ol>
<p>JS中实现的继承：</p>
<pre><code>var Animal = function(){
    this.weight = 50;
};
Animal.prototype.eat = function(){
    console.log(&apos;eat food...&apos;);
};

var Dog = function(){
    Animal.call(this);
    Dog.prototype = Object.create(Animal.prototype);
};

var dog = new Dog();
console.log(dog.weight);
</code></pre><p>##No.39、不要重用父类的属性名<br><strong>Tips：</strong></p>
<ol>
<li>留意父类使用的所有属性名</li>
<li>不要再子类中重用父类的属性名</li>
</ol>
<p>由于JS中，属性都是key-value存储，那么同名的属性指向同样的地址，所以以下代码：</p>
<pre><code>var Animal = function(){
    this.weight = 50;
    this.id = ++Animal.nextId;
};
Animal.nextId = 0;
Animal.prototype.eat = function(){
    console.log(&apos;eat food...&apos;);
};

var Dog = function(){
    Animal.call(this);
    this.id = ++ Dog.nextId;
    Dog.prototype = Object.create(Animal.prototype);
};
Dog.nextId = 0;

var dog = new Dog();
console.log(dog.id);
</code></pre><p>两个类都试图给实例属性id写数据。</p>
<p>##No.40、避免继承标准类<br><strong>Tips：</strong></p>
<ol>
<li>继承标准类往往会由于一些特殊的内部属性（如[[Class]]）而被破坏</li>
<li>使用属性委托优于继承标准类</li>
</ol>
<p>扩展标注库使得其功能更强大是很有诱惑力的，但不幸的是它们的定义具有很多特殊的行为，所以很难写出正确的子类。</p>
<pre><code>var ArrayEx = function(){
    for(var i = 0, len = arguments.length; i&lt;len ; i++){
        this[i] = arguments[i];
    }
};
ArrayEx.prototype = Object.create(Array.prototype);

var ar = new ArrayEx(&apos;1&apos;, &apos;2&apos;);
console.log(ar.length) //猜猜结果是什么？
</code></pre><p>原因分析：length属性只对在内部标记为“真正的”数组对象才起作用。直接继承的对象并没有继承<br>Array的标记标签属性[[Class]]。测试如下：</p>
<pre><code>var ar = new ArrayEx(&apos;1&apos;, &apos;2&apos;);
console.log(Object.prototype.toString.call(ar)); //[object Object]
console.log(Object.prototype.toString.call([])); //[object Array]
</code></pre><p>ECMAScript标准库中干掉大多数构造函数都有类似的问题。基于这个原因，最好避免继承一下的标准类：<br>Array,Boolean,Date,Function,Number,RegExp或String。</p>
<p>要想实现类似的功能，可以采用属性委托的方式：</p>
<pre><code>var ArrayEx = function(){
    this.array = []
    for(var i = 0, len = arguments.length; i&lt;len ; i++){
        this.array[i] = arguments[i];
    }
};
ArrayEx.prototype.forEach = function(f, thisArg){
    if(typeof thisArg === &apos;undefined&apos;){
        thisArg = this;
    }
    this.array.forEach(f, thisArg);
};

var ar = new ArrayEx(&apos;1sfdfsd&apos;, &apos;2fdsfs&apos;);
ar.forEach(function(item, i){
    console.log(item);
});
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（七）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2014/12/20/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20141220%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##No.30、理解prototype、getPrototypeOf和<strong>proto</strong>之间的不同<br><strong>Tips：</strong></p>
<ol>
<li>C.prototype属性是new C() 创建的对象的原型</li>
<li>Object.getPrototypeOf(obj)是ES5中检索对象原型的标准函数</li>
<li>obj.<strong> proto</strong>是检索对象原型的非标准方法</li>
<li>类是由一个构造函数和一个关联的原型组成的一种设计模式</li>
</ol>
<p>简单点说，就是prototype属性直接是创建的对象的原型；getPrototypeOf()是一个标准函数，来获取对象原型；而<strong> proto</strong>则是不标准的原型属性。</p>
<pre><code>//定义一个类型
function User(name, age){
    this.name = name;
    this.age = age;
}
//实例化类型
var user = new User(&apos;Jay&apos;, 23);

//原型属性prototype作用在类对象上
User.prototype
//非标准__proto__作用在对象实例上
user.__proto__
//getPrototypeOf则是Object的一个方法，参数为实例对象
Object.getPrototypeOf(user)

Object.getPrototypeOf(user) === User.prototype; // true
User.prototype === user.__proto__; // true
</code></pre><p>##No.31、使用Object.getPrototypeOf()函数而不要使用<strong> proto</strong>属性<br><strong>Tips：</strong></p>
<ol>
<li>使用符合标准的Object.getPrototypeOf()函数而不要使用非标准的<strong> proto</strong>属性</li>
<li>在支持<strong> proto</strong>属性的非ES5环境中实现Object.getPrototypeOf()函数</li>
</ol>
<p>由于非标准属性不具有完全兼容性，所以容易出一些奇奇怪怪的问题，不建议使用。<br>在支持<strong> proto</strong>的非ES5标准环境下，使用下面代码来实现Object.getPrototypeOf()函数：</p>
<pre><code>if(typeof Object.getPrototypeOf === &apos;undefined&apos;){
    Object.getPrototypeOf = function(obj){
        var t = typeof obj;
        if(!obj || (t !== &apos;object&apos; &amp;&amp; t !== &apos;function&apos;)){
            throw new TypeError(&apos;Not an object.&apos;);
        }
        return obj.__proto__;
    }
}
</code></pre><p>##No.32、始终不要修改<strong> proto</strong>属性<br><strong>Tips：</strong></p>
<ol>
<li>始终不要修改<strong> proto</strong>属性</li>
<li>使用Object.create函数给对象设置自定义原型</li>
</ol>
<p><strong> proto</strong>很特殊，具有修改对象原型链的能力。修改了<strong> proto</strong>属性可能会造成以下几个问题：</p>
<ol>
<li>可移植性问题。并不是所有平台都支持改变对象原型的特性</li>
<li>性能问题。会使得引擎对JS代码的优化失效</li>
<li>行为不可预测。修改了<strong> proto</strong>可能会破坏原有的继承体系</li>
</ol>
<p>##No.33、使构造函数和new操作符无关<br><strong>Tips：</strong></p>
<ol>
<li>通过使用new操作符或Object.create方法在构造函数中调用自身使得该构造函数与调用语法无关</li>
<li>当一个函数期望使用new操作符调用时，清晰地文档化该函数</li>
</ol>
<p>同31，我们来看一下User对象：</p>
<pre><code>function User(name, age){
    this.name = name;
    this.age = age;
}
//如果使用new，那么会创建全新对象
var user = new User(&apos;Jay&apos;, 23);

//如果忘记使用new呢？
var user = User(&apos;Jay&apos;, 23)
//这个时候，该句代码，相当于调用函数，此时this在一般情况下是window，在ES5严格模式下是undefined。
//当是window的时候，则会污染全局变量name和age，造成无法预期的问题。
//当是undefined的时候，则会直接导致一个即时错误。
//由于User没有显式return，导致等号左边的user的值为undefined。
</code></pre><p>为了避免以上问题，可能使用以下两种方式：</p>
<pre><code>//方式一：
//通过在函数体判断，然后调用自身的方式来实现，一定会使用new。缺点是它需要额外的函数调用，对性能有影响。
function User(name, age){
    if(!(this instanceof User)){
        return new User(name, age);
    }
    this.name = name;
    this.age = age;
}

//方式二：
//通过判断this，将正确的接收者赋值给self，其他函数体内需要用this的地方，全部用self代替。缺点是使用了再ES5环境中有效的Object.create()。
function User(name, age){
    var self = this instaceof User ? this : Object.create(User.prototype);
    self.name = name;
    self.age  =age; 
}

//方式二补充，由于Object.create()只在ES5中生效，为了在旧环境中使用的话，可以使用以下方式扩充Object.create()。
if(typeof Object.create === &apos;undefined&apos;){
    Object.create = function(prototype){
        function C(){}
        C.prototype = prototype;
        return new C();
    }
}
</code></pre><p>##No.34、在原型中存储方法<br><strong>Tips：</strong></p>
<ol>
<li>将方法存储在实例对象中将创建该函数的多个副本，因为每个实例都有一份副本</li>
<li>将方法存储于原型中优于存储在实例对象中</li>
</ol>
<p>将方法存储在原型上，那么多个实例对象会共享该原型方法。如果存储在实例上的，每创建一个实例则会创建一个函数副本，会占用更多的内存。</p>
<p>##No.35、使用闭包存储私有数据<br><strong>Tips：</strong></p>
<ol>
<li>闭包变量是私有的，只能通过局部引用获取</li>
<li>将局部变量作为私有数据从而通过方法实现信息隐藏</li>
</ol>
<p>不多说，直接上代码：</p>
<pre><code>function User(name, age){
    // 私有对象
    var privateObj = {
        name: name,
        age: age,
        sex: &apos;男&apos;
    }
    // 公开属性
    return {
        name: privateObj.name,
        age: privateObj.age,
        setAge: function(age){
            privateObj.age = age;
        }
    }
}

var user = new User(&apos;Jay&apos;, 23);
console.log(user.name); // &apos;Jay&apos;
console.log(user.age);  // 23
console.log(user.sex);  // undefined
user.setAge(25);        
console.log(user.age);  // 23
</code></pre><p>思考：为什么最后一个user.age 是 23？？？</p>
<p>修改如下呢：</p>
<pre><code>function User(name, age){
    // 私有对象
    var privateObj = {
        name: name,
        age: age,
        sex: &apos;男&apos;
    }
    // 公开属性
    return {
        name: privateObj.name,
        age: function(){
            return privateObj.age;
        }
        setAge: function(age){
            privateObj.age = age;
        }
    }
}
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（六）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2014/12/13/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20141213%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##No.26、使用bind方法实现函数柯里化<br><strong>Tips：</strong></p>
<ol>
<li>使用bind方法实现函数柯里化，即创建一个固定需求参数子集的委托函数</li>
<li>传入null或undefined作为接收者的参数来实现函数柯里化，从而忽略其接收者</li>
</ol>
<p><strong>什么是函数柯里化？</strong></p>
<p><strong>将函数与其参数的一个子集绑定的技术称为函数柯里化，它是一种简洁的、使用更少引用来实现函数委托的方式。</strong></p>
<pre><code>//有一个组装URL的JS函数
function bulidURL(protocol, domain, path){
    return protocol + &apos;://&apos; + domain + &apos;/&apos; + path;
}

//需要一个path数组转换为url数组，那么一般做法是：
var urls = paths.map(function(path){
    return bulidURL(&apos;http&apos;, &apos;www.hstar.org&apos;, path);
});

如果用bind实现函数柯里化，则是：
var buildURL2 = buildURL.bind(null, &apos;http&apos;, &apos;www.hstar.org&apos;);
var urls = paths.map(buildURL2);

其中由于buildURL不引用this，那么在bind中使用null，忽略函数本身的接收者，然后用bind实现柯里化。
使用buildURL.bind的参数+buildURL2的参数结合起来调用buildURL方法。
可以在bulidURL中写console(arguments)来查看参数合集。
</code></pre><p>##No.27、使用闭包而不是字符串来封装代码<br><strong>Tips：</strong></p>
<ol>
<li>当将字符串传递给eval函数以执行它们的API时，绝不要在字符串中包含局部变量引用</li>
<li>接受函数调用的API优于使用eval函数执行字符串的API</li>
</ol>
<p>JS中，函数是一个将代码作为数据结构存储的便利方式，这些代码可以后面被执行。所以可以在JS中编写富有表现力的高阶函数，如map，forEach。</p>
<p>比较不好的设计，使用eval函数执行字符串。</p>
<pre><code>//定义一个函数，使用eval执行字符串
function fun1(code){
    eval(code);
}

//用法一：
var val = 0;
fun1(&apos;console.log(val)&apos;);

//用法二：
function fun2(){
    var val = 1;
    fun1(&apos;console.log(val)&apos;);
}
fun2(); //Error:val is not defined
</code></pre><p><strong>警告：在使用eval的时候，作用域是全局作用域（window），如用法一的调用，刚好能够出正常结果；如果转移到函数体内，如用法二的调用，则会出现错误；最坏的情况是用法二调用时，全局作用域上刚好有个同名的变量（本例中为val），那么将会让结果无法预期。</strong></p>
<p>好的做法，就是直接传递函数</p>
<pre><code>function fun1(){

}
function fun2(p, action){
    if(p === 1){
        action();
    }
}

fun2();
</code></pre><p>##No.28、不要依赖函数对象的toString方法<br><strong>Tips：</strong></p>
<ol>
<li>调用函数的toString方法时，并没有要求JavaScript引擎能够精确的获取到函数的源代码</li>
<li>由于在不同的引擎下调用toString方法的结果可能不同，所以绝不要信赖函数源代码的详细细节</li>
<li>toString方法的执行结果并不会暴露存储在闭包中的局部变量值</li>
<li>通常情况下，应该避免使用函数对象的toString方法</li>
</ol>
<p>JavaScript函数有一个非凡的特性，即将其源代码重现为字符串的能力。但是ECMAScript标准对toString返回的字符串没有任何要求，所以不同引擎产生的结果可能不同。甚至返回到字符串和该函数并不相关</p>
<p>##No.29、避免使用非标准的栈检查属性<br><strong>Tips：</strong></p>
<ol>
<li>避免使用非标准的arguments.caller和arguments.callee属性，因为它们不具备良好的移植性</li>
<li>避免使用非标准的函数对象caller属性，因为在包含全部栈信息方面，它是不可靠的</li>
</ol>
<p>基本错误（不推荐使用）</p>
<pre><code>function getCallStack(){
    var stack = [];
    for(var f = getCallStack.caller; f; f = f.caller){
        stack.push(f);
    }
    return stack;
}
</code></pre><p><strong>警告：该函数非常脆弱，如果某函数叜调用栈中出现了不止一次，那么栈检查会陷入死循环。同时使用caller在ES5的严格模式下会error。</strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（五）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2014/12/05/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20141205%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##No.21、使用apply方法通过不同数量的参数调用函数<br><strong>Tips：</strong></p>
<ol>
<li>使用apply方法自定一个可计算的参数数组来调用可变参数的函数</li>
<li><p>使用apply方法的第一个参数给可变参数的方法提供一个接收者</p>
<p> //示例：计算给定数据的最大值<br> function getMaxNum(){</p>
<pre><code>var max = arguments[0];
for(var i = 1, len = arguments.length;i &lt; len; i++){
    if(max &lt; arguments[i]){
        max = arguments[i];
    }
}
return max;
</code></pre><p> }<br> getMaxNum.apply(null,[1,3,4]);</p>
</li>
</ol>
<p><strong>该方法和call()方法功能基本类似，差别在于参数写法不一样。</strong></p>
<p>##No.22、使用arguments创建可变参数的函数<br><strong>Tips:</strong></p>
<ol>
<li>使用隐式的arguments对象实现可变参数的函数</li>
<li>考虑对可变参数的函数提供一个额外的固定元数的版本，从而使用者无需借助apply方法。</li>
</ol>
<p>每一个函数内部都有一个arguments对象包含所有传递的参数</p>
<pre><code>function fun1(){
    console.log(arguments);
}
fun1(&apos;1&apos;);
fun1(1,&apos;2&apos;,&apos;str&apos;);
</code></pre><p>##No.23、永远不要修改arguments的值<br><strong>Tips：</strong></p>
<ol>
<li>永远不要修改arguments的值</li>
<li>使用[].slice.call(arguments)将arguments对象赋值到一个真正的数组中再进行修改</li>
</ol>
<p>arguments看起来像是数组，但是它并不是标准的数组，所以不支持数组的原型方法</p>
<pre><code>function fun1(nums){
    var lastParam = arguments.pop(); //报错，undefined is not a function。
    console.log(arguments);
}

fun1([1, 2, 3]);
</code></pre><p>正确的做法是，将arguments转换为真正的数组，再进行操作，代码如下：</p>
<pre><code>function fun1(nums){
    var argArr = [].slice.call(arguments);
    var lastParam = argArr.pop();
    console.log(arguments);
}

fun1([1, 2, 3]);
</code></pre><p><strong>注意：永远不要修改arguments对象是更为安全的。</strong></p>
<p>##No.24、使用变量保存arguments的引用<br><strong>Tips：</strong></p>
<ol>
<li>当引用arguments时当心函数嵌套层级</li>
<li>绑定一个明确作用域的引用到arguments变量，从而可以再嵌套的函数中引用它</li>
</ol>
<p>首先，先来看一段代码的输出：</p>
<pre><code>function fun1(){
    var i = 0;
    console.log(arguments);
    return {
        next:function(){
            return arguments[i++]; 
        }
    }
}
var f = fun1(1,2,3,4);
console.log(f.next()); //猜猜是啥？
</code></pre><p>arguments是函数中的隐式变量，每个函数都会有这样的一个隐式对象。所以最后一个console的结果可想而知。所以遇到这种场景，是建议用变量保存arguments的引用，也能让嵌套函数正确的进行对象引用，正确代码如下：</p>
<pre><code>function fun1(){
    var i = 0;
    var args = arguments;
    return {
        next:function(){
            return args[i++]; 
        }
    }
}
var f = fun1(1,2,3,4);
console.log(f.next());
</code></pre><p>##No.25、使用bind方法提取具有确定接收者的方法<br><strong>Tips：</strong></p>
<ol>
<li>要注意，提取一个方法不会将方法的接收者绑定到该方法的对象上</li>
<li>当给高阶函数传递对象方法时，使用匿名函数在适当的接收者上调用该方法</li>
<li>使用bind方法创建绑定到适当接收者的函数</li>
</ol>
<p>老规矩，看代码：（代码1）</p>
<pre><code>var buffer = {
    entries: [],
    add: function(value){
        this.entries.push(value);
    },
    concat: function(){
        return this.entries.join(&apos;&apos;);
    }
};
</code></pre><p>该代码在直接使用时是没有问题的，思考下，由于高阶函数将函数/方法作为变量传递，那么可以有如下用法：（代码2）</p>
<pre><code>var arr = [&apos;Jay&apos;, &apos;.M&apos;, &apos;.Hu&apos;];
arr.forEach(buffer.add);
console.log(buffer.concat()); //思考下这个结果是什么？
</code></pre><p>以上代码在arr.forEach处已经报错，Cannot read property ‘push’ of undefined。因为这个时候的涉及到this的指向问题。我们可以改造下buffer代码，输出this让我们看看：（代码3）</p>
<pre><code>var buffer = {
    entries: [],
    add: function(value){
        console.log(this);
        this.entries.push(value);
    },
    concat: function(){
        return this.entries.join(&apos;&apos;);
    }
};
</code></pre><p>从输出结果我们可以看到这个this，在（代码2）的执行环境中，指向的是window对象，所以导致了报错，那么如何避免这样的问题呢？针对forEach，我们有三个方法：(代码4)</p>
<pre><code>//方式一，去掉this，直接用buffer对象引用
var buffer = {
    entries: [],
    add: function(value){
        buffer.entries.push(value);
    },
    concat: function(){
        return buffer.entries.join(&apos;&apos;);
    }
};

//方式二，指定接收者，forEach方法提供，其他方法不一定提供
var arr = [&apos;Jay&apos;, &apos;.M&apos;, &apos;.Hu&apos;];
arr.forEach(buffer.add, buffer);
console.log(buffer.concat());

//方式三，通过用函数包装调用，来实现指定接收者
var arr = [&apos;Jay&apos;, &apos;.M&apos;, &apos;.Hu&apos;];
arr.forEach(function(s){
    buffer.add(s);
});
console.log(buffer.concat());
</code></pre><p>针对这样的问题，ES5标准库中提供了一个bind()函数来实现这样的方法。只需要如下代码：</p>
<pre><code>var arr = [&apos;Jay&apos;, &apos;.M&apos;, &apos;.Hu&apos;];
arr.forEach(buffer.add.bind(buffer));
console.log(buffer.concat());
</code></pre><p>该bind()函数，利用buffer.add.bind(buffer)创建了一个新函数而不是修改了buffer.add函数。新函数行为就像原来函数的行为，但它的接收者被重新指定了。所以调用bind方法是安全的，即使是一个可能在程序的其他部分被共享的函数。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（四）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2014/11/29/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20141129%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##No.16、避免使用eval创建局部变量<br><strong>Tips：</strong></p>
<ol>
<li>避免使用eval函数创建的变量污染调用者作用域。</li>
<li>如果eval函数代码可能创建全局变量，将此调用封装到嵌套的函数中已防止作用域污染。</li>
</ol>
<p>执行eval时，eval中的变量才会被加到作用域中（函数作用域）</p>
<pre><code>function fun1(){
    eval(&apos;var y = 1;&apos;);
    console.log(&apos;fun1-&gt;y:&apos;+y); // &apos;fun-&gt;y:1&apos;
}
fun1();
console.log(&apos;global-&gt;y:&apos;+y); //throw Error
</code></pre><p>不要直接将不可控参数交给eval执行，可能会改变作用域对象。</p>
<pre><code>//Bad code
var g = &apos;global&apos;;
function fun2(code){
    eval(code);
}
fun2(&apos;var g=&quot;local&quot;&apos;);
console.log(g) //&apos;local&apos;

//Right code
var g = &apos;global&apos;;
function fun2(code){
    (function(){
        eval(code);
    })();
}
fun2(&apos;var g=&quot;local&quot;&apos;);
console.log(g) //&apos;global&apos;,嵌套作用域
</code></pre><p>以上Right Code，如果执行不带var的变量申明，那么也是会影响全局的g对象的。</p>
<h2 id="No-17、间接调用eval函数优于直接调用"><a href="#No-17、间接调用eval函数优于直接调用" class="headerlink" title="No.17、间接调用eval函数优于直接调用"></a>No.17、间接调用eval函数优于直接调用</h2><p><strong>Tips：</strong></p>
<ol>
<li>将eval函数同一个毫无意义的字面量包裹在序列表达式中以达到强制使用间接调用eval函数的目的</li>
<li>尽可能间接调用eval函数，而不要直接调用eval函数</li>
</ol>
<p>直接调用eval，那么编译器无法优化JS代码。<br>如何间接调用eval？</p>
<pre><code>(0,eval)(code) 
</code></pre><p>##No.18、理解函数的调用、方法调用及构造函数调用之间的不同<br><strong>Tips：</strong></p>
<ol>
<li>方法调用将被查找方法属性的对象作用调用接收者</li>
<li>函数调用将全局对象作为其接受者。一般很少使用该函数调用语法来调用方法</li>
<li>构造函数需要通过new运算符调用，并产生一个新的对象作为其接收者</li>
</ol>
<p>在全局对象上直接定义的function被称为函数，调用则是函数调用</p>
<pre><code>var fun1 = function(p){
    console.log(p);
};

function fun2(p){
    console.log(p);
}
//函数调用
fun1(&apos;p1&apos;);
fun2(&apos;p2&apos;);
</code></pre><p>如果对象的属性是函数，那么称之为方法，使用模式则是方法调用</p>
<pre><code>var obj = {
    name: &apos;Hello &apos;,
    fun1: function(name){
        console.log(this.name + name);
    }
};
//方法调用
obj.fun1(&apos;Jay&apos;);
</code></pre><p><strong>注意：fun1中通过this来访问obj的name属性</strong></p>
<p>构造函数调用将一个全新的对象作为this变量的值</p>
<pre><code>fucntion User(name, age){
    this.Name = name;
    this.Age = age;
}
//此时，user是一个全新的对象
var user = new User(&apos;Jay&apos;, 23);
</code></pre><p>##No.19、熟练掌握高阶函数<br><strong>Tips：</strong></p>
<ol>
<li>高阶函数是那些将函数作为参数或返回值的函数</li>
<li>熟练掌握现有库的高阶函数</li>
<li>学会发现可以被高阶函数所取代的常见编码模式</li>
</ol>
<p>需求：将数组元素全部转换为大写</p>
<pre><code>//常规做法
var arr = [&apos;abc&apos;, &apos;test&apos;, &apos;123&apos;];
for(var i =0, len = arr.length; i &lt; len; i++){
    arr[i] = arr[i].toUpperCase();
}
console.log(arr);

//高阶函数
var arr = [&apos;abc&apos;, &apos;test&apos;, &apos;123&apos;];
arr = arr.map(function(item){
    return item.toUpperCase();
});
console.log(arr);
</code></pre><p><strong>注意：需要注意高阶函数使用时的返回值，有些是更改原始对象，有些是返回新对象</strong></p>
<p>##No.20、使用call方法自定义接收者来调用方法<br><strong>Tips：</strong></p>
<ol>
<li>使用call方法自定义接收者（个人理解为作用域）来调用函数</li>
<li>使用call方法可以调用在给定对象中不存在的方法</li>
<li><p>使用call方法定义高阶函数允许使用者给回调函数指定接收者</p>
<p> function fun1(){</p>
<pre><code>this.name = &apos;Test&apos;;
</code></pre><p> }<br> var obj = {</p>
<pre><code>name: &apos;Jay&apos;
</code></pre><p> };<br> console.log(obj.name);<br> fun1.call(obj);<br> console.log(obj.name);</p>
</li>
</ol>
<p>call函数的调用方式：</p>
<pre><code>f.call(obj, p1, p2, p3);
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之Array常用功能汇总]]></title>
      <url>http://hstarorg.github.io/blog/blog/2014/11/21/JS%E6%9C%AD%E8%AE%B0/%5B20141121%5DJavaScript%E4%B9%8BArray%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p><strong>导语：</strong>在JavaScript中，Array是一个使用比较频繁的对象，那么它到底有哪些常用的方法呢？</p>
<p>首先，我们先看一下Array对象的类型：</p>
<pre><code>typeof Array // &apos;function&apos;
Array instanceof Object // true
</code></pre><p>从上可以看出，Array本质是一个function，同样派生自Object，定义如下：</p>
<pre><code>function Array(args) {}
</code></pre><p>###接下来，我们来看Array自身的方法：</p>
<h4 id="1、concat"><a href="#1、concat" class="headerlink" title="#1、concat()"></a>#1、concat()</h4><p>定义：原型方法，连接两个或更多的数组，并返回结果（新数组）。</p>
<pre><code>Array.prototype.concat = function(items) {};
</code></pre><p>示例：</p>
<pre><code>var arr1 = [1, 2];
var arr2 = arr1.concat([3, 4]);
var arr3 = arr2.concat([5, 6], [7, 8] ,10, {});
console.log(arr1); // [1, 2]
console.log(arr2); // [1, 2, 3, 4]
console.log(arr3); // [1, 2, 3, 4, 5, 6, 7, 8,  10, Object]
</code></pre><p><strong>注意：</strong>concat不仅可以连接单个对象，也可以连接多个对象，同时如果是参数为数组，那么会将数组元素拆分并连接，如果是对象，则直接将对象连接。<span style="color:red;"><b>该方法不会改变原始数组</b></span></p>
<h4 id="2、join"><a href="#2、join" class="headerlink" title="#2、join()"></a>#2、join()</h4><p>定义：原型方法，把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</p>
<pre><code>Array.prototype.join = function(separator) {};
</code></pre><p>示例：</p>
<pre><code>var arr = [1, 2, 3];
console.log(arr.join(&apos;|&apos;)); // &apos;1|2|3&apos;
console.log(arr.join(&apos;&apos;));  // &apos;123&apos;
console.log(arr.join(&apos;---&apos;));  // &apos;1---2---3&apos;
</code></pre><p><strong>注意：</strong>太常用了，没什么可注意的~</p>
<h4 id="3、pop"><a href="#3、pop" class="headerlink" title="#3、pop()"></a>#3、pop()</h4><p>定义：原型方法，删除并返回数组的最后一个元素。</p>
<pre><code>Array.prototype.pop = function() {};
</code></pre><p>示例：</p>
<pre><code>var arr1 = [1, 2, 3, 4];
var lastOne = arr1.pop();
console.log(lastOne);  // 4
console.log(arr1);     // [1, 2, 3]
</code></pre><p><strong>注意：</strong>该方法无参数，有返回值，返回数组最后一个元素。<span style="color:red;"><b>该方法会改变原始数组</b></span></p>
<h4 id="4、push"><a href="#4、push" class="headerlink" title="#4、push()"></a>#4、push()</h4><p>定义：原型方法，向数组的末尾添加一个或更多元素，并返回新的长度。</p>
<pre><code>Array.prototype.push = function(items) {};
</code></pre><p>示例：</p>
<pre><code>var arr1 = [1, 2];
var len = arr1.push(3);
var arr2 = arr1.push(4, 5);
console.log(len);
console.log(arr1);
console.log(arr2);
</code></pre><p><strong>注意：</strong>该方法的返回值会返回数组的新长度。<span style="color:red;"><b>该方法会改变原始数组</b></span></p>
<h4 id="5、reverse"><a href="#5、reverse" class="headerlink" title="#5、reverse()"></a>#5、reverse()</h4><p>定义：原型方法，颠倒数组中元素的顺序。</p>
<pre><code>Array.prototype.reverse = function() {};
</code></pre><p>示例：</p>
<pre><code>var arr1 = [1, 2, 3, 4, 5];
var res = arr1.reverse();
console.log(res);
console.log(arr1);
</code></pre><p><strong>注意：</strong>该方法的返回值为自身（翻转后的值），<span style="color:red;"><b>该方法会改变原始数组</b></span></p>
<h4 id="6、shift"><a href="#6、shift" class="headerlink" title="6、shift()"></a>6、shift()</h4><p>定义：原型方法，删除并返回数组的第一个元素。</p>
<pre><code>Array.prototype.shift = function() {};
</code></pre><p>示例：</p>
<pre><code>var arr1 = [1, 2, 3];
var res = arr1.shift();
console.log(res);
console.log(arr1);
</code></pre><p><strong>注意：</strong>该方法返回数组第一个元素，和pop()方法对应（返回并删除最后一个元素）。<span style="color:red;"><b>该方法会改变原始数组</b></span></p>
<h4 id="7、slice"><a href="#7、slice" class="headerlink" title="#7、slice()"></a>#7、slice()</h4><p>定义：原型方法，从某个已有的数组返回选定的元素。</p>
<pre><code>Array.prototype.slice = function(start,end) {};
</code></pre><p>示例：</p>
<pre><code>var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
var res1 = arr.slice(0, 3);
var res2 = arr.slice(0, 100);
var res3 = arr.slice(-1,-6);
var res4 = arr.slice(-6, -1);
console.log(res1);
console.log(res2);
console.log(res3);
console.log(res4);
console.log(arr)
</code></pre><p><strong>注意：</strong>该方法支持逆向索引，同时索引采取区间左闭右开的原则。<span style="color:red;"><b>该方法不会改变原始数组</b></span></p>
<h4 id="8、sort"><a href="#8、sort" class="headerlink" title="#8、sort()"></a>#8、sort()</h4><p>定义：原型方法，对数组的元素进行排序。</p>
<pre><code>Array.prototype.sort = function(compareFn) {};
</code></pre><p>示例：</p>
<pre><code>var arr = [1, 5, 2, 3, 4, 7, 8, 6, 9];
var res1 = arr.sort(); //如果是数字，默认从小到大排序
console.log(res1);
var arr2 = [&apos;a&apos;, &apos;c&apos;, &apos;b&apos;];
var res2 = arr2.sort();//如果是字符，按照字符顺序（ASCII，字符串同）排序
console.log(res2);
//遇到复杂数据，经过测试是按照数组&lt;正则&lt;数字&lt;对象&lt;字符串&lt;函数 这个顺序
var arr3 = [{name:&apos;name&apos;}, 134, &apos;aaa&apos;, function(){}, [], /a/];
var res3 = arr3.sort();
console.log(arr3);

//可以通过自定义规则实现复杂的排序
var res4 = arr.sort(function(a1, a2){
    if(a1 === a2){ // 两者相等，那么就算想等
        return 0;
    }
    if(a1%3 === 0){ //如果a1被3整除，那么a1小
        return -1;
    }
    if(a2%3 === 0){ //如果a2被3整除，那么a2小
        return 1;
    }
    return a2%3-a2%3; //不满足以上条件，那么根据余数比大小，余数小的元素小
})
console.log(res4);
</code></pre><p><strong>注意：</strong>该方法返回自身（排序后数组）。可通过function(a1, a2){}实现非常复杂的排序规则。<span style="color:red;"><b>该方法会改变原始数组</b></span></p>
<h4 id="9、splice"><a href="#9、splice" class="headerlink" title="#9、splice()"></a>#9、splice()</h4><p>定义：原型方法，删除元素，并向数组添加新元素。（该方法相等较复杂，悠着点用）</p>
<pre><code>Array.prototype.splice = function(start,deleteCount,items) {};
</code></pre><p>示例：</p>
<pre><code>var arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
var res1 = arr1.splice(0, 3, &apos;new1&apos;, &apos;new2&apos;);
console.log(res1);  // [1, 2, 3] 
console.log(arr1);  // [&apos;new1&apos;, &apos;new2&apos;, 4, 5, 6, 7, 8, 9] 

arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9];
res1 = arr1.splice(-6, 3, &apos;new1&apos;, &apos;new2&apos;);
console.log(res1);  // [4, 5, 6]
console.log(arr1);  // [1, 2, 3, &apos;new1&apos;, &apos;new2&apos;, 7, 8, 9]
</code></pre><p><strong>注意：</strong>splice()函数支持倒叙索引，同时第二个参数是长度（不是下标），新插入的数据会插入在start下标位置。返回值为删除的元素数组。<span style="color:red;"><b>该方法会改变原始数组</b></span></p>
<h4 id="10、unshift"><a href="#10、unshift" class="headerlink" title="#10、unshift()"></a>#10、unshift()</h4><p>定义：原型方法，向数组的开头添加一个或更多元素，并返回新的长度。</p>
<pre><code>Array.prototype.unshift = function(items) {};
</code></pre><p>示例：</p>
<pre><code>var arr1= [1, 2, 3];
var res1 = arr1.unshift(&apos;new1&apos;, &apos;new2&apos;);
console.log(res1); // 5
console.log(arr1); // [&quot;new1&quot;, &quot;new2&quot;, 1, 2, 3] 
</code></pre><p><strong>注意：</strong>该方法和push相对(在末尾添加元素，返回新长度)，该方法的返回值是新数组长度。<span style="color:red;"><b>该方法会改变原始数组</b></span></p>
<h3 id="我们还可以为Array添加更多的常用功能，比如："><a href="#我们还可以为Array添加更多的常用功能，比如：" class="headerlink" title="我们还可以为Array添加更多的常用功能，比如："></a>我们还可以为Array添加更多的常用功能，比如：</h3><pre><code>Array.prototype.where = function(predicateFn){
    var parameterIsFn = typeof predicateFn === &apos;function&apos;
    var result = [];
    for(var i = 0, len = this.length; i &lt; len; i++){
        if(!parameterIsFn || predicateFn(this[i])){
            result.push(this[i]);
        }
    }
    return result;
};

var arr = [&apos;new1&apos;, &apos;new2&apos;, 1, 2, 3];
var res = arr.where(function(item){
    return typeof item === &apos;number&apos;;
});
console.log(res);
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[这些年你需要注意的SQL]]></title>
      <url>http://hstarorg.github.io/blog/blog/2014/11/14/SQL%20SERVER/%5B20141114%5D%E8%BF%99%E4%BA%9B%E5%B9%B4%E4%BD%A0%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84SQL/</url>
      <content type="html"><![CDATA[<h2 id="1、使用对象时，请显式的指定对象的架构者（默认为dbo）"><a href="#1、使用对象时，请显式的指定对象的架构者（默认为dbo）" class="headerlink" title="#1、使用对象时，请显式的指定对象的架构者（默认为dbo）"></a>#1、使用对象时，请显式的指定对象的架构者（默认为dbo）</h2><p><strong>分析：</strong> 在SQL SERVER中，如果用户User1访问表table1，那么查询分析器必须决定是检索 User1.table1 还是 dbo.table1 。所以每次User1访问同一张表table1时，查询分析器都必须对查询计划<br>重编译，影响执行速度。</p>
<h2 id="2、尽量避免使用SELECT-，建议使用-SELECT"><a href="#2、尽量避免使用SELECT-，建议使用-SELECT" class="headerlink" title="#2、尽量避免使用SELECT *，建议使用 SELECT "></a>#2、尽量避免使用SELECT *，建议使用 SELECT <field list=""></field></h2><p><strong>分析：</strong> 采用SELECT * 语法会导致DB对列进行一个遍历，同时可能会查询多余字段数据(本着用啥查啥的原则，建议使用SELECT &lt;Field List&gt;)，导致查询性能下降。 </p>
<h2 id="3、如果一个T-SQL语句涉及到多个表，则引用的每个列必须制定该列所属的对象"><a href="#3、如果一个T-SQL语句涉及到多个表，则引用的每个列必须制定该列所属的对象" class="headerlink" title="#3、如果一个T-SQL语句涉及到多个表，则引用的每个列必须制定该列所属的对象"></a>#3、如果一个T-SQL语句涉及到多个表，则引用的每个列必须制定该列所属的对象</h2><p><strong>分析：</strong> 避免造成数据查询异常</p>
<h2 id="4、Insert语句中必须指定插入列的列表"><a href="#4、Insert语句中必须指定插入列的列表" class="headerlink" title="#4、Insert语句中必须指定插入列的列表"></a>#4、Insert语句中必须指定插入列的列表</h2><p><strong>分析：</strong> 避免表列变化导致插入语句失败</p>
<h2 id="5、在非事物和特别要求完整性的上下文中，使用NOLOCK查询"><a href="#5、在非事物和特别要求完整性的上下文中，使用NOLOCK查询" class="headerlink" title="#5、在非事物和特别要求完整性的上下文中，使用NOLOCK查询"></a>#5、在非事物和特别要求完整性的上下文中，使用NOLOCK查询</h2><p><strong>分析：</strong> 考虑到并发性，提高查询效率</p>
<p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> TOP <span class="number">100</span> COL1,COL2 <span class="keyword">FROM</span> TABLE1 t1 <span class="keyword">WITH</span> (NOLOCK)</div></pre></td></tr></table></figure>
<h2 id="6、通过SELECT语句对变量赋值时，如果未使用聚合函数，请加上TOP-1"><a href="#6、通过SELECT语句对变量赋值时，如果未使用聚合函数，请加上TOP-1" class="headerlink" title="#6、通过SELECT语句对变量赋值时，如果未使用聚合函数，请加上TOP 1"></a>#6、通过SELECT语句对变量赋值时，如果未使用聚合函数，请加上TOP 1</h2><p><strong>分析：</strong> 防止结果非预期</p>
<p><strong>示例：</strong> (预期结果为2，因为第二次Name2是后添加的。)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test6</div><div class="line">( </div><div class="line">      <span class="keyword">Id</span> <span class="built_in">int</span> </div><div class="line">    ,<span class="keyword">Name</span> <span class="keyword">nvarchar</span>(<span class="number">32</span>) </div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test6	(<span class="keyword">Id</span>, <span class="keyword">Name</span>)</div><div class="line"><span class="keyword">SELECT</span>     <span class="number">1</span>, N<span class="string">'Name1'</span></div><div class="line"><span class="keyword">UNION</span> all</div><div class="line"><span class="keyword">SELECT</span>	   <span class="number">2</span>, N<span class="string">'Name2'</span> </div><div class="line"></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test6	(<span class="keyword">Id</span>, <span class="keyword">Name</span>)</div><div class="line"><span class="keyword">SELECT</span>	   <span class="number">3</span>, N<span class="string">'Name2'</span></div><div class="line"></div><div class="line"><span class="comment">--错误的写法</span></div><div class="line"><span class="keyword">DECLARE</span> @<span class="keyword">Id</span> <span class="built_in">int</span></div><div class="line"><span class="keyword">SELECT</span> </div><div class="line">    @<span class="keyword">Id</span>=<span class="keyword">Id</span> </div><div class="line"><span class="keyword">FROM</span> test6 </div><div class="line"><span class="keyword">WHERE</span> </div><div class="line">    <span class="keyword">Name</span> = <span class="string">'Name2'</span></div><div class="line"></div><div class="line"><span class="comment">--正确的写法</span></div><div class="line"><span class="keyword">DECLARE</span> @<span class="keyword">Id</span> <span class="built_in">int</span></div><div class="line"><span class="keyword">SELECT</span> TOP <span class="number">1</span></div><div class="line">    @<span class="keyword">Id</span>=<span class="keyword">Id</span> </div><div class="line"><span class="keyword">FROM</span> test6 </div><div class="line"><span class="keyword">WHERE</span> </div><div class="line">    <span class="keyword">Name</span> = <span class="string">'Name2'</span></div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"></div><div class="line">## #7、对于排序后取字段TOP 1的值，建议使用聚合</div><div class="line">**分析:** 可以用上索引，而且不需要Table Scan</div><div class="line"></div><div class="line">**示例：**</div><div class="line"></div><div class="line">`<span class="string">``</span><span class="keyword">sql</span></div><div class="line"><span class="comment">--错误的写法</span></div><div class="line"><span class="keyword">SELECT</span> TOP <span class="number">1</span> col1 <span class="keyword">FROM</span> table1 <span class="keyword">ORDER</span> <span class="keyword">BY</span> col1 <span class="keyword">DESC</span></div><div class="line"></div><div class="line"><span class="comment">--正确的写法</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(col1) <span class="keyword">FROM</span> table1</div></pre></td></tr></table></figure>
<h2 id="8、有关char和varchar，char和nchar-varchar和nvarchar的区别"><a href="#8、有关char和varchar，char和nchar-varchar和nvarchar的区别" class="headerlink" title="#8、有关char和varchar，char和nchar,varchar和nvarchar的区别"></a>#8、有关char和varchar，char和nchar,varchar和nvarchar的区别</h2><p><strong>分析：</strong></p>
<ol>
<li>char是固定长度，如果数据不够，会在存储时自动补空格</li>
<li>varchar是可变长度，会有三个字节来存储字段信息，可以设置最大长度</li>
<li>nchar和varchar这种以N开头的表示存储unicode编码字符</li>
<li>在特定字符集下，如果定义数据格式为char或者是varchar，那么存储特殊字符（包括中文）会乱码</li>
<li>关于数据库函数LEN()，是用于返回指定字符串表达式的字符数，<span style="color:red;"><b>其中不包含尾随空格。</b></span></li>
<li>关于DATALENGTH函数，<span style="color:red;"><b>返回用于表示任何表达式的字节数。</b></span></li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span> @s1 <span class="built_in">CHAR</span>(<span class="number">5</span>)</div><div class="line">        ,@s2 <span class="built_in">VARCHAR</span>(<span class="number">5</span>)</div><div class="line">        ,@s3 <span class="keyword">NCHAR</span>(<span class="number">5</span>)</div><div class="line">        ,@s4 <span class="keyword">NVARCHAR</span>(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment">--看看这个结果是什么？</span></div><div class="line"><span class="keyword">SET</span> @s1 = <span class="string">'test'</span></div><div class="line"><span class="keyword">SET</span> @s2 = <span class="string">'test'</span></div><div class="line"><span class="keyword">SET</span> @s3 = <span class="string">'test'</span></div><div class="line"><span class="keyword">SET</span> @s4 = <span class="string">'test'</span></div><div class="line"><span class="keyword">SELECT</span> </div><div class="line">    <span class="keyword">LEN</span>(@s1)</div><div class="line">    ,<span class="keyword">LEN</span>(@s2)</div><div class="line">    ,<span class="keyword">LEN</span>(@s3)</div><div class="line">    ,<span class="keyword">Len</span>(@s4)</div><div class="line"><span class="keyword">SELECT</span> </div><div class="line">    <span class="keyword">DATALENGTH</span>(@s1)</div><div class="line">    ,<span class="keyword">DATALENGTH</span>(@s2)</div><div class="line">    ,<span class="keyword">DATALENGTH</span>(@s3)</div><div class="line">    ,<span class="keyword">DATALENGTH</span>(@s4)</div><div class="line"></div><div class="line"><span class="comment">--如果这样呢？</span></div><div class="line"><span class="keyword">SET</span> @s1 = <span class="string">'我是中文'</span></div><div class="line"><span class="keyword">SET</span> @s2 = <span class="string">'我是中文'</span></div><div class="line"><span class="keyword">SET</span> @s3 = <span class="string">'我是中文'</span></div><div class="line"><span class="keyword">SET</span> @s4 = <span class="string">'我是中文'</span></div><div class="line"><span class="keyword">SELECT</span> </div><div class="line">    <span class="keyword">LEN</span>(@s1) </div><div class="line">    ,<span class="keyword">LEN</span>(@s2) </div><div class="line">    ,<span class="keyword">LEN</span>(@s3) </div><div class="line">    ,<span class="keyword">Len</span>(@s4)</div><div class="line"><span class="keyword">SELECT</span> </div><div class="line">    <span class="keyword">DATALENGTH</span>(@s1)</div><div class="line">    ,<span class="keyword">DATALENGTH</span>(@s2)</div><div class="line">    ,<span class="keyword">DATALENGTH</span>(@s3)</div><div class="line">    ,<span class="keyword">DATALENGTH</span>(@s4)</div><div class="line"></div><div class="line"><span class="comment">--一般情况下，SELECT @s1,@s2,@s3,@s4不会显示乱码，是由于安装SQL SERVER的时候后默认字符集是支持unicode字符的。如果遇到不支持的字符集，就需要显示定义字段类型为带N的类型，同时在赋值的时候使用N'中文'这种形式。</span></div></pre></td></tr></table></figure>
<h2 id="9、禁止在使用了事物的情况下，不编写防止造成未提交或者未回滚事务的情况的处理代码"><a href="#9、禁止在使用了事物的情况下，不编写防止造成未提交或者未回滚事务的情况的处理代码" class="headerlink" title="#9、禁止在使用了事物的情况下，不编写防止造成未提交或者未回滚事务的情况的处理代码"></a>#9、禁止在使用了事物的情况下，不编写防止造成未提交或者未回滚事务的情况的处理代码</h2><p><strong>分析：</strong> 数据库阻塞，你懂的…罪过大大的！</p>
<h2 id="10、警惕表变量的使用"><a href="#10、警惕表变量的使用" class="headerlink" title="#10、警惕表变量的使用"></a>#10、警惕表变量的使用</h2><p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--思考下结果是什么？</span></div><div class="line">IF NOT exists (<span class="keyword">SELECT</span> <span class="number">1</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    PRINT <span class="string">'enter'</span></div><div class="line">  <span class="keyword">DECLARE</span> @<span class="keyword">table</span> <span class="keyword">TABLE</span> </div><div class="line">  ( </div><div class="line">        <span class="keyword">name</span> <span class="keyword">nvarchar</span>(<span class="number">32</span>) </div><div class="line">  )</div><div class="line"><span class="keyword">END</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> @<span class="keyword">table</span></div></pre></td></tr></table></figure>
<p><strong>分析：</strong></p>
<ol>
<li>在表变量的使用中，会出现如JavaScript一样的定义前置，相当于不管你在哪个条件（也不关心是否能走到这个分支）中定义表变量，那么这个表变量在整个作用域中都是有效的。</li>
<li>临时表表现正常</li>
<li>表变量和一般的变量有点不一样的地方，表变量也会在tempdb中创建表。示例如下：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #TempTable (TT_Col1 <span class="built_in">INT</span>)</div><div class="line"><span class="keyword">DECLARE</span> @TableVariable <span class="keyword">TABLE</span> (TV_Col1 <span class="built_in">INT</span>)</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> TOP <span class="number">2</span> * </div><div class="line"><span class="keyword">FROM</span> tempdb.sys.tables</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> create_date <span class="keyword">DESC</span></div></pre></td></tr></table></figure>
<h2 id="11、判断是否存在（或者不存在）符合条件的记录使用-EXISTS-关键字。"><a href="#11、判断是否存在（或者不存在）符合条件的记录使用-EXISTS-关键字。" class="headerlink" title="#11、判断是否存在（或者不存在）符合条件的记录使用 EXISTS 关键字。"></a>#11、判断是否存在（或者不存在）符合条件的记录使用 EXISTS 关键字。</h2><p><strong>分析：</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">IF (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> <span class="keyword">Table</span> <span class="keyword">WITH</span> (NOLOCK))&gt;<span class="number">0</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">  <span class="comment">--Do something</span></div><div class="line"><span class="keyword">END</span></div><div class="line"><span class="comment">--应该用：</span></div><div class="line"><span class="keyword">IF</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> TOP <span class="number">1</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">Table</span> <span class="keyword">WITH</span> (NOLOCK)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">  <span class="comment">--Do something</span></div><div class="line"><span class="keyword">END</span></div></pre></td></tr></table></figure>
<h2 id="12、字符串比较时，SQL-SERVER会忽略末尾的空格。"><a href="#12、字符串比较时，SQL-SERVER会忽略末尾的空格。" class="headerlink" title="#12、字符串比较时，SQL SERVER会忽略末尾的空格。"></a>#12、字符串比较时，SQL SERVER会忽略末尾的空格。</h2><p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="number">1</span> </div><div class="line"><span class="keyword">WHERE</span> <span class="string">'t'</span> =<span class="string">'t        '</span></div></pre></td></tr></table></figure>
<h2 id="13、注意NULL的特殊性"><a href="#13、注意NULL的特殊性" class="headerlink" title="#13、注意NULL的特殊性"></a>#13、注意NULL的特殊性</h2><p><strong>分析：</strong></p>
<p>1.NULL既不能被=匹配，也不能被&lt;&gt;(!=)匹配，只能用IS NULL 或者是 ISNULL()</p>
<p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #tb(col1 <span class="built_in">int</span>)</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> #tb(col1)</div><div class="line"><span class="keyword">SELECT</span> <span class="literal">NULL</span> </div><div class="line"><span class="keyword">UNION</span> </div><div class="line"><span class="keyword">SELECT</span> <span class="number">1</span>    </div><div class="line"><span class="keyword">UNION</span></div><div class="line"><span class="keyword">SELECT</span> <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> #tb </div><div class="line"><span class="keyword">WHERE</span> col1 &lt;&gt; <span class="number">1</span> <span class="keyword">OR</span> col1 = <span class="number">1</span> <span class="comment">--2</span></div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> #tb <span class="comment">--3</span></div></pre></td></tr></table></figure>
<h2 id="14、COUNT-0-COUNT-COUNT-column-的区别"><a href="#14、COUNT-0-COUNT-COUNT-column-的区别" class="headerlink" title="14、COUNT(0),COUNT(*),COUNT(column)的区别"></a>14、COUNT(0),COUNT(*),COUNT(column)的区别</h2><p><strong>分析：</strong></p>
<ol>
<li>COUNT(0),COUNT(*)计数时会包含NULL值</li>
<li>COUNT(column)计数时，如果需要该列为NULL，则会忽略计数</li>
</ol>
<p><strong>示例:</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> #tb(col1 <span class="built_in">int</span>)</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> #tb(col1)</div><div class="line"><span class="keyword">SELECT</span> <span class="literal">NULL</span> </div><div class="line"><span class="keyword">UNION</span> </div><div class="line"><span class="keyword">SELECT</span> <span class="number">1</span>    </div><div class="line"><span class="keyword">UNION</span></div><div class="line"><span class="keyword">SELECT</span> <span class="number">2</span></div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> #tb <span class="comment">--3</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">0</span>) <span class="keyword">FROM</span> #tb <span class="comment">--3</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(col1) <span class="keyword">FROM</span> #tb <span class="comment">--2</span></div></pre></td></tr></table></figure></p>
<h2 id="15、通过合理的方法避免在-SELECT-语句中使用-DISTINCT"><a href="#15、通过合理的方法避免在-SELECT-语句中使用-DISTINCT" class="headerlink" title="#15、通过合理的方法避免在 SELECT 语句中使用 DISTINCT"></a>#15、通过合理的方法避免在 SELECT 语句中使用 DISTINCT</h2><p><strong>分析：</strong></p>
<ol>
<li>DISTINCT 是数据查询中一个非常慢的操作，所以尽可能的避免</li>
</ol>
<p><strong>示例：</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></div><div class="line">    A.au_fname</div><div class="line">    ,A.au_lname</div><div class="line"><span class="keyword">FROM</span> dbo.authors <span class="keyword">AS</span> A <span class="keyword">WITH</span> (NOLOCK) </div><div class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.titleAuthor <span class="keyword">AS</span> T <span class="keyword">WITH</span> (NOLOCK)  <span class="comment">--一对多的关系</span></div><div class="line"><span class="keyword">ON</span> T.au_id = A.au_id</div><div class="line"></div><div class="line"><span class="comment">--避免DISTINCT的写法</span></div><div class="line"><span class="keyword">SELECT</span> au_fname</div><div class="line">    ,au_lname</div><div class="line"><span class="keyword">FROM</span> dbo.authors <span class="keyword">AS</span> A <span class="keyword">WITH</span> (NOLOCK) </div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</div><div class="line">        <span class="keyword">SELECT</span> TOP <span class="number">1</span> <span class="number">1</span></div><div class="line">        <span class="keyword">FROM</span> dbo.titleAuthor <span class="keyword">AS</span> T <span class="keyword">WITH</span> (NOLOCK)</div><div class="line">        <span class="keyword">WHERE</span> T.au_id = A.au_id</div></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（三）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2014/10/30/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20141030%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##No.11、熟练掌握闭包<br><strong>Tips：</strong></p>
<ol>
<li>函数可以引用定义在其外部的作用域变量。</li>
<li>闭包比创建它们的函数有更长的生命周期。</li>
<li><p>闭包在内部存储其外部变量的引用，并能读写这些变量。</p>
<p> //第一个事实：JavaScript允许你引用在当前函数以外定义的变量。<br> function testClosures(){</p>
<pre><code>var all = &apos;Test&apos;;
function test(m){
    return all + &apos; and &apos; + m;
}
return test(&apos;closures&apos;);
</code></pre><p> }<br> testClosures(); //‘Test and closures’</p>
<p> //第二个事实：即使外部函数已返回，当前函数仍然可以引用在外部函数所定义的变量。<br> function testClosures(){</p>
<pre><code>var all = &apos;Test&apos;;
function test(m){
    return all + &apos; and &apos; + m;
}
return test;
</code></pre><p> }<br> var t = testClosures();<br> t(‘closures’); //‘Test and closures’</p>
<p> //第三个事实：闭包可以更新外部变量的值<br> function TestClass(){</p>
<pre><code>var all;
return {
    set: function(value){
        all = value;
    },
    get: function(){
        return all;
    }
};
</code></pre><p> }<br> var t = new TestClass();<br> t.set(‘555’);<br> t.get();</p>
</li>
</ol>
<p>闭包的优缺点：<br>优点： 变量保护、封装性，能够实现字段的可访问性(示例如下)</p>
<pre><code>function ModelClass(){
    //Property
    var name,age=23;
    return {
        setName: function(value){ //设置名称
            name = value;
        },
        getName: function(){ //获取名称
            return name;
        },
        getAge: function(){ //只读
            return age;
        }
    };
}        
</code></pre><p>缺点： 常驻内存，会增加内存使用量，使用不当和容易造成内存泄露。</p>
<h2 id="No-12、理解变量申明提升"><a href="#No-12、理解变量申明提升" class="headerlink" title="No.12、理解变量申明提升"></a>No.12、理解变量申明提升</h2><ol>
<li>代码块中的函数申明会提升到函数顶部</li>
<li>重复申明变量被视为单个变量</li>
<li>考虑手动提升局部变量的申明，避免混淆（将函数内所需变量集中申明到函数顶部）</li>
</ol>
<p>JavaScript支持词法作用域，而不支持块级作用域</p>
<pre><code>function test(){
    alert(a); //undefined
    var a = 1;
    alert(a);  //1
}
test();
以上代码等价于：
function test(){
    var a;
    alert(a); //undefined
    a = 1;
    alert(a);  //1
}
test();
</code></pre><p>一个例外是 <em>try…catch</em> :catch块中的变量作用域只在catch中。</p>
<pre><code>function test(){
    var x = &apos;1&apos;;
    try{
        throw &apos;&apos;
    }catch(x){
        alert(&apos;error&apos;);
        x = &apos;2&apos;;
    }
    alert(x); // 1
}
test();
</code></pre><h2 id="No-13、使用立即调用的函数表达式创建局部作用域"><a href="#No-13、使用立即调用的函数表达式创建局部作用域" class="headerlink" title="No.13、使用立即调用的函数表达式创建局部作用域"></a>No.13、使用立即调用的函数表达式创建局部作用域</h2><ol>
<li>理解绑定与赋值的区别</li>
<li>闭包通过引用而不是值捕获它们的外部变量</li>
<li>使用立即调用的函数表达式（IIFE）来创建具有作用域</li>
<li>当心在立即调用的函数表达式中包裹代码块可能改变其行为的情形</li>
</ol>
<p>看看以下代码段输出什么？</p>
<pre><code>function test(){
    var arr = [1,2,3,4,5];
    var result = [];
    for(var i = 0, len = arr.length; i &lt; len; i++){
        result[i] = function(){
            return arr[i];
        }
    }
    return result;
}
var result = test();
result[0](); 
</code></pre><p>可以通过立即调用表达式来解决JavaScript缺少块级作用域。如上代码可修改为:</p>
<pre><code>function test(){
    var arr = [1,2,3,4,5];
    var result = [];
    for(var i = 0, len = arr.length; i &lt; len; i++){
        (function(){
            var j = i;
            result[i] = function(){
                return arr[j];
            }
        })(i);
    }
    return result
}
var result = test();
result[0]();
</code></pre><p>##No.14、当心命名函数表达式笨拙的作用域</p>
<ol>
<li>在Error对象和调试器中使用命名函数表达式改进栈跟踪</li>
<li>在ES3和有问题的JS环境中，函数表达式作用域会被Object.prototype污染</li>
<li>谨记在错误百出的JS环境中会提升命名函数表达式声明，并导致命名函数表达式的重复存储</li>
<li>考虑避免使用命名函数表达式或在发布前删除函数名</li>
<li>如果将代码发布到正确实现的ES5的环境中，没什么好担心的</li>
</ol>
<p>匿名和命名函数表达式的官方区别在于后者会绑定到与其函数名相同的变量上，该变量将作为该函数内部的一个局部变量。这可以用来写递归函数表达式。</p>
<pre><code>var f = function find(tree, key){
    if(!tree){
        return null;
    }
    if(tree.key === key){
        return tree.value;
    }
    //函数内部可以访问find
    return find(tree.left, key) || find(tree.right, key);
}
</code></pre><p><strong>结论：尽量避免使用命名函数表达式</strong></p>
<h2 id="No-15、当心局部块函数声明笨拙的作用域"><a href="#No-15、当心局部块函数声明笨拙的作用域" class="headerlink" title="No.15、当心局部块函数声明笨拙的作用域"></a>No.15、当心局部块函数声明笨拙的作用域</h2><ol>
<li>始终将函数声明置于程序或被包含的函数的最外层以避免不可移植的行为</li>
<li><p>使用var声明和有条件赋值语句替代有条件的函数声明</p>
<p> function f(){</p>
<pre><code>return &apos;global&apos;;
</code></pre><p> }<br> function test(x){</p>
<pre><code>var result = [];
if(x){
    function f(){
        return &apos;local&apos;;
    }
    result.push(f());
}
result.push(f());
return result;
</code></pre><p> }<br> test(true);<br> test(false);</p>
</li>
</ol>
<p><strong>结论：尽量将函数块定义为变量，防止函数提前</strong></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[从0开始Grunt]]></title>
      <url>http://hstarorg.github.io/blog/blog/2014/10/25/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/%5B20141025%5D%E4%BB%8E0%E5%BC%80%E5%A7%8BGrunt/</url>
      <content type="html"><![CDATA[<h2 id="首先，Grunt是什么？"><a href="#首先，Grunt是什么？" class="headerlink" title="首先，Grunt是什么？"></a>首先，Grunt是什么？</h2><p>Grunt是JavaScript任务运行工具。使用它可以自动化诸如文件(夹)操作、代码压缩、代码编译、单元测试、代码规范校验等等重复的任务。</p>
<h2 id="如何安装Grunt？（Windows）"><a href="#如何安装Grunt？（Windows）" class="headerlink" title="如何安装Grunt？（Windows）"></a>如何安装Grunt？（Windows）</h2><p><strong>Step1</strong>、Grunt依赖Node扩展包，那么必须要安装Node：</p>
<ol>
<li>打开Node官网：<a href="http://nodejs.org/" target="_blank" rel="external">http://nodejs.org/</a></li>
<li>点击 <strong>INSTALL</strong> 按钮，会自动适配环境，下载一个安装包，双击安装即可</li>
<li>打开cmd命令行，输入命令代码：<i> node -v </i> ，如果输出一个具体的版本号，如 <i>v0.10.xx </i>，则表示安装成功。</li>
</ol>
<p><strong>Step2</strong>、安装grunt的命令行工具：</p>
<ol>
<li>打开cmd命令行，输入命令代码：<i>npm install -g grunt-cli</i> ,该命令表示全局安装grunt的命令行</li>
</ol>
<p>到此，Grunt算是安装完成。</p>
<h2 id="如何使用？（以一个SPA为例）"><a href="#如何使用？（以一个SPA为例）" class="headerlink" title="如何使用？（以一个SPA为例）"></a>如何使用？（以一个SPA为例）</h2><p>首先，创建该项目SPADemo，目录结构如下：</p>
<pre><code>SPADemo
    src
        images     //图片文件夹
        styles     //样式表文件夹
        scripts    //脚本文件夹
            vendor //存放第三方组件
        index.html //默认页
</code></pre><p>第二步，书写package.json 文件，确定依赖项。放在src同级目录,内容如下：</p>
<pre><code>{
  &quot;name&quot;: &quot;SPADemo&quot;,
  &quot;version&quot;: &quot;0.1.0&quot;,
  &quot;devDependencies&quot;: {
    &quot;grunt&quot;: &quot;~0.4.2&quot;
  }
}
</code></pre><p>第三步，打开SPADemo根文件夹，在路径栏输入cmd，进入当前目录的cmd模式，输入 <i>npm i</i> ,初始化依赖项。当更该package.json后，可重复执行该命令。将依赖项重新初始化。会生成一个node_modules文件夹。</p>
<p>第四步，进行Grunt配置。默认配置文件名为Gruntfile.js（.coffee也可以，但是Gruntfile不能更改，同时必须放在src同级目录）</p>
<p>第五步，配置Gruntfile.js/coffee</p>
<pre><code>module.exports = function(grunt){
    //初始化Grunt
    grunt.initConfig({});

    // registerTask(taskName,taskDescription,taskFunc/childTaskArray)
    grunt.registerTask(&apos;default&apos;,&apos;任务入口&apos;,function(){
        grunt.log.write(&apos;任务已启动！&apos;);
    });
};
</code></pre><p>到现在，一个Grunt已经完整配置好了。进入SPADemo目录的cmd命令行，输入grunt，会显示“任务已启动！”</p>
<h2 id="如何使用插件？"><a href="#如何使用插件？" class="headerlink" title="如何使用插件？"></a>如何使用插件？</h2><h3 id="文件清理插件-grunt-contrib-clean"><a href="#文件清理插件-grunt-contrib-clean" class="headerlink" title="文件清理插件 grunt-contrib-clean"></a>文件清理插件 grunt-contrib-clean</h3><p>该插件用于清除目录/文件</p>
<p>首先在package.json中添加该依赖包。变化后配置如下：</p>
<pre><code>{
  &quot;name&quot;: &quot;SPADemo&quot;,
  &quot;version&quot;: &quot;0.1.0&quot;,
  &quot;devDependencies&quot;: {
    &quot;grunt&quot;: &quot;~0.4.2&quot;,
    &quot;grunt-contrib-clean&quot;: &quot;~0.6.0&quot;
  }
}
</code></pre><p>然后在Gruntfile.js中增加该插件的配置，代码如下（更详细的配置请参考插件地址）：</p>
<pre><code>module.exports = function(grunt){
    grunt.initConfig({
        //clean插件的配置项，名字不能变化。
        //插件地址：https://github.com/gruntjs/grunt-contrib-clean
        clean: {
            //任务具体配置，清除dist文件夹
            cleanDist: {
                force: true, //允许操作当前工作目录之外的目录
                src: &apos;dist/**/*&apos; //dist下的所有文件和目录
            }
        }
    });

    grunt.loadNpmTasks(&apos;grunt-contrib-clean&apos;);// 必须，使用clean插件，必须要调用该方法，加载插件

    // registerTask(taskName,taskDescription,taskFunc/childTaskArray)
    grunt.registerTask(&apos;default&apos;,&apos;任务入口&apos;,function(){
        grunt.log.write(&apos;任务已启动！&apos;);
        grunt.task.run([
            &apos;clean:cleanDist&apos; //使用clean任务的cleanDist配置运行任务
        ]);
    });
};
</code></pre><p>最后cmd运行grunt命令，就可以执行对dist目录的清理了。可以手动新建dist文件夹测试。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>Grunt是一个庞大的生态系统，我们可以自由的选择数以百计的插件来帮助处理自动化任务。同时，如果发现没有合适的插件，我们还可以自己创建插件并通过npm发布，以供更多人使用和完善。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（二）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2014/10/11/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20141011%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##No.6、了解分号插入的局限性<br><strong>Tips：</strong></p>
<ol>
<li>仅在“}”标记之前、一行的结束和程序的结束处推导分号</li>
<li>仅在紧接着的标记不能被解析的时候推导分号</li>
<li>在以(、[、+、-或/字符开头的语句前绝不能省略分号</li>
<li>当脚本连接的时候，在脚本之间显式的插入分号</li>
<li>在return、throw、break、continue、++或–的参数之前绝不能换行</li>
<li>分号不能作为for循环的头部和空语句的分隔符而被推导出</li>
<li><strong>个人总结：尽量不要省略分号，不要让JS自动推导</strong></li>
</ol>
<p>分号仅在}标记之前、一个或多个换行之后和程序输入的结尾被插入，看代码：</p>
<pre><code>// 能自动推导分号
function square(x){
    var n = +x
    return n*n
}

// Error，不能自动推导
function square(x){var n = +x return n*n}
</code></pre><p>分号仅在随后的输入标记不能被解析时插入，看代码：</p>
<pre><code>a=b
(f());
此时，代码等价于 ab(f());
但是：
a=b
f()
则会被解析为a=b f();
</code></pre><p>在以(、[、+、-或/字符开头的语句前，绝不能省略分号，看代码：</p>
<pre><code>a=b
[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;].forEach(function(key){
    console.log(key)
})
等价于
a=b[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;].forEach(function(key){
    console.log(key);
});

a=1
/Error/i.test(&apos;test&apos;)
等价于
a=1/Error/i.test(&apos;test&apos;);
</code></pre><p>合并脚本时不能省略分号，看代码：</p>
<pre><code>//file1.js
(function(){console.log(&apos;file1&apos;)})()

//file2.js
(function(){console.log(&apos;file2&apos;)})()

//合并后 --输出file1，然后报错
(function(){console.log(&apos;file1&apos;)})()(function(){console.log(&apos;file2&apos;)})()
</code></pre><p>为了防止自己写的库在合并时内其他代码干扰，所以一般写法为如下代码：</p>
<pre><code>;(function(){ 
    /*Code*/ 
})();
</code></pre><p>在return、throw、break、continue、++或–的参数之前绝不能换行，看代码：</p>
<pre><code>a
++
b
等价于：
a;++b;
</code></pre><p>for循环中不要省略分号</p>
<pre><code>//Parse Error
var total=0
for(var i=0,total=1
    i&lt;n
    i++){
    total*=i
}
</code></pre><p><strong>综上，再次强调，不加分号看起来代码轻量，但稍不注意就会引起很多bug，所以，建议都加上分号，不要让JS环境自行推导</strong></p>
<p>##No.7、视字符串为16位的代码单元序列</p>
<pre><code>待定...
</code></pre><p>##No.8、尽量少用全局对象<br><strong>Tips：</strong></p>
<ol>
<li>避免申明全局变量</li>
<li>尽量申明局部变量</li>
<li>避免对全局对象添加属性</li>
<li>使用全局对象来做平台特性检测</li>
</ol>
<p>定义全局变量会污染共享的公命名空间，并可能导致意外的命名冲突。全局变量不利于模块化，因为它会导致程序中独立组件间的不必要耦合。</p>
<p>##No.9、始终声明局部变量<br><strong>Tips：</strong></p>
<ol>
<li>始终使用var声明新的局部变量</li>
<li>考虑使用lint工具来帮助检查未绑定的变量</li>
</ol>
<p>如果存在比全局变量更麻烦的事情，那就是意外的全局变量。由于不适用var申明的变量，统统为全局变量，所以一定要使用var来定义变量，防止变量污染。</p>
<pre><code>function test(){
    test=&apos;test&apos;;
}
test();
window.test;// &apos;test&apos;
</code></pre><p>##No.10、避免使用with<br><strong>Tips：</strong></p>
<ol>
<li>避免使用with语句</li>
<li>使用简短的变量名代替重复访问的对象</li>
<li>显式地绑定局部变量到对象属性上，而不要使用with语句隐式地绑定他们</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[编写高质量JS代码的68个有效方法（一）]]></title>
      <url>http://hstarorg.github.io/blog/blog/2014/09/26/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%5B20140926%5D%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJS%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>##No.1、了解你使用的JavaScript版本<br><strong>Tips</strong>：</p>
<ol>
<li>决定你的应用程序支持JavaScript的哪些版本。</li>
<li>确保你使用的任何JavaScript的特性对于应用程序将要运行的所有环境都是支持的。</li>
<li>总是在执行严格模式检查的环境中测试严格代码。</li>
<li>当心连接那些在不同严格模式下有不同预期的脚本。</li>
</ol>
<p>JavaScript的普及使得它在1997年成为国际标准，官方名称为ECMAScript。除了ECMAScript标准存在多个版本之外，还存在一些JavaScript实现支持非标准特性，其他JavaScript实现不支持的情况。所以需要注意你所写的JavaScript代码所支持的版本。</p>
<pre><code>/*[Sample]如下代码，在IE下会Syntax error，但是在Chrome中则是定义常量*/
const PI=3.14;PI=3;PI
</code></pre><p>由于JavaScript的主要生态系统–<strong>Web浏览器</strong>并不支持让程序员指定某个JavaScript版本来执行代码。在ES5中，引入了另外一种版本控制的考量–<strong>严格格式（strict mode）</strong>，这个特性允许你选择在受限制的JavaScript版本中禁用JavaScript语言中问题较多或易于出错的特性。由于JS语法涉及向后兼容，所以在没有严格检查的环境中也能执行严格代码。</p>
<pre><code>/*[Sample]如何使用严格模式，在程序/函数体的开始处加入&apos;use strict&apos;
    使用字符串字面量作为指令看起来比较怪异，但好处是可以向后兼容，因为执行字符串字面量没有任何副作用
/*
function f(x){
    &apos;use strict&apos;;
    var arguments=[];//SyntaxError:Unexpected eval or arguments in strict mode
}
</code></pre><p>“use strict”指令只有在脚本或者函数顶部才生效，这也是使用严格模式的一个陷进。脚本连接将变得颇为敏感。假如有多个js文件，一些需要执行在严格模式下，一些不需要执行在严格模式下，如何处理呢？</p>
<ol>
<li>将需要严格模式检查的文件和不需要严格模式检查的文件分开连接</li>
<li><p>通过将自身包裹在立即调用的函数表达式中的方式来连接多个文件</p>
<p> /<em>file1.js</em>/<br> function fun1(){</p>
<pre><code>var arguments=[];
</code></pre><p> }</p>
<p> /<em>file2.js</em>/<br> ‘use strict’;<br> function fun2(){</p>
<pre><code>console.log(&apos;strict mode!&apos;);
</code></pre><p> }</p>
<p> /<em>按照方式二连接后的文件内容应该是</em>/<br> /<em>fileMerge.js</em>/<br> (function(){</p>
<pre><code>function fun1(){
    var arguments=[];
}
</code></pre><p> })();<br> (function(){</p>
<pre><code>&apos;use strict&apos;;
function fun2(){
    console.log(&apos;strict mode!&apos;);
}
</code></pre><p> })();</p>
</li>
</ol>
<p>##No.2、理解JavaScript的浮点数<br><strong>Tips</strong>：</p>
<ol>
<li>JavaScript的数字都是双精度的浮点数。</li>
<li>JavaScript的整数仅仅是双精度浮点数的一个子集，而不是一个单独的数据类型。</li>
<li>位运算将数字视为32位的有符号整数。</li>
<li>当心浮点运算中的精度陷进。</li>
</ol>
<p>大部分语言都有几种数值数据类型，但是JavaScript只有一种</p>
<pre><code>typeof 1;    //&apos;number&apos;
typeof 1.1;  //&apos;number&apos;
typeof -1;   //&apos;number&apos;
</code></pre><p>对于位运算，JavaScript不会直接将操作数作为浮点数运算，会先转换为32位整数再进行运算</p>
<pre><code>8|1;    //9
8.1|1;  //9
</code></pre><p>如何快速从10进制转换到2~36进制？</p>
<pre><code>(100).toString(2);    //1100100
(100).toString(10);   //100
(100).toString(35);   //2u
(100).toString(36);   //2s
</code></pre><p>注意parseInt和parseFloat的用法</p>
<p><strong>警告（以下为非标准特性，各浏览器执行有差异）：</strong></p>
<ol>
<li>如果要转换的字符串已0x或者0X开头，那么parseInt(‘0xAB’)等价于parseInt(‘0xAB’,16)</li>
<li>如果遇到0开头，那么parseInt(‘013’)等价于parseInt(‘013’,8)</li>
<li><p><strong>强烈建议在使用parseInt时指定进制</strong></p>
<p> parseInt(‘9x’);    //9 会自动忽略不能转换的字符<br> parseInt(‘x9’);    //NaN 发现第一个字符就不能转换，返回NaN<br> parseInt(‘1100100’,2);    //100 可以在parseInt的第二个参数指定当前字符串的进制<br> parseInt(‘2xxx’,2);    //NaN 遇到无法转换的情况，返回NaN<br> parseInt(‘08’);    //IE下:0,Chrome35下:8 </p>
</li>
</ol>
<p>浮点数是出了名的不精确，你能知道以下代码的执行结果吗？</p>
<pre><code>0.1+0.2;           //0.30000000000000004
(0.1+0.2)+0.3;     //0.6000000000000001
0.1+(0.2+0.3);     //0.6
0.3-0.2;           //0.09999999999999998
</code></pre><p>当我们关心精度时，要小心浮点数的局限性。有效的方法是尽可能的采用整数值运算，整数在运算时不需要舍入。</p>
<p>##No.3、当心隐式的强制转换<br><strong>Tips</strong>：</p>
<ol>
<li>类型错误可能被隐式的强制转换所隐藏。</li>
<li>重载的运算符+是进行加法运算还是字符串连接取决于其参数类型。</li>
<li>对象通过valueOf方法强制转换为数字，通过toString方法强制转换为字符串。</li>
<li>具有valueOf方法的对象应该实现toString方法，返回一个有valueOf方法产生的数字的字符串表示。</li>
<li><p>测试一个值是否为未定义的值，应该使用typeof或者与undeined进行比较而不是使用真值运算。</p>
<p> 3+true;   //4 true转换为数字1<br> ‘fun’(1); //TypeError:string is not a function<br> null.x;   //TypeError: Cannot read property ‘x’ of null<br> 2+3;      //5<br> 2+’3’;    //‘23’ 偏爱字符串，遇到字符串，那么优先用字符串连接<br> 1+2+’3’;  //‘33’ 加法运算是从左到右，所以等价于(1+2)+’3’<br> 1+’2’+3;  //‘123’<br> ‘17’*3;   //51<br> ‘8’|’1’   //9</p>
</li>
</ol>
<p>如何测试一个值是NaN？</p>
<pre><code>var x=NaN;
x===NaN;   //false，NaN不等于自身
</code></pre><p>如果知道带测试的值是数字，那么可以使用标准库函数isNaN</p>
<pre><code>isNaN(NaN);  //true
</code></pre><p>但是对于其他绝对不是NaN，但会被强制转换为NaN的值，使用isNaN方法是无法区分的。</p>
<pre><code>isNaN(&apos;foo&apos;);  //true
isNaN(undefined);  //true
isNaN({});   //true
isNaN({valueOf:&apos;foo&apos;});  //true
</code></pre><p>幸运的是，有一个既简单有可靠但有点不直观的方法测试它：</p>
<p><strong>JS中，NaN是唯一一个不等于其自身的值。</strong></p>
<pre><code>var x=NaN;
x!==x //true

/*测试x是否是NaN，是返回true，否则返回false*/
function isReallyNaN(x){
    return x!==x;
}
</code></pre><p>如何控制对象的强制转换？</p>
<pre><code>&apos;J&apos;+{toString:function(){return &apos;S&apos;}};  //&apos;JS&apos; 
2*{valueOf:function(){return 3;}};  //6

var obj={
    toString:function(){
        return &apos;[object Obj]&apos;;
    },
    valueOf:function(){
        return 1;
    }
}
&apos;object:&apos;+obj;  //&apos;object:1&apos;

解释：
1. 在需要数字的场合，优先判断valueOf，没有的话，则采用toString。
2. 如果对象同时拥有valueOf和toString方法，同时又一定是需要数字的场合，那么JavaScript盲目的选择valueOf方法而不是toString方法来解决这种含糊的情况。
3. 针对2：最好避免使用valueOf方法，除非对象的确需要一个数字的抽象，并且obj.toString()能产生一个obj.valueOf()的字符串的表示。
</code></pre><p>关于真值运算：</p>
<p><strong>JavaScript中有7个假值：false、0、-0、’’、NaN、null和undefined，其他都为真值</strong></p>
<p>##No.4、原始类型优于封装对象<br><strong>Tips</strong>：</p>
<ol>
<li>当做相等比较是，原始类型的封装对象与其原始值行为不一样。</li>
<li>获取和设置原始类型值的属性会隐式地创建封装对象。</li>
</ol>
<p>除了对象以外，JavaScript有5个原始值类型：布尔值、数字、字符串、null和undefined。（令人困惑的是，对于null类型进行typeof操作得到的结果为”object”，然而，ECMAScript标准描述其为一个独特的类型。）</p>
<pre><code>var s=&apos;hello&apos;;  
var sObj=new String(s);
typeof s;    //&apos;string&apos;
typeof sObj;   //&apos;object&apos; 包装对象的类型是object

var sObj1=new String(s);
var sObj2=new String(s);
sObj1==sObj2;   //false
sObj1===sObj2;  //false

解释：可以理解为引用类型，每个对象是单独的对象，其引用是不一致的，所以只等于自身。
</code></pre><p>JavaScript对基本类型有隐式封装，所以我们可以如下书写代码：</p>
<pre><code>&apos;test&apos;.toUpperCase(); //&apos;TEST&apos;

&apos;test&apos;.test=&apos;test&apos;;
&apos;test&apos;.test;   //undefined

解释：对基本类型调用方法/设置属性时，会产生隐式封装。
原始值-&gt;封装类型（产生封装对象）-&gt;封装对象执行方法/设置属性-&gt;返回原始值-&gt;抛弃封装对象。
所以更新封装不会造成持久的影响，同时对原始值设置属性是没有意义的。
</code></pre><p>##No.5、避免对混合类型使用==运算符<br><strong>Tips</strong>：</p>
<ol>
<li>当参数类型不同时，==运算符应用了一套难以理解的隐式强制转换规则。</li>
<li>使用===运算符，使读者不需要设计任何的隐式强制转换就能明白你的比较运算。 </li>
<li>当比较不同类型的值时，使用你自己的显式强制转换使程序的行为更清晰。</li>
</ol>
<p>看代码：</p>
<pre><code>&apos;1.0e0&apos;=={valueOf:function(){return true;}}; //true 因为通过隐式转换，就变成了1==1，所以结果为true。

转换为字符串：&apos;&apos;+1; //&apos;1&apos;
转换为数字  : +&apos;1&apos;; //1

var date=new Date(&apos;1999/12/31&apos;);
date==&apos;1991/12/31&apos;;//false
date==&apos;Fri Dec 31 1999 00:00:00 GMT+0800 (China Standard Time)&apos;;//true

解释：世界上有太多的数据表现形式，JS需要知道你使用的是哪一种，==运算符并不能推断和统一所有的数据格式，所以更好的策略是显式自定义应用程序转换的逻辑，并使用严格相等运算符。
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[C#可替代反射的几种方式]]></title>
      <url>http://hstarorg.github.io/blog/blog/2014/09/13/C#/%5B20140913%5D%E5%8F%AF%E6%9B%BF%E4%BB%A3%E5%8F%8D%E5%B0%84%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>##标准的反射代码##</p>
<pre><code>var type = obj.GetType();
var fieldInfo = type.GetField(&quot;age&quot;, BindingFlags.Instance | BindingFlags.NonPublic);
fieldInfo.SetValue(obj, 20);
//  Console.WriteLine(&quot;设置年龄成功：{0}&quot;, (obj as ModelTest).Age);
var s1 = type.InvokeMember(&quot;TestMethod1&quot;, BindingFlags.InvokeMethod, null, obj, null);
var s2 = type.InvokeMember(&quot;TestMethod2&quot;, BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, obj, null);
// Console.WriteLine(s1);
// Console.WriteLine(s2);
</code></pre><p>###说明###</p>
<ol>
<li>能动态获取对象属性、方法、字段等信息</li>
<li>能访问对象的私有字段，属性，方法等成员</li>
<li>能动态修改对象属性</li>
<li><strong>注：</strong>访问public方法使用BindingFlags.InvokeMethod，访问私有方法时，必须加上BindingFlags.NonPublic|BindingFlags.Instance，否则会出现找不到方法的异常</li>
</ol>
<p>##采用dynamic对象达到发射的效果##<br>    dynamic d = obj;<br>    var s1 = d.TestMethod1();<br>    Console.WriteLine(s1);</p>
<p>###说明###</p>
<ol>
<li>可使用公开的属性，字段，方法等成员</li>
<li>代码足够简洁</li>
<li><strong>注：</strong>不能访问非公开的成员</li>
</ol>
<p>##依赖Microsoft的测试组件Microsoft.VisualStudio.TestTools.UnitTesting来达到反射的效果##<br>    var privateObj = new PrivateObject(obj);<br>    privateObj.SetField(“age”, 20);<br>    var age = privateObj.GetProperty(“Age”);<br>    Console.WriteLine(age);<br>    privateObj.Invoke(“TestMethod1”);<br>    privateObj.Invoke(“TestMethod2”);</p>
<p>###说明###</p>
<ol>
<li>采用第三方组件实现</li>
</ol>
<p>##性能说明##<br>测试代码如下：<br>    private static void Main(string[] args)<br>    {<br>        RunSpecialTest(new SimpleReflection(), 1000);<br>        RunSpecialTest(new DynamicReflection(), 1000);<br>        RunSpecialTest(new PrivateObjectReflection(), 1000);<br>        Console.ReadKey();<br>    }</p>
<pre><code>private static void RunSpecialTest(ITest test, int runCount)
{
    var modelTest = new ModelTest();
    var stopwatch = new Stopwatch();
    stopwatch.Start();
    for (int i = 0; i &lt; runCount; i++)
    {
        test.TestRun(modelTest);
    }
    stopwatch.Stop();
    Console.WriteLine(&quot;运行{0} {1}次，共耗时：{2}ms&quot;, test.Name, runCount, stopwatch.ElapsedMilliseconds);
}
</code></pre><p>结果：</p>
<p>运行SimpleReflection 1000次，共耗时：2ms</p>
<p>运行DynamicReflection 1000次，共耗时：717ms</p>
<p>运行PrivateObjectReflection 1000次，共耗时：14ms</p>
<p>##疑问##</p>
<ol>
<li>采用标准的反射用法，除了第一次耗时较慢意外，后面耗时都很短，可以说是最快的方式，猜测是缓存，具体未知。</li>
<li>PrivateObjectReflection这个和发射有类似的情况，初次慢，后面快。何解？</li>
</ol>
]]></content>
      
        
    </entry>
    
  
  
</search>
